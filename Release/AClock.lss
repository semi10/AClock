
AClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f6  00800100  00003f22  00003fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b2  008001f6  008001f6  000040ac  2**0
                  ALLOC
  3 .stab         0000e634  00000000  00000000  000040ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001324d  00000000  00000000  000126e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__dtors_end>
       4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
       8:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
       c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      10:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      14:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      18:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      1c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      20:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      24:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      28:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      30:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      34:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      38:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      3c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      40:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__vector_16>
      44:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      48:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_18>
      4c:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__vector_19>
      50:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      54:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      58:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      5c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      60:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_24>
      64:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>

00000068 <_ZL4Font>:
      68:	00 00 00 00 00 00 00 7d 00 00 00 10 20 10 20 0a     .......}.... . .
      78:	1f 0a 1f 0a 31 49 7f 49 46 33 36 0c 1b 33 2e 51     ....1I.IF36..3.Q
      88:	5b 24 0a 00 00 70 00 00 00 1c 63 00 00 00 00 63     [$...p....c....c
      98:	1c 00 22 14 3e 14 22 08 08 3e 08 08 00 01 02 00     ..".>."..>......
      a8:	00 08 08 08 08 08 01 00 00 00 00 01 06 08 30 40     ..............0@
      b8:	3e 45 49 51 3e 00 21 7f 01 00 21 43 45 49 31 22     >EIQ>.!...!CEI1"
      c8:	41 49 49 36 0c 14 24 7f 04 72 51 51 51 4e 3e 49     AII6..$..rQQQN>I
      d8:	49 49 26 40 40 4f 50 60 36 49 49 49 36 32 49 49     II&@@OP`6III62II
      e8:	49 3e 00 00 14 00 00 00 01 12 00 00 08 14 14 22     I>............."
      f8:	22 14 14 14 14 14 22 22 14 14 08 00 30 45 48 30     ".....""....0EH0
     108:	1e 2d 55 5d 3a 3f 48 48 48 3f 7f 49 49 49 36 3e     .-U]:?HHH?.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 48     AAA".AA"..IIIA.H
     128:	48 48 40 3e 41 49 49 2e 7f 08 08 08 7f 00 41 7f     HH@>AII.......A.
     138:	41 00 06 01 01 01 7e 7f 08 14 22 41 7f 01 01 01     A.....~..."A....
     148:	01 7f 20 10 20 7f 7f 10 08 04 7f 3e 41 41 41 3e     .. . ......>AAA>
     158:	7f 48 48 48 30 3e 41 45 42 3d 7f 48 4c 4a 31 31     .HHH0>AEB=.HLJ11
     168:	49 49 49 46 40 40 7f 40 40 7e 01 01 01 7e 7c 02     IIIF@@.@@~...~|.
     178:	01 02 7c 7f 02 04 02 7f 63 14 08 14 63 60 10 0f     ..|.....c...c`..
     188:	10 60 43 45 49 51 61 00 3e 41 41 00 40 30 08 06     .`CEIQa.>AA.@0..
     198:	01 00 41 41 3e 00 10 20 40 20 10 01 01 01 01 01     ..AA>.. @ ......
     1a8:	00 08 36 41 00 00 00 7f 00 00 00 41 36 08 00 08     ..6A.......A6...
     1b8:	10 08 04 08 dc 60 30 18 ec 84 84 84 7c 04 00 8c     .....`0.....|...
     1c8:	90 a0 7c 80 80 80 fc 80 9c 80 80 80 7c 00 00 fc     ..|.........|...
     1d8:	00 00 00 80 fc 40 00 fc 80 80 80 7c fc 04 84 84     .....@.....|....
     1e8:	78 00 40 c0 40 00 80 80 80 80 7f 84 84 84 84 7c     x.@.@..........|
     1f8:	00 c4 48 50 20 fc 84 84 84 7c bc 40 84 84 7c 00     ..HP ....|.@..|.
     208:	80 ff 00 00 04 04 04 04 fc f8 84 84 84 78 04 fc     .............x..
     218:	04 04 f8 e0 a0 80 7f 00 ec a4 84 84 7c 80 60 1f     ............|.`.
     228:	20 c0 84 44 24 14 e8 bf 80 88 90 60 80 80 80 80      ..D$......`....
     238:	7c fc 04 fc 04 f8 04 fc 80 80 7c                    |.........|

00000243 <port_to_mode_PGM>:
     243:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000024d <port_to_output_PGM>:
     24d:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000257 <port_to_input_PGM>:
     257:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000261 <digital_pin_to_port_PGM>:
     261:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     271:	03 03 03 03                                         ....

00000275 <digital_pin_to_bit_mask_PGM>:
     275:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     285:	04 08 10 20                                         ... 

00000289 <digital_pin_to_timer_PGM>:
     289:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     299:	00 00 00 00 00                                      .....

0000029e <__ctors_start>:
     29e:	6a 04       	cpc	r6, r10
     2a0:	f1 08       	sbc	r15, r1
     2a2:	ca 15       	cp	r28, r10

000002a4 <__ctors_end>:
     2a4:	f6 08       	sbc	r15, r6

000002a6 <__dtors_end>:
     2a6:	11 24       	eor	r1, r1
     2a8:	1f be       	out	0x3f, r1	; 63
     2aa:	cf ef       	ldi	r28, 0xFF	; 255
     2ac:	d8 e0       	ldi	r29, 0x08	; 8
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	cd bf       	out	0x3d, r28	; 61

000002b2 <__do_copy_data>:
     2b2:	11 e0       	ldi	r17, 0x01	; 1
     2b4:	a0 e0       	ldi	r26, 0x00	; 0
     2b6:	b1 e0       	ldi	r27, 0x01	; 1
     2b8:	e2 e2       	ldi	r30, 0x22	; 34
     2ba:	ff e3       	ldi	r31, 0x3F	; 63
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <__do_copy_data+0x10>
     2be:	05 90       	lpm	r0, Z+
     2c0:	0d 92       	st	X+, r0
     2c2:	a6 3f       	cpi	r26, 0xF6	; 246
     2c4:	b1 07       	cpc	r27, r17
     2c6:	d9 f7       	brne	.-10     	; 0x2be <__do_copy_data+0xc>

000002c8 <__do_clear_bss>:
     2c8:	14 e0       	ldi	r17, 0x04	; 4
     2ca:	a6 ef       	ldi	r26, 0xF6	; 246
     2cc:	b1 e0       	ldi	r27, 0x01	; 1
     2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <.do_clear_bss_start>

000002d0 <.do_clear_bss_loop>:
     2d0:	1d 92       	st	X+, r1

000002d2 <.do_clear_bss_start>:
     2d2:	a8 3a       	cpi	r26, 0xA8	; 168
     2d4:	b1 07       	cpc	r27, r17
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <.do_clear_bss_loop>

000002d8 <__do_global_ctors>:
     2d8:	12 e0       	ldi	r17, 0x02	; 2
     2da:	c4 ea       	ldi	r28, 0xA4	; 164
     2dc:	d2 e0       	ldi	r29, 0x02	; 2
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <__do_global_ctors+0x10>
     2e0:	22 97       	sbiw	r28, 0x02	; 2
     2e2:	fe 01       	movw	r30, r28
     2e4:	0e 94 8e 1c 	call	0x391c	; 0x391c <__tablejump__>
     2e8:	ce 39       	cpi	r28, 0x9E	; 158
     2ea:	d1 07       	cpc	r29, r17
     2ec:	c9 f7       	brne	.-14     	; 0x2e0 <__do_global_ctors+0x8>
     2ee:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <main>
     2f2:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__do_global_dtors>

000002f6 <__bad_interrupt>:
     2f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fa <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     2fa:	10 92 1a 02 	sts	0x021A, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     2fe:	82 e1       	ldi	r24, 0x12	; 18
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
  digitalWrite(SCL, 1);
     306:	83 e1       	ldi	r24, 0x13	; 19
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     30e:	e9 eb       	ldi	r30, 0xB9	; 185
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	8e 7f       	andi	r24, 0xFE	; 254
     316:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     318:	80 81       	ld	r24, Z
     31a:	8d 7f       	andi	r24, 0xFD	; 253
     31c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     324:	85 e4       	ldi	r24, 0x45	; 69
     326:	80 93 bc 00 	sts	0x00BC, r24
}
     32a:	08 95       	ret

0000032c <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     32c:	88 0f       	add	r24, r24
     32e:	80 93 ba 00 	sts	0x00BA, r24
}
     332:	08 95       	ret

00000334 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     334:	41 32       	cpi	r20, 0x21	; 33
     336:	88 f5       	brcc	.+98     	; 0x39a <twi_readFrom+0x66>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     338:	90 91 1a 02 	lds	r25, 0x021A
     33c:	99 23       	and	r25, r25
     33e:	e1 f7       	brne	.-8      	; 0x338 <twi_readFrom+0x4>
    continue;
  }
  twi_state = TWI_MRX;
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	90 93 1a 02 	sts	0x021A, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     346:	9f ef       	ldi	r25, 0xFF	; 255
     348:	90 93 19 02 	sts	0x0219, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     34c:	10 92 f7 01 	sts	0x01F7, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     350:	94 2f       	mov	r25, r20
     352:	91 50       	subi	r25, 0x01	; 1
     354:	90 93 f8 01 	sts	0x01F8, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
     358:	88 0f       	add	r24, r24
     35a:	81 60       	ori	r24, 0x01	; 1
     35c:	80 93 f6 01 	sts	0x01F6, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     360:	85 ee       	ldi	r24, 0xE5	; 229
     362:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     366:	80 91 1a 02 	lds	r24, 0x021A
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	e1 f3       	breq	.-8      	; 0x366 <twi_readFrom+0x32>
    continue;
  }

  if (twi_masterBufferIndex < length)
     36e:	80 91 f7 01 	lds	r24, 0x01F7
     372:	84 17       	cp	r24, r20
     374:	10 f4       	brcc	.+4      	; 0x37a <twi_readFrom+0x46>
    length = twi_masterBufferIndex;
     376:	40 91 f7 01 	lds	r20, 0x01F7
     37a:	e9 ef       	ldi	r30, 0xF9	; 249
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	26 2f       	mov	r18, r22
     380:	37 2f       	mov	r19, r23
     382:	d9 01       	movw	r26, r18
 * Input    address: 7bit i2c device address
 *          data: pointer to byte array
 *          length: number of bytes to read into array
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
     384:	24 2f       	mov	r18, r20
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	2e 0f       	add	r18, r30
     38a:	3f 1f       	adc	r19, r31

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     38c:	02 c0       	rjmp	.+4      	; 0x392 <twi_readFrom+0x5e>
    data[i] = twi_masterBuffer[i];
     38e:	81 91       	ld	r24, Z+
     390:	8d 93       	st	X+, r24

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     392:	e2 17       	cp	r30, r18
     394:	f3 07       	cpc	r31, r19
     396:	d9 f7       	brne	.-10     	; 0x38e <twi_readFrom+0x5a>
     398:	01 c0       	rjmp	.+2      	; 0x39c <twi_readFrom+0x68>
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 0;
     39a:	40 e0       	ldi	r20, 0x00	; 0
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     39c:	84 2f       	mov	r24, r20
     39e:	08 95       	ret

000003a0 <twi_writeTo>:
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     3a0:	41 32       	cpi	r20, 0x21	; 33
     3a2:	b0 f5       	brcc	.+108    	; 0x410 <twi_writeTo+0x70>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     3a4:	90 91 1a 02 	lds	r25, 0x021A
     3a8:	99 23       	and	r25, r25
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <twi_writeTo+0x4>
    continue;
  }
  twi_state = TWI_MTX;
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	90 93 1a 02 	sts	0x021A, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     3b2:	9f ef       	ldi	r25, 0xFF	; 255
     3b4:	90 93 19 02 	sts	0x0219, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     3b8:	10 92 f7 01 	sts	0x01F7, r1
  twi_masterBufferLength = length;
     3bc:	40 93 f8 01 	sts	0x01F8, r20
     3c0:	db 01       	movw	r26, r22
     3c2:	e9 ef       	ldi	r30, 0xF9	; 249
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
 *          1 .. length to long for buffer
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	4e 0f       	add	r20, r30
     3ca:	5f 1f       	adc	r21, r31
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <twi_writeTo+0x32>
    twi_masterBuffer[i] = data[i];
     3ce:	9d 91       	ld	r25, X+
     3d0:	91 93       	st	Z+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     3d2:	e4 17       	cp	r30, r20
     3d4:	f5 07       	cpc	r31, r21
     3d6:	d9 f7       	brne	.-10     	; 0x3ce <twi_writeTo+0x2e>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	80 93 f6 01 	sts	0x01F6, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     3e2:	85 ee       	ldi	r24, 0xE5	; 229
     3e4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     3e8:	22 23       	and	r18, r18
     3ea:	21 f0       	breq	.+8      	; 0x3f4 <twi_writeTo+0x54>
     3ec:	80 91 1a 02 	lds	r24, 0x021A
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	e1 f3       	breq	.-8      	; 0x3ec <twi_writeTo+0x4c>
    continue;
  }
  
  if (twi_error == 0xFF)
     3f4:	80 91 19 02 	lds	r24, 0x0219
     3f8:	8f 3f       	cpi	r24, 0xFF	; 255
     3fa:	61 f0       	breq	.+24     	; 0x414 <twi_writeTo+0x74>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     3fc:	80 91 19 02 	lds	r24, 0x0219
     400:	80 32       	cpi	r24, 0x20	; 32
     402:	51 f0       	breq	.+20     	; 0x418 <twi_writeTo+0x78>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     404:	80 91 19 02 	lds	r24, 0x0219
     408:	80 33       	cpi	r24, 0x30	; 48
     40a:	41 f4       	brne	.+16     	; 0x41c <twi_writeTo+0x7c>
    return 3;	// error: data send, nack received
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	08 95       	ret
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	08 95       	ret
  else if (twi_error == TW_MT_SLA_NACK)
    return 2;	// error: address send, nack received
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	08 95       	ret
  else if (twi_error == TW_MT_DATA_NACK)
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
     41c:	84 e0       	ldi	r24, 0x04	; 4
}
     41e:	08 95       	ret

00000420 <twi_transmit>:
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     420:	61 32       	cpi	r22, 0x21	; 33
     422:	a0 f4       	brcc	.+40     	; 0x44c <twi_transmit+0x2c>
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     424:	20 91 1a 02 	lds	r18, 0x021A
     428:	24 30       	cpi	r18, 0x04	; 4
     42a:	91 f4       	brne	.+36     	; 0x450 <twi_transmit+0x30>
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     42c:	60 93 3f 02 	sts	0x023F, r22
     430:	dc 01       	movw	r26, r24
     432:	e2 e4       	ldi	r30, 0x42	; 66
     434:	f2 e0       	ldi	r31, 0x02	; 2
 *          length: number of bytes in array
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	6e 0f       	add	r22, r30
     43a:	7f 1f       	adc	r23, r31
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     43c:	02 c0       	rjmp	.+4      	; 0x442 <twi_transmit+0x22>
    twi_txBuffer[i] = data[i];
     43e:	8d 91       	ld	r24, X+
     440:	81 93       	st	Z+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     442:	e6 17       	cp	r30, r22
     444:	f7 07       	cpc	r31, r23
     446:	d9 f7       	brne	.-10     	; 0x43e <twi_transmit+0x1e>
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	08 95       	ret
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
    return 1;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	08 95       	ret
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    return 2;
     450:	82 e0       	ldi	r24, 0x02	; 2
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     452:	08 95       	ret

00000454 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     454:	90 93 3d 02 	sts	0x023D, r25
     458:	80 93 3c 02 	sts	0x023C, r24
}
     45c:	08 95       	ret

0000045e <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     45e:	90 93 41 02 	sts	0x0241, r25
     462:	80 93 40 02 	sts	0x0240, r24
}
     466:	08 95       	ret

00000468 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     468:	88 23       	and	r24, r24
     46a:	11 f0       	breq	.+4      	; 0x470 <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     46c:	85 ec       	ldi	r24, 0xC5	; 197
     46e:	01 c0       	rjmp	.+2      	; 0x472 <twi_reply+0xa>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     470:	85 e8       	ldi	r24, 0x85	; 133
     472:	80 93 bc 00 	sts	0x00BC, r24
     476:	08 95       	ret

00000478 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     478:	85 ed       	ldi	r24, 0xD5	; 213
     47a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     47e:	80 91 bc 00 	lds	r24, 0x00BC
     482:	84 fd       	sbrc	r24, 4
     484:	fc cf       	rjmp	.-8      	; 0x47e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     486:	10 92 1a 02 	sts	0x021A, r1
}
     48a:	08 95       	ret

0000048c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     48c:	85 ec       	ldi	r24, 0xC5	; 197
     48e:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     492:	10 92 1a 02 	sts	0x021A, r1
}
     496:	08 95       	ret

00000498 <__vector_24>:

SIGNAL(TWI_vect)
{
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	2f 93       	push	r18
     4a4:	3f 93       	push	r19
     4a6:	4f 93       	push	r20
     4a8:	5f 93       	push	r21
     4aa:	6f 93       	push	r22
     4ac:	7f 93       	push	r23
     4ae:	8f 93       	push	r24
     4b0:	9f 93       	push	r25
     4b2:	af 93       	push	r26
     4b4:	bf 93       	push	r27
     4b6:	ef 93       	push	r30
     4b8:	ff 93       	push	r31
  switch(TW_STATUS){
     4ba:	80 91 b9 00 	lds	r24, 0x00B9
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	88 7f       	andi	r24, 0xF8	; 248
     4c2:	90 70       	andi	r25, 0x00	; 0
     4c4:	80 36       	cpi	r24, 0x60	; 96
     4c6:	91 05       	cpc	r25, r1
     4c8:	09 f4       	brne	.+2      	; 0x4cc <__vector_24+0x34>
     4ca:	c2 c0       	rjmp	.+388    	; 0x650 <__vector_24+0x1b8>
     4cc:	81 36       	cpi	r24, 0x61	; 97
     4ce:	91 05       	cpc	r25, r1
     4d0:	e4 f5       	brge	.+120    	; 0x54a <__vector_24+0xb2>
     4d2:	88 32       	cpi	r24, 0x28	; 40
     4d4:	91 05       	cpc	r25, r1
     4d6:	09 f4       	brne	.+2      	; 0x4da <__vector_24+0x42>
     4d8:	7e c0       	rjmp	.+252    	; 0x5d6 <__vector_24+0x13e>
     4da:	89 32       	cpi	r24, 0x29	; 41
     4dc:	91 05       	cpc	r25, r1
     4de:	c4 f4       	brge	.+48     	; 0x510 <__vector_24+0x78>
     4e0:	80 31       	cpi	r24, 0x10	; 16
     4e2:	91 05       	cpc	r25, r1
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <__vector_24+0x50>
     4e6:	72 c0       	rjmp	.+228    	; 0x5cc <__vector_24+0x134>
     4e8:	81 31       	cpi	r24, 0x11	; 17
     4ea:	91 05       	cpc	r25, r1
     4ec:	44 f4       	brge	.+16     	; 0x4fe <__vector_24+0x66>
     4ee:	00 97       	sbiw	r24, 0x00	; 0
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <__vector_24+0x5c>
     4f2:	13 c1       	rjmp	.+550    	; 0x71a <__vector_24+0x282>
     4f4:	88 30       	cpi	r24, 0x08	; 8
     4f6:	91 05       	cpc	r25, r1
     4f8:	09 f0       	breq	.+2      	; 0x4fc <__vector_24+0x64>
     4fa:	13 c1       	rjmp	.+550    	; 0x722 <__vector_24+0x28a>
     4fc:	67 c0       	rjmp	.+206    	; 0x5cc <__vector_24+0x134>
     4fe:	88 31       	cpi	r24, 0x18	; 24
     500:	91 05       	cpc	r25, r1
     502:	09 f4       	brne	.+2      	; 0x506 <__vector_24+0x6e>
     504:	68 c0       	rjmp	.+208    	; 0x5d6 <__vector_24+0x13e>
     506:	80 32       	cpi	r24, 0x20	; 32
     508:	91 05       	cpc	r25, r1
     50a:	09 f0       	breq	.+2      	; 0x50e <__vector_24+0x76>
     50c:	0a c1       	rjmp	.+532    	; 0x722 <__vector_24+0x28a>
     50e:	78 c0       	rjmp	.+240    	; 0x600 <__vector_24+0x168>
     510:	80 34       	cpi	r24, 0x40	; 64
     512:	91 05       	cpc	r25, r1
     514:	09 f4       	brne	.+2      	; 0x518 <__vector_24+0x80>
     516:	8a c0       	rjmp	.+276    	; 0x62c <__vector_24+0x194>
     518:	81 34       	cpi	r24, 0x41	; 65
     51a:	91 05       	cpc	r25, r1
     51c:	4c f4       	brge	.+18     	; 0x530 <__vector_24+0x98>
     51e:	80 33       	cpi	r24, 0x30	; 48
     520:	91 05       	cpc	r25, r1
     522:	09 f4       	brne	.+2      	; 0x526 <__vector_24+0x8e>
     524:	6f c0       	rjmp	.+222    	; 0x604 <__vector_24+0x16c>
     526:	88 33       	cpi	r24, 0x38	; 56
     528:	91 05       	cpc	r25, r1
     52a:	09 f0       	breq	.+2      	; 0x52e <__vector_24+0x96>
     52c:	fa c0       	rjmp	.+500    	; 0x722 <__vector_24+0x28a>
     52e:	6e c0       	rjmp	.+220    	; 0x60c <__vector_24+0x174>
     530:	80 35       	cpi	r24, 0x50	; 80
     532:	91 05       	cpc	r25, r1
     534:	09 f4       	brne	.+2      	; 0x538 <__vector_24+0xa0>
     536:	6e c0       	rjmp	.+220    	; 0x614 <__vector_24+0x17c>
     538:	88 35       	cpi	r24, 0x58	; 88
     53a:	91 05       	cpc	r25, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <__vector_24+0xa8>
     53e:	7b c0       	rjmp	.+246    	; 0x636 <__vector_24+0x19e>
     540:	88 34       	cpi	r24, 0x48	; 72
     542:	91 05       	cpc	r25, r1
     544:	09 f0       	breq	.+2      	; 0x548 <__vector_24+0xb0>
     546:	ed c0       	rjmp	.+474    	; 0x722 <__vector_24+0x28a>
     548:	ea c0       	rjmp	.+468    	; 0x71e <__vector_24+0x286>
     54a:	88 39       	cpi	r24, 0x98	; 152
     54c:	91 05       	cpc	r25, r1
     54e:	09 f4       	brne	.+2      	; 0x552 <__vector_24+0xba>
     550:	da c0       	rjmp	.+436    	; 0x706 <__vector_24+0x26e>
     552:	89 39       	cpi	r24, 0x99	; 153
     554:	91 05       	cpc	r25, r1
     556:	ec f4       	brge	.+58     	; 0x592 <__vector_24+0xfa>
     558:	88 37       	cpi	r24, 0x78	; 120
     55a:	91 05       	cpc	r25, r1
     55c:	09 f4       	brne	.+2      	; 0x560 <__vector_24+0xc8>
     55e:	78 c0       	rjmp	.+240    	; 0x650 <__vector_24+0x1b8>
     560:	89 37       	cpi	r24, 0x79	; 121
     562:	91 05       	cpc	r25, r1
     564:	4c f4       	brge	.+18     	; 0x578 <__vector_24+0xe0>
     566:	88 36       	cpi	r24, 0x68	; 104
     568:	91 05       	cpc	r25, r1
     56a:	09 f4       	brne	.+2      	; 0x56e <__vector_24+0xd6>
     56c:	71 c0       	rjmp	.+226    	; 0x650 <__vector_24+0x1b8>
     56e:	80 37       	cpi	r24, 0x70	; 112
     570:	91 05       	cpc	r25, r1
     572:	09 f0       	breq	.+2      	; 0x576 <__vector_24+0xde>
     574:	d6 c0       	rjmp	.+428    	; 0x722 <__vector_24+0x28a>
     576:	6c c0       	rjmp	.+216    	; 0x650 <__vector_24+0x1b8>
     578:	88 38       	cpi	r24, 0x88	; 136
     57a:	91 05       	cpc	r25, r1
     57c:	09 f4       	brne	.+2      	; 0x580 <__vector_24+0xe8>
     57e:	c3 c0       	rjmp	.+390    	; 0x706 <__vector_24+0x26e>
     580:	80 39       	cpi	r24, 0x90	; 144
     582:	91 05       	cpc	r25, r1
     584:	09 f4       	brne	.+2      	; 0x588 <__vector_24+0xf0>
     586:	6a c0       	rjmp	.+212    	; 0x65c <__vector_24+0x1c4>
     588:	80 38       	cpi	r24, 0x80	; 128
     58a:	91 05       	cpc	r25, r1
     58c:	09 f0       	breq	.+2      	; 0x590 <__vector_24+0xf8>
     58e:	c9 c0       	rjmp	.+402    	; 0x722 <__vector_24+0x28a>
     590:	65 c0       	rjmp	.+202    	; 0x65c <__vector_24+0x1c4>
     592:	80 3b       	cpi	r24, 0xB0	; 176
     594:	91 05       	cpc	r25, r1
     596:	09 f4       	brne	.+2      	; 0x59a <__vector_24+0x102>
     598:	8e c0       	rjmp	.+284    	; 0x6b6 <__vector_24+0x21e>
     59a:	81 3b       	cpi	r24, 0xB1	; 177
     59c:	91 05       	cpc	r25, r1
     59e:	4c f4       	brge	.+18     	; 0x5b2 <__vector_24+0x11a>
     5a0:	80 3a       	cpi	r24, 0xA0	; 160
     5a2:	91 05       	cpc	r25, r1
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <__vector_24+0x110>
     5a6:	6c c0       	rjmp	.+216    	; 0x680 <__vector_24+0x1e8>
     5a8:	88 3a       	cpi	r24, 0xA8	; 168
     5aa:	91 05       	cpc	r25, r1
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <__vector_24+0x118>
     5ae:	b9 c0       	rjmp	.+370    	; 0x722 <__vector_24+0x28a>
     5b0:	82 c0       	rjmp	.+260    	; 0x6b6 <__vector_24+0x21e>
     5b2:	80 3c       	cpi	r24, 0xC0	; 192
     5b4:	91 05       	cpc	r25, r1
     5b6:	09 f4       	brne	.+2      	; 0x5ba <__vector_24+0x122>
     5b8:	aa c0       	rjmp	.+340    	; 0x70e <__vector_24+0x276>
     5ba:	88 3c       	cpi	r24, 0xC8	; 200
     5bc:	91 05       	cpc	r25, r1
     5be:	09 f4       	brne	.+2      	; 0x5c2 <__vector_24+0x12a>
     5c0:	a6 c0       	rjmp	.+332    	; 0x70e <__vector_24+0x276>
     5c2:	88 3b       	cpi	r24, 0xB8	; 184
     5c4:	91 05       	cpc	r25, r1
     5c6:	09 f0       	breq	.+2      	; 0x5ca <__vector_24+0x132>
     5c8:	ac c0       	rjmp	.+344    	; 0x722 <__vector_24+0x28a>
     5ca:	8a c0       	rjmp	.+276    	; 0x6e0 <__vector_24+0x248>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     5cc:	80 91 f6 01 	lds	r24, 0x01F6
     5d0:	80 93 bb 00 	sts	0x00BB, r24
     5d4:	13 c0       	rjmp	.+38     	; 0x5fc <__vector_24+0x164>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     5d6:	90 91 f7 01 	lds	r25, 0x01F7
     5da:	80 91 f8 01 	lds	r24, 0x01F8
     5de:	98 17       	cp	r25, r24
     5e0:	08 f0       	brcs	.+2      	; 0x5e4 <__vector_24+0x14c>
     5e2:	9d c0       	rjmp	.+314    	; 0x71e <__vector_24+0x286>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     5e4:	80 91 f7 01 	lds	r24, 0x01F7
     5e8:	e8 2f       	mov	r30, r24
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	e7 50       	subi	r30, 0x07	; 7
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	90 81       	ld	r25, Z
     5f2:	90 93 bb 00 	sts	0x00BB, r25
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	80 93 f7 01 	sts	0x01F7, r24
        twi_reply(1);
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	84 c0       	rjmp	.+264    	; 0x708 <__vector_24+0x270>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     600:	80 e2       	ldi	r24, 0x20	; 32
     602:	01 c0       	rjmp	.+2      	; 0x606 <__vector_24+0x16e>
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     604:	80 e3       	ldi	r24, 0x30	; 48
     606:	80 93 19 02 	sts	0x0219, r24
     60a:	89 c0       	rjmp	.+274    	; 0x71e <__vector_24+0x286>
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     60c:	88 e3       	ldi	r24, 0x38	; 56
     60e:	80 93 19 02 	sts	0x0219, r24
     612:	4e c0       	rjmp	.+156    	; 0x6b0 <__vector_24+0x218>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     614:	80 91 f7 01 	lds	r24, 0x01F7
     618:	90 91 bb 00 	lds	r25, 0x00BB
     61c:	e8 2f       	mov	r30, r24
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	e7 50       	subi	r30, 0x07	; 7
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	90 83       	st	Z, r25
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	80 93 f7 01 	sts	0x01F7, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     62c:	90 91 f7 01 	lds	r25, 0x01F7
     630:	80 91 f8 01 	lds	r24, 0x01F8
     634:	65 c0       	rjmp	.+202    	; 0x700 <__vector_24+0x268>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     636:	80 91 f7 01 	lds	r24, 0x01F7
     63a:	90 91 bb 00 	lds	r25, 0x00BB
     63e:	e8 2f       	mov	r30, r24
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	e7 50       	subi	r30, 0x07	; 7
     644:	fe 4f       	sbci	r31, 0xFE	; 254
     646:	90 83       	st	Z, r25
     648:	8f 5f       	subi	r24, 0xFF	; 255
     64a:	80 93 f7 01 	sts	0x01F7, r24
     64e:	67 c0       	rjmp	.+206    	; 0x71e <__vector_24+0x286>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	80 93 1a 02 	sts	0x021A, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     656:	10 92 1b 02 	sts	0x021B, r1
     65a:	d0 cf       	rjmp	.-96     	; 0x5fc <__vector_24+0x164>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     65c:	80 91 1b 02 	lds	r24, 0x021B
     660:	80 32       	cpi	r24, 0x20	; 32
     662:	08 f0       	brcs	.+2      	; 0x666 <__vector_24+0x1ce>
     664:	50 c0       	rjmp	.+160    	; 0x706 <__vector_24+0x26e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     666:	80 91 1b 02 	lds	r24, 0x021B
     66a:	90 91 bb 00 	lds	r25, 0x00BB
     66e:	e8 2f       	mov	r30, r24
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	e4 5e       	subi	r30, 0xE4	; 228
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	90 83       	st	Z, r25
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 1b 02 	sts	0x021B, r24
     67e:	be cf       	rjmp	.-132    	; 0x5fc <__vector_24+0x164>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     680:	80 91 1b 02 	lds	r24, 0x021B
     684:	80 32       	cpi	r24, 0x20	; 32
     686:	30 f4       	brcc	.+12     	; 0x694 <__vector_24+0x1fc>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     688:	e0 91 1b 02 	lds	r30, 0x021B
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	e4 5e       	subi	r30, 0xE4	; 228
     690:	fd 4f       	sbci	r31, 0xFD	; 253
     692:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
     694:	0e 94 3c 02 	call	0x478	; 0x478 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     698:	60 91 1b 02 	lds	r22, 0x021B
     69c:	e0 91 3c 02 	lds	r30, 0x023C
     6a0:	f0 91 3d 02 	lds	r31, 0x023D
     6a4:	8c e1       	ldi	r24, 0x1C	; 28
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     6ac:	10 92 1b 02 	sts	0x021B, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     6b0:	0e 94 46 02 	call	0x48c	; 0x48c <twi_releaseBus>
      break;
     6b4:	36 c0       	rjmp	.+108    	; 0x722 <__vector_24+0x28a>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	80 93 1a 02 	sts	0x021A, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     6bc:	10 92 3e 02 	sts	0x023E, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     6c0:	10 92 3f 02 	sts	0x023F, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     6c4:	e0 91 40 02 	lds	r30, 0x0240
     6c8:	f0 91 41 02 	lds	r31, 0x0241
     6cc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     6ce:	80 91 3f 02 	lds	r24, 0x023F
     6d2:	88 23       	and	r24, r24
     6d4:	29 f4       	brne	.+10     	; 0x6e0 <__vector_24+0x248>
        twi_txBufferLength = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 3f 02 	sts	0x023F, r24
        twi_txBuffer[0] = 0x00;
     6dc:	10 92 42 02 	sts	0x0242, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     6e0:	80 91 3e 02 	lds	r24, 0x023E
     6e4:	e8 2f       	mov	r30, r24
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	ee 5b       	subi	r30, 0xBE	; 190
     6ea:	fd 4f       	sbci	r31, 0xFD	; 253
     6ec:	90 81       	ld	r25, Z
     6ee:	90 93 bb 00 	sts	0x00BB, r25
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	80 93 3e 02 	sts	0x023E, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     6f8:	90 91 3e 02 	lds	r25, 0x023E
     6fc:	80 91 3f 02 	lds	r24, 0x023F
     700:	98 17       	cp	r25, r24
     702:	08 f4       	brcc	.+2      	; 0x706 <__vector_24+0x26e>
     704:	7b cf       	rjmp	.-266    	; 0x5fc <__vector_24+0x164>
        twi_reply(1);
      }else{
        twi_reply(0);
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 34 02 	call	0x468	; 0x468 <twi_reply>
     70c:	0a c0       	rjmp	.+20     	; 0x722 <__vector_24+0x28a>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 34 02 	call	0x468	; 0x468 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
     714:	10 92 1a 02 	sts	0x021A, r1
      break;
     718:	04 c0       	rjmp	.+8      	; 0x722 <__vector_24+0x28a>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     71a:	10 92 19 02 	sts	0x0219, r1
      twi_stop();
     71e:	0e 94 3c 02 	call	0x478	; 0x478 <twi_stop>
      break;
  }
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     744:	20 91 83 02 	lds	r18, 0x0283
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	80 91 82 02 	lds	r24, 0x0282
     74e:	28 1b       	sub	r18, r24
     750:	31 09       	sbc	r19, r1
}
     752:	c9 01       	movw	r24, r18
     754:	08 95       	ret

00000756 <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     756:	80 91 82 02 	lds	r24, 0x0282
     75a:	90 91 83 02 	lds	r25, 0x0283
     75e:	89 17       	cp	r24, r25
     760:	50 f4       	brcc	.+20     	; 0x776 <_ZN7TwoWire4readEv+0x20>
    value = rxBuffer[rxBufferIndex];
     762:	e8 2f       	mov	r30, r24
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ee 59       	subi	r30, 0x9E	; 158
     768:	fd 4f       	sbci	r31, 0xFD	; 253
     76a:	20 81       	ld	r18, Z
     76c:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	80 93 82 02 	sts	0x0282, r24
     774:	02 c0       	rjmp	.+4      	; 0x77a <_ZN7TwoWire4readEv+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
     77a:	c9 01       	movw	r24, r18
     77c:	08 95       	ret

0000077e <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
     77e:	e0 91 82 02 	lds	r30, 0x0282
     782:	80 91 83 02 	lds	r24, 0x0283
     786:	e8 17       	cp	r30, r24
     788:	30 f4       	brcc	.+12     	; 0x796 <_ZN7TwoWire4peekEv+0x18>
    value = rxBuffer[rxBufferIndex];
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	ee 59       	subi	r30, 0x9E	; 158
     78e:	fd 4f       	sbci	r31, 0xFD	; 253
     790:	20 81       	ld	r18, Z
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <_ZN7TwoWire4peekEv+0x1c>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     796:	2f ef       	ldi	r18, 0xFF	; 255
     798:	3f ef       	ldi	r19, 0xFF	; 255
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     79a:	c9 01       	movw	r24, r18
     79c:	08 95       	ret

0000079e <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     79e:	08 95       	ret

000007a0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	6c 01       	movw	r12, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	ea 01       	movw	r28, r20
  if(transmitting){
     7b6:	20 91 a7 02 	lds	r18, 0x02A7
     7ba:	22 23       	and	r18, r18
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <_ZN7TwoWire5writeEPKhj+0x4a>
     7be:	e6 2e       	mov	r14, r22
     7c0:	f9 2e       	mov	r15, r25
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	0d c0       	rjmp	.+26     	; 0x7e2 <_ZN7TwoWire5writeEPKhj+0x42>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
     7c8:	d7 01       	movw	r26, r14
     7ca:	6d 91       	ld	r22, X+
     7cc:	7d 01       	movw	r14, r26
     7ce:	d6 01       	movw	r26, r12
     7d0:	ed 91       	ld	r30, X+
     7d2:	fc 91       	ld	r31, X
     7d4:	01 90       	ld	r0, Z+
     7d6:	f0 81       	ld	r31, Z
     7d8:	e0 2d       	mov	r30, r0
     7da:	c6 01       	movw	r24, r12
     7dc:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     7de:	0f 5f       	subi	r16, 0xFF	; 255
     7e0:	1f 4f       	sbci	r17, 0xFF	; 255
     7e2:	0c 17       	cp	r16, r28
     7e4:	1d 07       	cpc	r17, r29
     7e6:	80 f3       	brcs	.-32     	; 0x7c8 <_ZN7TwoWire5writeEPKhj+0x28>
     7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <_ZN7TwoWire5writeEPKhj+0x50>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     7ea:	64 2f       	mov	r22, r20
     7ec:	0e 94 10 02 	call	0x420	; 0x420 <twi_transmit>
  }
  return quantity;
}
     7f0:	ce 01       	movw	r24, r28
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     804:	df 93       	push	r29
     806:	cf 93       	push	r28
     808:	0f 92       	push	r0
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
     810:	20 91 a7 02 	lds	r18, 0x02A7
     814:	22 23       	and	r18, r18
     816:	d1 f0       	breq	.+52     	; 0x84c <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     818:	20 91 a6 02 	lds	r18, 0x02A6
     81c:	20 32       	cpi	r18, 0x20	; 32
     81e:	40 f0       	brcs	.+16     	; 0x830 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	fc 01       	movw	r30, r24
     826:	33 83       	std	Z+3, r19	; 0x03
     828:	22 83       	std	Z+2, r18	; 0x02
      setWriteError();
      return 0;
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	15 c0       	rjmp	.+42     	; 0x85a <_ZN7TwoWire5writeEh+0x56>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     830:	80 91 a5 02 	lds	r24, 0x02A5
     834:	e8 2f       	mov	r30, r24
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	eb 57       	subi	r30, 0x7B	; 123
     83a:	fd 4f       	sbci	r31, 0xFD	; 253
     83c:	99 81       	ldd	r25, Y+1	; 0x01
     83e:	90 83       	st	Z, r25
    ++txBufferIndex;
     840:	8f 5f       	subi	r24, 0xFF	; 255
     842:	80 93 a5 02 	sts	0x02A5, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     846:	80 93 a6 02 	sts	0x02A6, r24
     84a:	05 c0       	rjmp	.+10     	; 0x856 <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	0e 94 10 02 	call	0x420	; 0x420 <twi_transmit>
  }
  return 1;
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	30 e0       	ldi	r19, 0x00	; 0
}
     85a:	c9 01       	movw	r24, r18
     85c:	0f 90       	pop	r0
     85e:	cf 91       	pop	r28
     860:	df 91       	pop	r29
     862:	08 95       	ret

00000864 <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     864:	10 92 82 02 	sts	0x0282, r1
  rxBufferLength = 0;
     868:	10 92 83 02 	sts	0x0283, r1

  txBufferIndex = 0;
     86c:	10 92 a5 02 	sts	0x02A5, r1
  txBufferLength = 0;
     870:	10 92 a6 02 	sts	0x02A6, r1

  twi_init();
     874:	0e 94 7d 01 	call	0x2fa	; 0x2fa <twi_init>
}
     878:	08 95       	ret

0000087a <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
     87a:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
     87c:	41 32       	cpi	r20, 0x21	; 33
     87e:	08 f0       	brcs	.+2      	; 0x882 <_ZN7TwoWire11requestFromEhh+0x8>
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	62 e6       	ldi	r22, 0x62	; 98
     884:	72 e0       	ldi	r23, 0x02	; 2
     886:	0e 94 9a 01 	call	0x334	; 0x334 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     88a:	10 92 82 02 	sts	0x0282, r1
  rxBufferLength = read;
     88e:	80 93 83 02 	sts	0x0283, r24

  return read;
}
     892:	08 95       	ret

00000894 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
     894:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN7TwoWire11requestFromEhh>
}
     898:	08 95       	ret

0000089a <_ZN7TwoWire17beginTransmissionEh>:

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 a7 02 	sts	0x02A7, r24
  // set address of targeted slave
  txAddress = address;
     8a0:	60 93 84 02 	sts	0x0284, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     8a4:	10 92 a5 02 	sts	0x02A5, r1
  txBufferLength = 0;
     8a8:	10 92 a6 02 	sts	0x02A6, r1
}
     8ac:	08 95       	ret

000008ae <_ZN7TwoWire17beginTransmissionEi>:

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
     8ae:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN7TwoWire17beginTransmissionEh>
}
     8b2:	08 95       	ret

000008b4 <_ZN7TwoWire15endTransmissionEv>:

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
     8b4:	80 91 84 02 	lds	r24, 0x0284
     8b8:	65 e8       	ldi	r22, 0x85	; 133
     8ba:	72 e0       	ldi	r23, 0x02	; 2
     8bc:	40 91 a6 02 	lds	r20, 0x02A6
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     8c6:	10 92 a5 02 	sts	0x02A5, r1
  txBufferLength = 0;
     8ca:	10 92 a6 02 	sts	0x02A6, r1
  // indicate that we are done transmitting
  transmitting = 0;
     8ce:	10 92 a7 02 	sts	0x02A7, r1
  return ret;
}
     8d2:	08 95       	ret

000008d4 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
  public:
    Print() : write_error(0) {}
     8d4:	10 92 ab 02 	sts	0x02AB, r1
     8d8:	10 92 aa 02 	sts	0x02AA, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     8dc:	88 ee       	ldi	r24, 0xE8	; 232
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	80 93 ac 02 	sts	0x02AC, r24
     8e8:	90 93 ad 02 	sts	0x02AD, r25
     8ec:	a0 93 ae 02 	sts	0x02AE, r26
     8f0:	b0 93 af 02 	sts	0x02AF, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     8f4:	8a ed       	ldi	r24, 0xDA	; 218
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	90 93 a9 02 	sts	0x02A9, r25
     8fc:	80 93 a8 02 	sts	0x02A8, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     900:	08 95       	ret

00000902 <setup>:



//The setup function is called once at startup of the sketch
void setup()
{
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	df 93       	push	r29
     90e:	cf 93       	push	r28
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	27 97       	sbiw	r28, 0x07	; 7
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
	  Serial.begin(57600);
     920:	8c e7       	ldi	r24, 0x7C	; 124
     922:	94 e0       	ldi	r25, 0x04	; 4
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	51 ee       	ldi	r21, 0xE1	; 225
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <_ZN14HardwareSerial5beginEm>
	  pinMode(dimPin, INPUT);
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 b1 1b 	call	0x3762	; 0x3762 <pinMode>
	  Board1.writeRow("BUG", 0, 'g','e');
     938:	7e 01       	movw	r14, r28
     93a:	08 94       	sec
     93c:	e1 1c       	adc	r14, r1
     93e:	f1 1c       	adc	r15, r1
     940:	c7 01       	movw	r24, r14
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
     94a:	80 e4       	ldi	r24, 0x40	; 64
     94c:	c8 2e       	mov	r12, r24
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	d8 2e       	mov	r13, r24
     952:	c6 01       	movw	r24, r12
     954:	b7 01       	movw	r22, r14
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	27 e6       	ldi	r18, 0x67	; 103
     95a:	05 e6       	ldi	r16, 0x65	; 101
     95c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7ht1632c8writeRowE6Stringhcc>
     960:	c7 01       	movw	r24, r14
     962:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	  delay(1500);
     966:	6c ed       	ldi	r22, 0xDC	; 220
     968:	75 e0       	ldi	r23, 0x05	; 5
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <delay>
	  Board1.resetBoard();
     972:	c6 01       	movw	r24, r12
     974:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_ZN7ht1632c10resetBoardEv>
}
     978:	27 96       	adiw	r28, 0x07	; 7
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	08 95       	ret

00000994 <_Z10UpdateTimev>:


/******************************************************************
 *	Update Time and date on Display (if it turned on)
 */
void UpdateTime(){
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	2e 97       	sbiw	r28, 0x0e	; 14
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
  if (!DimDisplay){
     9b0:	80 91 f2 03 	lds	r24, 0x03F2
     9b4:	88 23       	and	r24, r24
     9b6:	09 f0       	breq	.+2      	; 0x9ba <_Z10UpdateTimev+0x26>
     9b8:	91 c0       	rjmp	.+290    	; 0xadc <_Z10UpdateTimev+0x148>
    if (RTC.timeChanged()) {
     9ba:	8c ec       	ldi	r24, 0xCC	; 204
     9bc:	93 e0       	ldi	r25, 0x03	; 3
     9be:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZN6RTClib11timeChangedEv>
     9c2:	88 23       	and	r24, r24
     9c4:	51 f0       	breq	.+20     	; 0x9da <_Z10UpdateTimev+0x46>
      Board1.writeRow(RTC.getTime(), 0, 'g', 'e');
     9c6:	7e 01       	movw	r14, r28
     9c8:	08 94       	sec
     9ca:	e1 1c       	adc	r14, r1
     9cc:	f1 1c       	adc	r15, r1
     9ce:	c7 01       	movw	r24, r14
     9d0:	6c ec       	ldi	r22, 0xCC	; 204
     9d2:	73 e0       	ldi	r23, 0x03	; 3
     9d4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN6RTClib7getTimeEv>
     9d8:	41 c0       	rjmp	.+130    	; 0xa5c <_Z10UpdateTimev+0xc8>
      lastTimeCheck = millis();
    }
    else if (abs(millis() - lastTimeCheck) > 62000) {
     9da:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     9de:	7b 01       	movw	r14, r22
     9e0:	8c 01       	movw	r16, r24
     9e2:	80 91 e9 03 	lds	r24, 0x03E9
     9e6:	90 91 ea 03 	lds	r25, 0x03EA
     9ea:	a0 91 eb 03 	lds	r26, 0x03EB
     9ee:	b0 91 ec 03 	lds	r27, 0x03EC
     9f2:	e8 16       	cp	r14, r24
     9f4:	f9 06       	cpc	r15, r25
     9f6:	0a 07       	cpc	r16, r26
     9f8:	1b 07       	cpc	r17, r27
     9fa:	b9 f0       	breq	.+46     	; 0xa2a <_Z10UpdateTimev+0x96>
     9fc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     a00:	20 91 e9 03 	lds	r18, 0x03E9
     a04:	30 91 ea 03 	lds	r19, 0x03EA
     a08:	40 91 eb 03 	lds	r20, 0x03EB
     a0c:	50 91 ec 03 	lds	r21, 0x03EC
     a10:	62 1b       	sub	r22, r18
     a12:	73 0b       	sbc	r23, r19
     a14:	84 0b       	sbc	r24, r20
     a16:	95 0b       	sbc	r25, r21
     a18:	61 33       	cpi	r22, 0x31	; 49
     a1a:	22 ef       	ldi	r18, 0xF2	; 242
     a1c:	72 07       	cpc	r23, r18
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	82 07       	cpc	r24, r18
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	92 07       	cpc	r25, r18
     a26:	80 f4       	brcc	.+32     	; 0xa48 <_Z10UpdateTimev+0xb4>
     a28:	2e c0       	rjmp	.+92     	; 0xa86 <_Z10UpdateTimev+0xf2>
     a2a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     a2e:	e6 1a       	sub	r14, r22
     a30:	f7 0a       	sbc	r15, r23
     a32:	08 0b       	sbc	r16, r24
     a34:	19 0b       	sbc	r17, r25
     a36:	81 e3       	ldi	r24, 0x31	; 49
     a38:	e8 16       	cp	r14, r24
     a3a:	82 ef       	ldi	r24, 0xF2	; 242
     a3c:	f8 06       	cpc	r15, r24
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	08 07       	cpc	r16, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	18 07       	cpc	r17, r24
     a46:	f8 f0       	brcs	.+62     	; 0xa86 <_Z10UpdateTimev+0xf2>
      Board1.writeRow("??:??", 0, 'g', 'e');
     a48:	98 e0       	ldi	r25, 0x08	; 8
     a4a:	e9 2e       	mov	r14, r25
     a4c:	f1 2c       	mov	r15, r1
     a4e:	ec 0e       	add	r14, r28
     a50:	fd 1e       	adc	r15, r29
     a52:	c7 01       	movw	r24, r14
     a54:	64 e0       	ldi	r22, 0x04	; 4
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	93 e0       	ldi	r25, 0x03	; 3
     a60:	b7 01       	movw	r22, r14
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	27 e6       	ldi	r18, 0x67	; 103
     a66:	05 e6       	ldi	r16, 0x65	; 101
     a68:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7ht1632c8writeRowE6Stringhcc>
     a6c:	c7 01       	movw	r24, r14
     a6e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
      // Board1.writeRow("??/??", 1, 'g', 'e');
      lastTimeCheck = millis();
     a72:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     a76:	60 93 e9 03 	sts	0x03E9, r22
     a7a:	70 93 ea 03 	sts	0x03EA, r23
     a7e:	80 93 eb 03 	sts	0x03EB, r24
     a82:	90 93 ec 03 	sts	0x03EC, r25
    }
    // Creates 2 blinking Dots to show the activity of the clock
    if(millis() % 1000 > 500){
     a86:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     a8a:	28 ee       	ldi	r18, 0xE8	; 232
     a8c:	33 e0       	ldi	r19, 0x03	; 3
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__udivmodsi4>
     a96:	65 3f       	cpi	r22, 0xF5	; 245
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	72 07       	cpc	r23, r18
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	82 07       	cpc	r24, r18
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	92 07       	cpc	r25, r18
     aa4:	68 f0       	brcs	.+26     	; 0xac0 <_Z10UpdateTimev+0x12c>
      Board1.point(15, 3, 'g');
     aa6:	80 e4       	ldi	r24, 0x40	; 64
     aa8:	93 e0       	ldi	r25, 0x03	; 3
     aaa:	6f e0       	ldi	r22, 0x0F	; 15
     aac:	43 e0       	ldi	r20, 0x03	; 3
     aae:	27 e6       	ldi	r18, 0x67	; 103
     ab0:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN7ht1632c5pointEhhc>
      Board1.point(15, 5, 'g');
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	93 e0       	ldi	r25, 0x03	; 3
     ab8:	6f e0       	ldi	r22, 0x0F	; 15
     aba:	45 e0       	ldi	r20, 0x05	; 5
     abc:	27 e6       	ldi	r18, 0x67	; 103
     abe:	0c c0       	rjmp	.+24     	; 0xad8 <_Z10UpdateTimev+0x144>
    }
    else{
      Board1.point(15, 3, 'b');
     ac0:	80 e4       	ldi	r24, 0x40	; 64
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	6f e0       	ldi	r22, 0x0F	; 15
     ac6:	43 e0       	ldi	r20, 0x03	; 3
     ac8:	22 e6       	ldi	r18, 0x62	; 98
     aca:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN7ht1632c5pointEhhc>
      Board1.point(15, 5, 'b');
     ace:	80 e4       	ldi	r24, 0x40	; 64
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	6f e0       	ldi	r22, 0x0F	; 15
     ad4:	45 e0       	ldi	r20, 0x05	; 5
     ad6:	22 e6       	ldi	r18, 0x62	; 98
     ad8:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN7ht1632c5pointEhhc>
    }
  }
}
     adc:	2e 96       	adiw	r28, 0x0e	; 14
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	08 95       	ret

00000af6 <_Z11CheckDimPinv>:

/******************************************************************
 *	Check if dim button presed
 */
void CheckDimPin(){
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	df 93       	push	r29
     b00:	cf 93       	push	r28
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	2e 97       	sbiw	r28, 0x0e	; 14
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
  if (digitalRead(dimPin)){
     b12:	88 e0       	ldi	r24, 0x08	; 8
     b14:	0e 94 0d 1c 	call	0x381a	; 0x381a <digitalRead>
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	81 f1       	breq	.+96     	; 0xb7c <_Z11CheckDimPinv+0x86>
    delay(200); //debounce
     b1c:	68 ec       	ldi	r22, 0xC8	; 200
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <delay>

    Serial.println(DimDisplay,BIN);
     b28:	8c e7       	ldi	r24, 0x7C	; 124
     b2a:	94 e0       	ldi	r25, 0x04	; 4
     b2c:	60 91 f2 03 	lds	r22, 0x03F2
     b30:	42 e0       	ldi	r20, 0x02	; 2
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	0e 94 21 17 	call	0x2e42	; 0x2e42 <_ZN5Print7printlnEhi>

    //Turn Display On/Off
    if (DimDisplay){
     b38:	80 91 f2 03 	lds	r24, 0x03F2
     b3c:	88 23       	and	r24, r24
     b3e:	b9 f0       	breq	.+46     	; 0xb6e <_Z11CheckDimPinv+0x78>
      DimDisplay = false;
     b40:	10 92 f2 03 	sts	0x03F2, r1
      Board1.writeRow(RTC.getTime(), 0, 'g', 'e');
     b44:	7e 01       	movw	r14, r28
     b46:	08 94       	sec
     b48:	e1 1c       	adc	r14, r1
     b4a:	f1 1c       	adc	r15, r1
     b4c:	c7 01       	movw	r24, r14
     b4e:	6c ec       	ldi	r22, 0xCC	; 204
     b50:	73 e0       	ldi	r23, 0x03	; 3
     b52:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN6RTClib7getTimeEv>
     b56:	80 e4       	ldi	r24, 0x40	; 64
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	b7 01       	movw	r22, r14
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	27 e6       	ldi	r18, 0x67	; 103
     b60:	05 e6       	ldi	r16, 0x65	; 101
     b62:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7ht1632c8writeRowE6Stringhcc>
     b66:	c7 01       	movw	r24, r14
     b68:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <_Z11CheckDimPinv+0x7e>
    }
    else{

      DimDisplay = true;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	80 93 f2 03 	sts	0x03F2, r24
    }
    Board1.resetBoard();
     b74:	80 e4       	ldi	r24, 0x40	; 64
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_ZN7ht1632c10resetBoardEv>
  }

  //Turn on Display at specified time
  if (RTC.getTime() == "05:50" && DimDisplay == true) DimDisplay = false;
     b7c:	8e 01       	movw	r16, r28
     b7e:	08 5f       	subi	r16, 0xF8	; 248
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	c8 01       	movw	r24, r16
     b84:	6c ec       	ldi	r22, 0xCC	; 204
     b86:	73 e0       	ldi	r23, 0x03	; 3
     b88:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN6RTClib7getTimeEv>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     b8c:	c8 01       	movw	r24, r16
     b8e:	6a e0       	ldi	r22, 0x0A	; 10
     b90:	71 e0       	ldi	r23, 0x01	; 1
     b92:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_ZNK6String6equalsEPKc>
     b96:	88 23       	and	r24, r24
     b98:	29 f0       	breq	.+10     	; 0xba4 <_Z11CheckDimPinv+0xae>
}

/******************************************************************
 *	Check if dim button presed
 */
void CheckDimPin(){
     b9a:	01 e0       	ldi	r16, 0x01	; 1
     b9c:	80 91 f2 03 	lds	r24, 0x03F2
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	09 f0       	breq	.+2      	; 0xba6 <_Z11CheckDimPinv+0xb0>
    }
    Board1.resetBoard();
  }

  //Turn on Display at specified time
  if (RTC.getTime() == "05:50" && DimDisplay == true) DimDisplay = false;
     ba4:	00 e0       	ldi	r16, 0x00	; 0
     ba6:	ce 01       	movw	r24, r28
     ba8:	08 96       	adiw	r24, 0x08	; 8
     baa:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
     bae:	00 23       	and	r16, r16
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <_Z11CheckDimPinv+0xc0>
     bb2:	10 92 f2 03 	sts	0x03F2, r1

}
     bb6:	2e 96       	adiw	r28, 0x0e	; 14
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	08 95       	ret

00000bd0 <_Z9eqDisplayv>:
}

/******************************************************************
 *	Show equalizer on a board
 */
void eqDisplay(){
     bd0:	8f 92       	push	r8
     bd2:	9f 92       	push	r9
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
    if (difference > 0){
      for (byte z = 0; z <= difference; z++){
        Board1.point(pAmplitude + z, y + 9, EQ1.getColor(pAmplitude + z));
      }
    }
    else if (difference < 0){
     be6:	c6 eb       	ldi	r28, 0xB6	; 182
     be8:	d2 e0       	ldi	r29, 0x02	; 2
}

/******************************************************************
 *	Show equalizer on a board
 */
void eqDisplay(){
     bea:	29 e0       	ldi	r18, 0x09	; 9
     bec:	d2 2e       	mov	r13, r18
  public:
	  MSGEQ7(byte _resetPin, byte _strobePin ,byte _eqPin);
	  void resetEQ();
	  char getColor(short value);
	  short getpAmplitude(byte band)	{return freq[band].amplitude[1];}
	  short getDifference(byte band)	{return freq[band].difference;}
     bee:	ef 84       	ldd	r14, Y+15	; 0x0f
     bf0:	f8 88       	ldd	r15, Y+16	; 0x10
class MSGEQ7{
  public:
	  MSGEQ7(byte _resetPin, byte _strobePin ,byte _eqPin);
	  void resetEQ();
	  char getColor(short value);
	  short getpAmplitude(byte band)	{return freq[band].amplitude[1];}
     bf2:	a8 80       	ld	r10, Y
     bf4:	b9 80       	ldd	r11, Y+1	; 0x01
	  short getDifference(byte band)	{return freq[band].difference;}
	  short getPeak(byte band)			{return freq[band].peak;}
     bf6:	8c 84       	ldd	r8, Y+12	; 0x0c
     bf8:	9d 84       	ldd	r9, Y+13	; 0x0d
  for (byte y = 0; y < 7 ;y++){
    short difference = EQ1.getDifference(y); //Difference between current equalizer state an previous equalizer state
    short pAmplitude =  EQ1.getpAmplitude(y);
    short peak = EQ1.getPeak(y);

    if (peak < 31) Board1.point(peak + 1, y + 9, 'b');
     bfa:	8f e1       	ldi	r24, 0x1F	; 31
     bfc:	88 16       	cp	r8, r24
     bfe:	91 04       	cpc	r9, r1
     c00:	44 f4       	brge	.+16     	; 0xc12 <_Z9eqDisplayv+0x42>
     c02:	68 2d       	mov	r22, r8
     c04:	6f 5f       	subi	r22, 0xFF	; 255
     c06:	80 e4       	ldi	r24, 0x40	; 64
     c08:	93 e0       	ldi	r25, 0x03	; 3
     c0a:	4d 2d       	mov	r20, r13
     c0c:	22 e6       	ldi	r18, 0x62	; 98
     c0e:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN7ht1632c5pointEhhc>

    if (difference > 0){
     c12:	1e 14       	cp	r1, r14
     c14:	1f 04       	cpc	r1, r15
     c16:	c4 f4       	brge	.+48     	; 0xc48 <_Z9eqDisplayv+0x78>
     c18:	1a 2d       	mov	r17, r10
     c1a:	00 e0       	ldi	r16, 0x00	; 0
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <_Z9eqDisplayv+0x6c>
      for (byte z = 0; z <= difference; z++){
        Board1.point(pAmplitude + z, y + 9, EQ1.getColor(pAmplitude + z));
     c1e:	6a 0d       	add	r22, r10
     c20:	7b 1d       	adc	r23, r11
     c22:	84 eb       	ldi	r24, 0xB4	; 180
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN6MSGEQ78getColorEs>
     c2a:	28 2f       	mov	r18, r24
     c2c:	80 e4       	ldi	r24, 0x40	; 64
     c2e:	93 e0       	ldi	r25, 0x03	; 3
     c30:	61 2f       	mov	r22, r17
     c32:	4d 2d       	mov	r20, r13
     c34:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN7ht1632c5pointEhhc>
    short peak = EQ1.getPeak(y);

    if (peak < 31) Board1.point(peak + 1, y + 9, 'b');

    if (difference > 0){
      for (byte z = 0; z <= difference; z++){
     c38:	0f 5f       	subi	r16, 0xFF	; 255
     c3a:	1f 5f       	subi	r17, 0xFF	; 255
     c3c:	60 2f       	mov	r22, r16
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	e6 16       	cp	r14, r22
     c42:	f7 06       	cpc	r15, r23
     c44:	64 f7       	brge	.-40     	; 0xc1e <_Z9eqDisplayv+0x4e>
     c46:	12 c0       	rjmp	.+36     	; 0xc6c <_Z9eqDisplayv+0x9c>
        Board1.point(pAmplitude + z, y + 9, EQ1.getColor(pAmplitude + z));
      }
    }
    else if (difference < 0){
     c48:	e1 14       	cp	r14, r1
     c4a:	f1 04       	cpc	r15, r1
     c4c:	79 f0       	breq	.+30     	; 0xc6c <_Z9eqDisplayv+0x9c>
     c4e:	00 e0       	ldi	r16, 0x00	; 0
     c50:	10 e0       	ldi	r17, 0x00	; 0
      for (int z = 0; z > difference; z--){
        Board1.point(pAmplitude + z, y + 9, 'b');
     c52:	60 2f       	mov	r22, r16
     c54:	6a 0d       	add	r22, r10
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	4d 2d       	mov	r20, r13
     c5c:	22 e6       	ldi	r18, 0x62	; 98
     c5e:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN7ht1632c5pointEhhc>
      for (byte z = 0; z <= difference; z++){
        Board1.point(pAmplitude + z, y + 9, EQ1.getColor(pAmplitude + z));
      }
    }
    else if (difference < 0){
      for (int z = 0; z > difference; z--){
     c62:	01 50       	subi	r16, 0x01	; 1
     c64:	10 40       	sbci	r17, 0x00	; 0
     c66:	e0 16       	cp	r14, r16
     c68:	f1 06       	cpc	r15, r17
     c6a:	9c f3       	brlt	.-26     	; 0xc52 <_Z9eqDisplayv+0x82>
        Board1.point(pAmplitude + z, y + 9, 'b');
      }
    }
    Board1.point(peak, y + 9, EQ1.getPeakColor(y));
     c6c:	80 e4       	ldi	r24, 0x40	; 64
     c6e:	93 e0       	ldi	r25, 0x03	; 3
     c70:	68 2d       	mov	r22, r8
     c72:	4d 2d       	mov	r20, r13
     c74:	2e 85       	ldd	r18, Y+14	; 0x0e
     c76:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN7ht1632c5pointEhhc>
     c7a:	63 96       	adiw	r28, 0x13	; 19
     c7c:	d3 94       	inc	r13

/******************************************************************
 *	Show equalizer on a board
 */
void eqDisplay(){
  for (byte y = 0; y < 7 ;y++){
     c7e:	8d 2d       	mov	r24, r13
     c80:	80 31       	cpi	r24, 0x10	; 16
     c82:	09 f0       	breq	.+2      	; 0xc86 <_Z9eqDisplayv+0xb6>
     c84:	b4 cf       	rjmp	.-152    	; 0xbee <_Z9eqDisplayv+0x1e>
        Board1.point(pAmplitude + z, y + 9, 'b');
      }
    }
    Board1.point(peak, y + 9, EQ1.getPeakColor(y));
  }
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	8f 90       	pop	r8
     c9c:	08 95       	ret

00000c9e <_Z10ModeSelectv>:
}

/******************************************************************
 *	Select which data to show
 */
void ModeSelect(){
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	65 97       	sbiw	r28, 0x15	; 21
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
  if (EqualizerMode & EQ1.signalAvailable()){
     cba:	e0 90 f3 03 	lds	r14, 0x03F3
     cbe:	84 eb       	ldi	r24, 0xB4	; 180
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN6MSGEQ715signalAvailableEv>
     cc6:	8e 21       	and	r24, r14
     cc8:	99 f0       	breq	.+38     	; 0xcf0 <_Z10ModeSelectv+0x52>
    if (!EqualizerWorking){
     cca:	80 91 f1 03 	lds	r24, 0x03F1
     cce:	88 23       	and	r24, r24
     cd0:	61 f4       	brne	.+24     	; 0xcea <_Z10ModeSelectv+0x4c>
      EqualizerWorking = true;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 f1 03 	sts	0x03F1, r24
      Board1.resetBoard(1);
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN7ht1632c10resetBoardEh>
      EQ1.resetEQ();
     ce2:	84 eb       	ldi	r24, 0xB4	; 180
     ce4:	92 e0       	ldi	r25, 0x02	; 2
     ce6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <_ZN6MSGEQ77resetEQEv>
    }
    eqDisplay();
     cea:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_Z9eqDisplayv>
     cee:	a0 c0       	rjmp	.+320    	; 0xe30 <_Z10ModeSelectv+0x192>
  }
  else if (abs(millis() - lastModeChange) > 3000){
     cf0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     cf4:	7b 01       	movw	r14, r22
     cf6:	8c 01       	movw	r16, r24
     cf8:	80 91 ed 03 	lds	r24, 0x03ED
     cfc:	90 91 ee 03 	lds	r25, 0x03EE
     d00:	a0 91 ef 03 	lds	r26, 0x03EF
     d04:	b0 91 f0 03 	lds	r27, 0x03F0
     d08:	e8 16       	cp	r14, r24
     d0a:	f9 06       	cpc	r15, r25
     d0c:	0a 07       	cpc	r16, r26
     d0e:	1b 07       	cpc	r17, r27
     d10:	b9 f0       	breq	.+46     	; 0xd40 <_Z10ModeSelectv+0xa2>
     d12:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     d16:	20 91 ed 03 	lds	r18, 0x03ED
     d1a:	30 91 ee 03 	lds	r19, 0x03EE
     d1e:	40 91 ef 03 	lds	r20, 0x03EF
     d22:	50 91 f0 03 	lds	r21, 0x03F0
     d26:	62 1b       	sub	r22, r18
     d28:	73 0b       	sbc	r23, r19
     d2a:	84 0b       	sbc	r24, r20
     d2c:	95 0b       	sbc	r25, r21
     d2e:	69 3b       	cpi	r22, 0xB9	; 185
     d30:	2b e0       	ldi	r18, 0x0B	; 11
     d32:	72 07       	cpc	r23, r18
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	82 07       	cpc	r24, r18
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	92 07       	cpc	r25, r18
     d3c:	88 f4       	brcc	.+34     	; 0xd60 <_Z10ModeSelectv+0xc2>
     d3e:	78 c0       	rjmp	.+240    	; 0xe30 <_Z10ModeSelectv+0x192>
     d40:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     d44:	e6 1a       	sub	r14, r22
     d46:	f7 0a       	sbc	r15, r23
     d48:	08 0b       	sbc	r16, r24
     d4a:	19 0b       	sbc	r17, r25
     d4c:	89 eb       	ldi	r24, 0xB9	; 185
     d4e:	e8 16       	cp	r14, r24
     d50:	8b e0       	ldi	r24, 0x0B	; 11
     d52:	f8 06       	cpc	r15, r24
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	08 07       	cpc	r16, r24
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	18 07       	cpc	r17, r24
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <_Z10ModeSelectv+0xc2>
     d5e:	68 c0       	rjmp	.+208    	; 0xe30 <_Z10ModeSelectv+0x192>
    lastModeChange = millis();
     d60:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
     d64:	60 93 ed 03 	sts	0x03ED, r22
     d68:	70 93 ee 03 	sts	0x03EE, r23
     d6c:	80 93 ef 03 	sts	0x03EF, r24
     d70:	90 93 f0 03 	sts	0x03F0, r25
    EqualizerWorking = false;
     d74:	10 92 f1 03 	sts	0x03F1, r1
    Board1.resetBoard(1);
     d78:	80 e4       	ldi	r24, 0x40	; 64
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN7ht1632c10resetBoardEh>

    for (int m = 0; m < 4; m++){
      if (Mode == 0 && DateMode){
     d82:	50 91 d2 01 	lds	r21, 0x01D2
        Board1.writeRow(RTC.getDate(), 1, 'g', 'e');
        Mode++;
        break;
      }
      else if (Mode == 1 && HumidityMode){
     d86:	40 91 d3 01 	lds	r20, 0x01D3
        Board1.writeRow(TH1.getHumidity() , 1, 'g', 'e');
        Mode++;
        break;
      }
      else if (Mode == 2 && TemperatureMode){
     d8a:	30 91 d4 01 	lds	r19, 0x01D4
     d8e:	20 91 e8 03 	lds	r18, 0x03E8
  else if (abs(millis() - lastModeChange) > 3000){
    lastModeChange = millis();
    EqualizerWorking = false;
    Board1.resetBoard(1);

    for (int m = 0; m < 4; m++){
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
      if (Mode == 0 && DateMode){
     d96:	22 23       	and	r18, r18
     d98:	71 f4       	brne	.+28     	; 0xdb6 <_Z10ModeSelectv+0x118>
     d9a:	55 23       	and	r21, r21
     d9c:	f1 f1       	breq	.+124    	; 0xe1a <_Z10ModeSelectv+0x17c>
     d9e:	10 92 e8 03 	sts	0x03E8, r1
        Board1.writeRow(RTC.getDate(), 1, 'g', 'e');
     da2:	7e 01       	movw	r14, r28
     da4:	08 94       	sec
     da6:	e1 1c       	adc	r14, r1
     da8:	f1 1c       	adc	r15, r1
     daa:	c7 01       	movw	r24, r14
     dac:	6c ec       	ldi	r22, 0xCC	; 204
     dae:	73 e0       	ldi	r23, 0x03	; 3
     db0:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN6RTClib7getDateEv>
     db4:	10 c0       	rjmp	.+32     	; 0xdd6 <_Z10ModeSelectv+0x138>
        Mode++;
        break;
      }
      else if (Mode == 1 && HumidityMode){
     db6:	21 30       	cpi	r18, 0x01	; 1
     db8:	f9 f4       	brne	.+62     	; 0xdf8 <_Z10ModeSelectv+0x15a>
     dba:	44 23       	and	r20, r20
     dbc:	71 f1       	breq	.+92     	; 0xe1a <_Z10ModeSelectv+0x17c>
     dbe:	20 93 e8 03 	sts	0x03E8, r18
        Board1.writeRow(TH1.getHumidity() , 1, 'g', 'e');
     dc2:	48 e0       	ldi	r20, 0x08	; 8
     dc4:	e4 2e       	mov	r14, r20
     dc6:	f1 2c       	mov	r15, r1
     dc8:	ec 0e       	add	r14, r28
     dca:	fd 1e       	adc	r15, r29
     dcc:	c7 01       	movw	r24, r14
     dce:	64 ec       	ldi	r22, 0xC4	; 196
     dd0:	73 e0       	ldi	r23, 0x03	; 3
     dd2:	0e 94 8d 0b 	call	0x171a	; 0x171a <_ZN5RHT0311getHumidityEv>
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	93 e0       	ldi	r25, 0x03	; 3
     dda:	b7 01       	movw	r22, r14
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	27 e6       	ldi	r18, 0x67	; 103
     de0:	05 e6       	ldi	r16, 0x65	; 101
     de2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7ht1632c8writeRowE6Stringhcc>
     de6:	c7 01       	movw	r24, r14
     de8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
        Mode++;
     dec:	80 91 e8 03 	lds	r24, 0x03E8
     df0:	8f 5f       	subi	r24, 0xFF	; 255
     df2:	80 93 e8 03 	sts	0x03E8, r24
        break;
     df6:	1c c0       	rjmp	.+56     	; 0xe30 <_Z10ModeSelectv+0x192>
      }
      else if (Mode == 2 && TemperatureMode){
     df8:	22 30       	cpi	r18, 0x02	; 2
     dfa:	79 f4       	brne	.+30     	; 0xe1a <_Z10ModeSelectv+0x17c>
     dfc:	33 23       	and	r19, r19
     dfe:	69 f0       	breq	.+26     	; 0xe1a <_Z10ModeSelectv+0x17c>
     e00:	20 93 e8 03 	sts	0x03E8, r18
        Board1.writeRow(TH1.getTemperature(), 1, 'g', 'e');
     e04:	3f e0       	ldi	r19, 0x0F	; 15
     e06:	e3 2e       	mov	r14, r19
     e08:	f1 2c       	mov	r15, r1
     e0a:	ec 0e       	add	r14, r28
     e0c:	fd 1e       	adc	r15, r29
     e0e:	c7 01       	movw	r24, r14
     e10:	64 ec       	ldi	r22, 0xC4	; 196
     e12:	73 e0       	ldi	r23, 0x03	; 3
     e14:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <_ZN5RHT0314getTemperatureEv>
     e18:	de cf       	rjmp	.-68     	; 0xdd6 <_Z10ModeSelectv+0x138>
        Mode++;
        break;
      }
      else {
        Mode ++;
     e1a:	2f 5f       	subi	r18, 0xFF	; 255
        if (Mode > 2) Mode = 0;
     e1c:	23 30       	cpi	r18, 0x03	; 3
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <_Z10ModeSelectv+0x184>
     e20:	20 e0       	ldi	r18, 0x00	; 0
  else if (abs(millis() - lastModeChange) > 3000){
    lastModeChange = millis();
    EqualizerWorking = false;
    Board1.resetBoard(1);

    for (int m = 0; m < 4; m++){
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	84 30       	cpi	r24, 0x04	; 4
     e26:	91 05       	cpc	r25, r1
     e28:	09 f0       	breq	.+2      	; 0xe2c <_Z10ModeSelectv+0x18e>
     e2a:	b5 cf       	rjmp	.-150    	; 0xd96 <_Z10ModeSelectv+0xf8>
     e2c:	20 93 e8 03 	sts	0x03E8, r18
        Mode ++;
        if (Mode > 2) Mode = 0;
      }
    }
  }
}
     e30:	65 96       	adiw	r28, 0x15	; 21
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	ef 90       	pop	r14
     e48:	08 95       	ret

00000e4a <_Z7getDatav>:
}

/******************************************************************
 *	Get Data from Serial Port
 */
void getData(){
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	c7 55       	subi	r28, 0x57	; 87
     e60:	d0 40       	sbci	r29, 0x00	; 0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
  String serIn;
     e6c:	8e 01       	movw	r16, r28
     e6e:	0c 5f       	subi	r16, 0xFC	; 252
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	c8 01       	movw	r24, r16
     e74:	60 e1       	ldi	r22, 0x10	; 16
     e76:	71 e0       	ldi	r23, 0x01	; 1
     e78:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
     e7c:	f0 2e       	mov	r15, r16
     e7e:	e1 2e       	mov	r14, r17
  char character;
  char temp[3]; //for string to number convertion

  while (Serial.available()){
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <_Z7getDatav+0x4a>
    character = Serial.read();
     e82:	8c e7       	ldi	r24, 0x7C	; 124
     e84:	94 e0       	ldi	r25, 0x04	; 4
     e86:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN14HardwareSerial4readEv>
     e8a:	68 2f       	mov	r22, r24
    serIn.concat(character);
     e8c:	8f 2d       	mov	r24, r15
     e8e:	9e 2d       	mov	r25, r14
     e90:	0e 94 e7 18 	call	0x31ce	; 0x31ce <_ZN6String6concatEc>
void getData(){
  String serIn;
  char character;
  char temp[3]; //for string to number convertion

  while (Serial.available()){
     e94:	8c e7       	ldi	r24, 0x7C	; 124
     e96:	94 e0       	ldi	r25, 0x04	; 4
     e98:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN14HardwareSerial9availableEv>
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	89 f7       	brne	.-30     	; 0xe82 <_Z7getDatav+0x38>
    character = Serial.read();
    serIn.concat(character);
  }

  if (serIn.compareTo( "R") == 0){
     ea0:	0b e0       	ldi	r16, 0x0B	; 11
     ea2:	c0 2e       	mov	r12, r16
     ea4:	d1 2c       	mov	r13, r1
     ea6:	cc 0e       	add	r12, r28
     ea8:	dd 1e       	adc	r13, r29
     eaa:	c6 01       	movw	r24, r12
     eac:	61 e1       	ldi	r22, 0x11	; 17
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
     eb4:	8f 2d       	mov	r24, r15
     eb6:	9e 2d       	mov	r25, r14
     eb8:	b6 01       	movw	r22, r12
     eba:	0e 94 27 19 	call	0x324e	; 0x324e <_ZNK6String9compareToERKS_>
     ebe:	8c 01       	movw	r16, r24
     ec0:	c6 01       	movw	r24, r12
     ec2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
     ec6:	01 15       	cp	r16, r1
     ec8:	11 05       	cpc	r17, r1
     eca:	61 f4       	brne	.+24     	; 0xee4 <_Z7getDatav+0x9a>
    wdt_enable(WDTO_15MS); //Tells watchdog to reset after 15ms for remote sketch upload
     ecc:	28 e0       	ldi	r18, 0x08	; 8
     ece:	88 e1       	ldi	r24, 0x18	; 24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	a8 95       	wdr
     ed8:	80 93 60 00 	sts	0x0060, r24
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	20 93 60 00 	sts	0x0060, r18
     ee2:	26 c1       	rjmp	.+588    	; 0x1130 <_Z7getDatav+0x2e6>
  }
  else if (serIn.startsWith("c:")){ //c: for clock adjust
     ee4:	8e 01       	movw	r16, r28
     ee6:	0e 5e       	subi	r16, 0xEE	; 238
     ee8:	1f 4f       	sbci	r17, 0xFF	; 255
     eea:	c8 01       	movw	r24, r16
     eec:	63 e1       	ldi	r22, 0x13	; 19
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
     ef4:	8f 2d       	mov	r24, r15
     ef6:	9e 2d       	mov	r25, r14
     ef8:	b8 01       	movw	r22, r16
     efa:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZNK6String10startsWithERKS_>
     efe:	c8 2e       	mov	r12, r24
     f00:	c8 01       	movw	r24, r16
     f02:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
     f06:	cc 20       	and	r12, r12
     f08:	79 f0       	breq	.+30     	; 0xf28 <_Z7getDatav+0xde>
    RTC.setTime(serIn);
     f0a:	8e 01       	movw	r16, r28
     f0c:	07 5e       	subi	r16, 0xE7	; 231
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	c8 01       	movw	r24, r16
     f12:	6f 2d       	mov	r22, r15
     f14:	7e 2d       	mov	r23, r14
     f16:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN6StringC1ERKS_>
     f1a:	8c ec       	ldi	r24, 0xCC	; 204
     f1c:	93 e0       	ldi	r25, 0x03	; 3
     f1e:	b8 01       	movw	r22, r16
     f20:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN6RTClib7setTimeE6String>
     f24:	c8 01       	movw	r24, r16
     f26:	5b c0       	rjmp	.+182    	; 0xfde <_Z7getDatav+0x194>
  }
  else if (serIn.startsWith("t:")){ //t: for write text
     f28:	8e 01       	movw	r16, r28
     f2a:	00 5e       	subi	r16, 0xE0	; 224
     f2c:	1f 4f       	sbci	r17, 0xFF	; 255
     f2e:	c8 01       	movw	r24, r16
     f30:	66 e1       	ldi	r22, 0x16	; 22
     f32:	71 e0       	ldi	r23, 0x01	; 1
     f34:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
     f38:	8f 2d       	mov	r24, r15
     f3a:	9e 2d       	mov	r25, r14
     f3c:	b8 01       	movw	r22, r16
     f3e:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZNK6String10startsWithERKS_>
     f42:	c8 2e       	mov	r12, r24
     f44:	c8 01       	movw	r24, r16
     f46:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
     f4a:	cc 20       	and	r12, r12
     f4c:	09 f4       	brne	.+2      	; 0xf50 <_Z7getDatav+0x106>
     f4e:	4a c0       	rjmp	.+148    	; 0xfe4 <_Z7getDatav+0x19a>
    Board1.resetBoard(0);
     f50:	80 e4       	ldi	r24, 0x40	; 64
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN7ht1632c10resetBoardEh>
    Board1.writeRow(serIn.substring(6, serIn.length()), 0, 'g', serIn.charAt(3));
     f5a:	17 e2       	ldi	r17, 0x27	; 39
     f5c:	c1 2e       	mov	r12, r17
     f5e:	d1 2c       	mov	r13, r1
     f60:	cc 0e       	add	r12, r28
     f62:	dd 1e       	adc	r13, r29
     f64:	28 85       	ldd	r18, Y+8	; 0x08
     f66:	39 85       	ldd	r19, Y+9	; 0x09
     f68:	c6 01       	movw	r24, r12
     f6a:	6f 2d       	mov	r22, r15
     f6c:	7e 2d       	mov	r23, r14
     f6e:	46 e0       	ldi	r20, 0x06	; 6
     f70:	50 e0       	ldi	r21, 0x00	; 0
     f72:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
     f76:	8f 2d       	mov	r24, r15
     f78:	9e 2d       	mov	r25, r14
     f7a:	63 e0       	ldi	r22, 0x03	; 3
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	0e 94 c9 19 	call	0x3392	; 0x3392 <_ZNK6String6charAtEj>
     f82:	08 2f       	mov	r16, r24
     f84:	80 e4       	ldi	r24, 0x40	; 64
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	b6 01       	movw	r22, r12
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	27 e6       	ldi	r18, 0x67	; 103
     f8e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7ht1632c8writeRowE6Stringhcc>
     f92:	c6 01       	movw	r24, r12
     f94:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    if (serIn.length() <= 11) delay(1500);
     f98:	88 85       	ldd	r24, Y+8	; 0x08
     f9a:	99 85       	ldd	r25, Y+9	; 0x09
     f9c:	8c 30       	cpi	r24, 0x0C	; 12
     f9e:	91 05       	cpc	r25, r1
     fa0:	30 f4       	brcc	.+12     	; 0xfae <_Z7getDatav+0x164>
     fa2:	6c ed       	ldi	r22, 0xDC	; 220
     fa4:	75 e0       	ldi	r23, 0x05	; 5
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <delay>
    Board1.resetBoard(0);
     fae:	80 e4       	ldi	r24, 0x40	; 64
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <_ZN7ht1632c10resetBoardEh>
    Board1.writeRow(RTC.getTime(), 0, 'g', 'e');
     fb8:	be e2       	ldi	r27, 0x2E	; 46
     fba:	eb 2e       	mov	r14, r27
     fbc:	f1 2c       	mov	r15, r1
     fbe:	ec 0e       	add	r14, r28
     fc0:	fd 1e       	adc	r15, r29
     fc2:	c7 01       	movw	r24, r14
     fc4:	6c ec       	ldi	r22, 0xCC	; 204
     fc6:	73 e0       	ldi	r23, 0x03	; 3
     fc8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_ZN6RTClib7getTimeEv>
     fcc:	80 e4       	ldi	r24, 0x40	; 64
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	b7 01       	movw	r22, r14
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	27 e6       	ldi	r18, 0x67	; 103
     fd6:	05 e6       	ldi	r16, 0x65	; 101
     fd8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <_ZN7ht1632c8writeRowE6Stringhcc>
     fdc:	c7 01       	movw	r24, r14
     fde:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
     fe2:	a6 c0       	rjmp	.+332    	; 0x1130 <_Z7getDatav+0x2e6>
  }
  else if (serIn.startsWith("m?")){  //m? for mode check
     fe4:	8e 01       	movw	r16, r28
     fe6:	0b 5c       	subi	r16, 0xCB	; 203
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	c8 01       	movw	r24, r16
     fec:	69 e1       	ldi	r22, 0x19	; 25
     fee:	71 e0       	ldi	r23, 0x01	; 1
     ff0:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
     ff4:	8f 2d       	mov	r24, r15
     ff6:	9e 2d       	mov	r25, r14
     ff8:	b8 01       	movw	r22, r16
     ffa:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZNK6String10startsWithERKS_>
     ffe:	c8 2e       	mov	r12, r24
    1000:	c8 01       	movw	r24, r16
    1002:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1006:	cc 20       	and	r12, r12
    1008:	09 f4       	brne	.+2      	; 0x100c <_Z7getDatav+0x1c2>
    100a:	44 c0       	rjmp	.+136    	; 0x1094 <_Z7getDatav+0x24a>
    delay(100);
    100c:	64 e6       	ldi	r22, 0x64	; 100
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <delay>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1018:	a3 e4       	ldi	r26, 0x43	; 67
    101a:	ea 2e       	mov	r14, r26
    101c:	f1 2c       	mov	r15, r1
    101e:	ec 0e       	add	r14, r28
    1020:	fd 1e       	adc	r15, r29
    1022:	c7 01       	movw	r24, r14
    1024:	6c e1       	ldi	r22, 0x1C	; 28
    1026:	71 e0       	ldi	r23, 0x01	; 1
    1028:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    Serial.println("m: " + String(DateMode | (EqualizerMode << 1) | (HumidityMode << 2) | (TemperatureMode << 3), BIN));
    102c:	8e 01       	movw	r16, r28
    102e:	04 5c       	subi	r16, 0xC4	; 196
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	60 91 f3 03 	lds	r22, 0x03F3
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	66 0f       	add	r22, r22
    103a:	77 1f       	adc	r23, r23
    103c:	80 91 d3 01 	lds	r24, 0x01D3
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	68 2b       	or	r22, r24
    104c:	79 2b       	or	r23, r25
    104e:	80 91 d2 01 	lds	r24, 0x01D2
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	68 2b       	or	r22, r24
    1056:	79 2b       	or	r23, r25
    1058:	80 91 d4 01 	lds	r24, 0x01D4
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	53 e0       	ldi	r21, 0x03	; 3
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	5a 95       	dec	r21
    1066:	e1 f7       	brne	.-8      	; 0x1060 <_Z7getDatav+0x216>
    1068:	68 2b       	or	r22, r24
    106a:	79 2b       	or	r23, r25
    106c:	c8 01       	movw	r24, r16
    106e:	42 e0       	ldi	r20, 0x02	; 2
    1070:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <_ZN6StringC1Eih>
    1074:	c7 01       	movw	r24, r14
    1076:	b8 01       	movw	r22, r16
    1078:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZplRK15StringSumHelperRK6String>
    107c:	bc 01       	movw	r22, r24
    107e:	8c e7       	ldi	r24, 0x7C	; 124
    1080:	94 e0       	ldi	r25, 0x04	; 4
    1082:	0e 94 92 16 	call	0x2d24	; 0x2d24 <_ZN5Print7printlnERK6String>
    1086:	c8 01       	movw	r24, r16
    1088:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    108c:	c7 01       	movw	r24, r14
    108e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1092:	4e c0       	rjmp	.+156    	; 0x1130 <_Z7getDatav+0x2e6>
  }
  else if (serIn.startsWith("m:")){ //m: for mode change
    1094:	8e 01       	movw	r16, r28
    1096:	06 5b       	subi	r16, 0xB6	; 182
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
    109a:	c8 01       	movw	r24, r16
    109c:	60 e2       	ldi	r22, 0x20	; 32
    109e:	71 e0       	ldi	r23, 0x01	; 1
    10a0:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    10a4:	8f 2d       	mov	r24, r15
    10a6:	9e 2d       	mov	r25, r14
    10a8:	b8 01       	movw	r22, r16
    10aa:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZNK6String10startsWithERKS_>
    10ae:	c8 2e       	mov	r12, r24
    10b0:	c8 01       	movw	r24, r16
    10b2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    10b6:	cc 20       	and	r12, r12
    10b8:	d9 f1       	breq	.+118    	; 0x1130 <_Z7getDatav+0x2e6>

    serIn = serIn.substring(3, serIn.length());
    10ba:	8e 01       	movw	r16, r28
    10bc:	0f 5a       	subi	r16, 0xAF	; 175
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	28 85       	ldd	r18, Y+8	; 0x08
    10c2:	39 85       	ldd	r19, Y+9	; 0x09
    10c4:	c8 01       	movw	r24, r16
    10c6:	6f 2d       	mov	r22, r15
    10c8:	7e 2d       	mov	r23, r14
    10ca:	43 e0       	ldi	r20, 0x03	; 3
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    10d2:	8f 2d       	mov	r24, r15
    10d4:	9e 2d       	mov	r25, r14
    10d6:	b8 01       	movw	r22, r16
    10d8:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    10dc:	c8 01       	movw	r24, r16
    10de:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    serIn.toCharArray(temp, serIn.length() + 1);
    10e2:	48 85       	ldd	r20, Y+8	; 0x08
    10e4:	59 85       	ldd	r21, Y+9	; 0x09
    10e6:	4f 5f       	subi	r20, 0xFF	; 255
    10e8:	5f 4f       	sbci	r21, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    10ea:	8f 2d       	mov	r24, r15
    10ec:	9e 2d       	mov	r25, r14
    10ee:	7e 01       	movw	r14, r28
    10f0:	08 94       	sec
    10f2:	e1 1c       	adc	r14, r1
    10f4:	f1 1c       	adc	r15, r1
    10f6:	b7 01       	movw	r22, r14
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZNK6String8getBytesEPhjj>

    DateMode = atoi(temp) & 1;
    1100:	c7 01       	movw	r24, r14
    1102:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	80 93 d2 01 	sts	0x01D2, r24
    EqualizerMode = atoi(temp) & 2;
    110c:	c7 01       	movw	r24, r14
    110e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1112:	82 70       	andi	r24, 0x02	; 2
    1114:	80 93 f3 03 	sts	0x03F3, r24
    HumidityMode = atoi(temp) & 4;
    1118:	c7 01       	movw	r24, r14
    111a:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    111e:	84 70       	andi	r24, 0x04	; 4
    1120:	80 93 d3 01 	sts	0x01D3, r24
    TemperatureMode = atoi(temp) & 8;
    1124:	c7 01       	movw	r24, r14
    1126:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    112a:	88 70       	andi	r24, 0x08	; 8
    112c:	80 93 d4 01 	sts	0x01D4, r24

/******************************************************************
 *	Get Data from Serial Port
 */
void getData(){
  String serIn;
    1130:	ce 01       	movw	r24, r28
    1132:	04 96       	adiw	r24, 0x04	; 4
    1134:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    EqualizerMode = atoi(temp) & 2;
    HumidityMode = atoi(temp) & 4;
    TemperatureMode = atoi(temp) & 8;

  }
}
    1138:	c9 5a       	subi	r28, 0xA9	; 169
    113a:	df 4f       	sbci	r29, 0xFF	; 255
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	1f 91       	pop	r17
    114c:	0f 91       	pop	r16
    114e:	ff 90       	pop	r15
    1150:	ef 90       	pop	r14
    1152:	df 90       	pop	r13
    1154:	cf 90       	pop	r12
    1156:	08 95       	ret

00001158 <loop>:
}

// The loop function is called in an endless loop
void loop()
{
	  CheckDimPin();
    1158:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_Z11CheckDimPinv>
	  UpdateTime();
    115c:	0e 94 ca 04 	call	0x994	; 0x994 <_Z10UpdateTimev>
	  if (!DimDisplay) ModeSelect();
    1160:	80 91 f2 03 	lds	r24, 0x03F2
    1164:	88 23       	and	r24, r24
    1166:	11 f4       	brne	.+4      	; 0x116c <loop+0x14>
    1168:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_Z10ModeSelectv>
	  if (Serial.available() > 0) getData();
    116c:	8c e7       	ldi	r24, 0x7C	; 124
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN14HardwareSerial9availableEv>
    1174:	18 16       	cp	r1, r24
    1176:	19 06       	cpc	r1, r25
    1178:	14 f4       	brge	.+4      	; 0x117e <loop+0x26>
    117a:	0e 94 25 07 	call	0xe4a	; 0xe4a <_Z7getDatav>
    117e:	08 95       	ret

00001180 <_ZN6RTClibD1Ev>:
#define DS1307_ADDRESS 0x68
#define SECONDS_PER_DAY 86400
#define SECONDS_FROM_1970_TO_2000 946684800
static const uint8_t daysInMonth [] PROGMEM  = {31,28,31,30,31,30,31,31,30,31,30,31};

class RTClib{
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	ec 01       	movw	r28, r24
    1186:	07 96       	adiw	r24, 0x07	; 7
    1188:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    118c:	ce 01       	movw	r24, r28
    118e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <_Z41__static_initialization_and_destruction_0ii.clone.1>:
    EqualizerMode = atoi(temp) & 2;
    HumidityMode = atoi(temp) & 4;
    TemperatureMode = atoi(temp) & 8;

  }
}
    1198:	0f 93       	push	r16
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	c9 f4       	brne	.+50     	; 0x11d2 <_Z41__static_initialization_and_destruction_0ii.clone.1+0x3a>
// Do not remove the include below
#include "AClock.h"

#define dimPin 8

MSGEQ7 EQ1(2,3,0);
    11a0:	84 eb       	ldi	r24, 0xB4	; 180
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	62 e0       	ldi	r22, 0x02	; 2
    11a6:	43 e0       	ldi	r20, 0x03	; 3
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_ZN6MSGEQ7C1Ehhh>
ht1632c Board1(12,11,10,9);
    11ae:	80 e4       	ldi	r24, 0x40	; 64
    11b0:	93 e0       	ldi	r25, 0x03	; 3
    11b2:	6c e0       	ldi	r22, 0x0C	; 12
    11b4:	4b e0       	ldi	r20, 0x0B	; 11
    11b6:	2a e0       	ldi	r18, 0x0A	; 10
    11b8:	09 e0       	ldi	r16, 0x09	; 9
    11ba:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN7ht1632cC1Ehhhh>
RHT03 TH1(5); //Temperature & Humidity sensor
    11be:	84 ec       	ldi	r24, 0xC4	; 196
    11c0:	93 e0       	ldi	r25, 0x03	; 3
    11c2:	65 e0       	ldi	r22, 0x05	; 5
    11c4:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN5RHT03C1Eh>
RTClib RTC;
    11c8:	8c ec       	ldi	r24, 0xCC	; 204
    11ca:	93 e0       	ldi	r25, 0x03	; 3
    11cc:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZN6RTClibC1Ev>
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <_Z41__static_initialization_and_destruction_0ii.clone.1+0x46>
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	21 f4       	brne	.+8      	; 0x11de <_Z41__static_initialization_and_destruction_0ii.clone.1+0x46>
    11d6:	8c ec       	ldi	r24, 0xCC	; 204
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	0e 94 c0 08 	call	0x1180	; 0x1180 <_ZN6RTClibD1Ev>
    EqualizerMode = atoi(temp) & 2;
    HumidityMode = atoi(temp) & 4;
    TemperatureMode = atoi(temp) & 8;

  }
}
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <_GLOBAL__I_EQ1>:
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z41__static_initialization_and_destruction_0ii.clone.1>
    11ea:	08 95       	ret

000011ec <_GLOBAL__D_EQ1>:
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z41__static_initialization_and_destruction_0ii.clone.1>
    11f4:	08 95       	ret

000011f6 <_ZN6MSGEQ7C1Ehhh>:
/******************************************************************
 *Writen for MSGEQ7 - Graphic Equalizer Display Filter 
 */
#include "MSGEQ7.h"

MSGEQ7::MSGEQ7(byte _resetPin, byte _strobePin, byte _eqPin){
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
	resetPin = _resetPin;
    11fe:	8c 01       	movw	r16, r24
    1200:	07 57       	subi	r16, 0x77	; 119
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	f8 01       	movw	r30, r16
    1206:	60 83       	st	Z, r22
	strobePin = _strobePin;
    1208:	fc 01       	movw	r30, r24
    120a:	e6 57       	subi	r30, 0x76	; 118
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	40 83       	st	Z, r20
	eqPin = _eqPin;
    1210:	85 57       	subi	r24, 0x75	; 117
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18

	DDRD = DDRD | (1 << resetPin) | (1 << strobePin);		//resetPin & strobePin = outputs
    1218:	8a b1       	in	r24, 0x0a	; 10
    121a:	c1 e0       	ldi	r28, 0x01	; 1
    121c:	d0 e0       	ldi	r29, 0x00	; 0
    121e:	9e 01       	movw	r18, r28
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <_ZN6MSGEQ7C1Ehhh+0x30>
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	6a 95       	dec	r22
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <_ZN6MSGEQ7C1Ehhh+0x2c>
    122a:	82 2b       	or	r24, r18
    122c:	fe 01       	movw	r30, r28
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <_ZN6MSGEQ7C1Ehhh+0x3e>
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	4a 95       	dec	r20
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <_ZN6MSGEQ7C1Ehhh+0x3a>
    1238:	8e 2b       	or	r24, r30
    123a:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | (1 << resetPin);						//resetPin = hight
    123c:	2b b1       	in	r18, 0x0b	; 11
    123e:	ce 01       	movw	r24, r28
    1240:	f8 01       	movw	r30, r16
    1242:	00 80       	ld	r0, Z
    1244:	02 c0       	rjmp	.+4      	; 0x124a <_ZN6MSGEQ7C1Ehhh+0x54>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <_ZN6MSGEQ7C1Ehhh+0x50>
    124e:	28 2b       	or	r18, r24
    1250:	2b b9       	out	0x0b, r18	; 11
	delayMicroseconds(100);
    1252:	84 e6       	ldi	r24, 0x64	; 100
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>
	PORTD = PORTD & ~(1 << resetPin);						//resetPin = low
    125a:	9b b1       	in	r25, 0x0b	; 11
    125c:	f8 01       	movw	r30, r16
    125e:	00 80       	ld	r0, Z
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <_ZN6MSGEQ7C1Ehhh+0x70>
    1262:	cc 0f       	add	r28, r28
    1264:	dd 1f       	adc	r29, r29
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <_ZN6MSGEQ7C1Ehhh+0x6c>
    126a:	9e 01       	movw	r18, r28
    126c:	20 95       	com	r18
    126e:	82 2f       	mov	r24, r18
    1270:	89 23       	and	r24, r25
    1272:	8b b9       	out	0x0b, r24	; 11
	delayMicroseconds(100);
    1274:	84 e6       	ldi	r24, 0x64	; 100
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret

00001286 <_ZN6MSGEQ76eqReadEh>:

/******************************************************************
 *	Read current equalizer values
 */
void MSGEQ7::eqRead(byte _band){
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
    1296:	d6 2e       	mov	r13, r22
	byte band;
	band = _band;

	if (band == 6){									//start from first band
    1298:	66 30       	cpi	r22, 0x06	; 6
    129a:	29 f4       	brne	.+10     	; 0x12a6 <_ZN6MSGEQ76eqReadEh+0x20>
		PORTD = PORTD | (1 << resetPin);			//resetPin = hight
    129c:	2b b1       	in	r18, 0x0b	; 11
    129e:	8c 01       	movw	r16, r24
    12a0:	07 57       	subi	r16, 0x77	; 119
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	04 c0       	rjmp	.+8      	; 0x12ae <_ZN6MSGEQ76eqReadEh+0x28>
		delayMicroseconds(50);
		PORTD = PORTD & ~(1 << resetPin);			//resetPin = low
		delayMicroseconds(25);
	}
	else{											//go to next band
		PORTD = PORTD | (1 << strobePin);			//strobePin = hight
    12a6:	2b b1       	in	r18, 0x0b	; 11
    12a8:	8c 01       	movw	r16, r24
    12aa:	06 57       	subi	r16, 0x76	; 118
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	e8 2e       	mov	r14, r24
    12b2:	f1 2c       	mov	r15, r1
    12b4:	c7 01       	movw	r24, r14
    12b6:	f8 01       	movw	r30, r16
    12b8:	00 80       	ld	r0, Z
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <_ZN6MSGEQ76eqReadEh+0x3a>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <_ZN6MSGEQ76eqReadEh+0x36>
    12c4:	28 2b       	or	r18, r24
    12c6:	2b b9       	out	0x0b, r18	; 11
		delayMicroseconds(50);
    12c8:	82 e3       	ldi	r24, 0x32	; 50
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>
		PORTD = PORTD & ~(1 << strobePin);			//strobePin = low
    12d0:	8b b1       	in	r24, 0x0b	; 11
    12d2:	f8 01       	movw	r30, r16
    12d4:	00 80       	ld	r0, Z
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <_ZN6MSGEQ76eqReadEh+0x56>
    12d8:	ee 0c       	add	r14, r14
    12da:	ff 1c       	adc	r15, r15
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <_ZN6MSGEQ76eqReadEh+0x52>
    12e0:	e0 94       	com	r14
    12e2:	e8 22       	and	r14, r24
    12e4:	eb b8       	out	0x0b, r14	; 11
		delayMicroseconds(25);
    12e6:	89 e1       	ldi	r24, 0x19	; 25
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>
}

/******************************************************************
 *	Read current equalizer values
 */
void MSGEQ7::eqRead(byte _band){
    12ee:	0d 2d       	mov	r16, r13
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	83 e1       	ldi	r24, 0x13	; 19
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	08 9f       	mul	r16, r24
    12f8:	f0 01       	movw	r30, r0
    12fa:	09 9f       	mul	r16, r25
    12fc:	f0 0d       	add	r31, r0
    12fe:	18 9f       	mul	r17, r24
    1300:	f0 0d       	add	r31, r0
    1302:	11 24       	eor	r1, r1
    1304:	3c 96       	adiw	r30, 0x0c	; 12
    1306:	ec 0f       	add	r30, r28
    1308:	fd 1f       	adc	r31, r29
    130a:	26 e0       	ldi	r18, 0x06	; 6
		PORTD = PORTD & ~(1 << strobePin);			//strobePin = low
		delayMicroseconds(25);
	}
	
	for (byte i = 6; i > 0; i--){	
		freq[band].amplitude[i] = freq[band].amplitude[i-1];
    130c:	92 91       	ld	r25, -Z
    130e:	82 91       	ld	r24, -Z
    1310:	93 83       	std	Z+3, r25	; 0x03
    1312:	82 83       	std	Z+2, r24	; 0x02
    1314:	21 50       	subi	r18, 0x01	; 1
		delayMicroseconds(50);
		PORTD = PORTD & ~(1 << strobePin);			//strobePin = low
		delayMicroseconds(25);
	}
	
	for (byte i = 6; i > 0; i--){	
    1316:	d1 f7       	brne	.-12     	; 0x130c <_ZN6MSGEQ76eqReadEh+0x86>
		freq[band].amplitude[i] = freq[band].amplitude[i-1];
	}


	freq[band].amplitude[0] = analogRead(0) / 32;
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <analogRead>
    131e:	60 e2       	ldi	r22, 0x20	; 32
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	0e 94 43 1c 	call	0x3886	; 0x3886 <__divmodhi4>
    1326:	83 e1       	ldi	r24, 0x13	; 19
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	08 9f       	mul	r16, r24
    132c:	f0 01       	movw	r30, r0
    132e:	09 9f       	mul	r16, r25
    1330:	f0 0d       	add	r31, r0
    1332:	18 9f       	mul	r17, r24
    1334:	f0 0d       	add	r31, r0
    1336:	11 24       	eor	r1, r1
    1338:	ec 0f       	add	r30, r28
    133a:	fd 1f       	adc	r31, r29
    133c:	71 83       	std	Z+1, r23	; 0x01
    133e:	60 83       	st	Z, r22
	freq[band].difference = freq[band].amplitude[0] - freq[band].amplitude[1];
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	9b 01       	movw	r18, r22
    1346:	28 1b       	sub	r18, r24
    1348:	39 0b       	sbc	r19, r25
    134a:	32 8b       	std	Z+18, r19	; 0x12
    134c:	21 8b       	std	Z+17, r18	; 0x11

	if (freq[band].amplitude[0] >= freq[band].peak){
    134e:	86 85       	ldd	r24, Z+14	; 0x0e
    1350:	97 85       	ldd	r25, Z+15	; 0x0f
    1352:	68 17       	cp	r22, r24
    1354:	79 07       	cpc	r23, r25
    1356:	d4 f0       	brlt	.+52     	; 0x138c <_ZN6MSGEQ76eqReadEh+0x106>
		freq[band].peak = freq[band].amplitude[0];
    1358:	77 87       	std	Z+15, r23	; 0x0f
    135a:	66 87       	std	Z+14, r22	; 0x0e
/******************************************************************
 *	Determine appropreate color for dot
 */

  char MSGEQ7::getColor(short value){
		if (value < 16){
    135c:	60 31       	cpi	r22, 0x10	; 16
    135e:	71 05       	cpc	r23, r1
    1360:	2c f0       	brlt	.+10     	; 0x136c <_ZN6MSGEQ76eqReadEh+0xe6>
			return 'g';
		}
		else if (value >= 24){
    1362:	68 31       	cpi	r22, 0x18	; 24
    1364:	71 05       	cpc	r23, r1
    1366:	24 f0       	brlt	.+8      	; 0x1370 <_ZN6MSGEQ76eqReadEh+0xea>
			return 'r';
    1368:	22 e7       	ldi	r18, 0x72	; 114
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <_ZN6MSGEQ76eqReadEh+0xec>
 *	Determine appropreate color for dot
 */

  char MSGEQ7::getColor(short value){
		if (value < 16){
			return 'g';
    136c:	27 e6       	ldi	r18, 0x67	; 103
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <_ZN6MSGEQ76eqReadEh+0xec>
		}
		else if (value >= 24){
			return 'r';
		}
		else{
			return 'o';
    1370:	2f e6       	ldi	r18, 0x6F	; 111
	freq[band].amplitude[0] = analogRead(0) / 32;
	freq[band].difference = freq[band].amplitude[0] - freq[band].amplitude[1];

	if (freq[band].amplitude[0] >= freq[band].peak){
		freq[band].peak = freq[band].amplitude[0];
		freq[band].peakColor = getColor(freq[band].peak);
    1372:	83 e1       	ldi	r24, 0x13	; 19
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	08 9f       	mul	r16, r24
    1378:	f0 01       	movw	r30, r0
    137a:	09 9f       	mul	r16, r25
    137c:	f0 0d       	add	r31, r0
    137e:	18 9f       	mul	r17, r24
    1380:	f0 0d       	add	r31, r0
    1382:	11 24       	eor	r1, r1
    1384:	ec 0f       	add	r30, r28
    1386:	fd 1f       	adc	r31, r29
    1388:	20 8b       	std	Z+16, r18	; 0x10
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <_ZN6MSGEQ76eqReadEh+0x10c>
	}
	else{
		freq[band].peak -= 1;
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	97 87       	std	Z+15, r25	; 0x0f
    1390:	86 87       	std	Z+14, r24	; 0x0e
	}
	
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	08 95       	ret

000013a2 <_ZN6MSGEQ78getColorEs>:
/******************************************************************
 *	Determine appropreate color for dot
 */

  char MSGEQ7::getColor(short value){
		if (value < 16){
    13a2:	60 31       	cpi	r22, 0x10	; 16
    13a4:	71 05       	cpc	r23, r1
    13a6:	2c f0       	brlt	.+10     	; 0x13b2 <_ZN6MSGEQ78getColorEs+0x10>
			return 'g';
		}
		else if (value >= 24){
    13a8:	68 31       	cpi	r22, 0x18	; 24
    13aa:	71 05       	cpc	r23, r1
    13ac:	24 f0       	brlt	.+8      	; 0x13b6 <_ZN6MSGEQ78getColorEs+0x14>
			return 'r';
    13ae:	82 e7       	ldi	r24, 0x72	; 114
    13b0:	08 95       	ret
 *	Determine appropreate color for dot
 */

  char MSGEQ7::getColor(short value){
		if (value < 16){
			return 'g';
    13b2:	87 e6       	ldi	r24, 0x67	; 103
    13b4:	08 95       	ret
		}
		else if (value >= 24){
			return 'r';
		}
		else{
			return 'o';
    13b6:	8f e6       	ldi	r24, 0x6F	; 111
		}
  }
    13b8:	08 95       	ret

000013ba <_ZN6MSGEQ715signalAvailableEv>:

/******************************************************************
 *	Check for audio source
 */
boolean MSGEQ7::signalAvailable(){
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	8c 01       	movw	r16, r24
    13cc:	c0 e0       	ldi	r28, 0x00	; 0
    13ce:	d0 e0       	ldi	r29, 0x00	; 0
	int average = 0; 
    13d0:	ee 24       	eor	r14, r14
    13d2:	ff 24       	eor	r15, r15
  }

/******************************************************************
 *	Check for audio source
 */
boolean MSGEQ7::signalAvailable(){
    13d4:	93 e1       	ldi	r25, 0x13	; 19
    13d6:	c9 2e       	mov	r12, r25
    13d8:	d1 2c       	mov	r13, r1
	int average = 0; 
	int amp = 0;

	for (byte b = 0; b < 7; b++){
		 eqRead(b);
    13da:	c8 01       	movw	r24, r16
    13dc:	6c 2f       	mov	r22, r28
    13de:	0e 94 43 09 	call	0x1286	; 0x1286 <_ZN6MSGEQ76eqReadEh>
  }

/******************************************************************
 *	Check for audio source
 */
boolean MSGEQ7::signalAvailable(){
    13e2:	cc 9d       	mul	r28, r12
    13e4:	f0 01       	movw	r30, r0
    13e6:	cd 9d       	mul	r28, r13
    13e8:	f0 0d       	add	r31, r0
    13ea:	dc 9d       	mul	r29, r12
    13ec:	f0 0d       	add	r31, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	e0 0f       	add	r30, r16
    13f2:	f1 1f       	adc	r31, r17
    13f4:	27 e0       	ldi	r18, 0x07	; 7
	int amp = 0;

	for (byte b = 0; b < 7; b++){
		 eqRead(b);
		for (byte a = 0; a < 7; a++){
			amp = freq[b].amplitude[a];
    13f6:	81 91       	ld	r24, Z+
    13f8:	91 91       	ld	r25, Z+
		average += amp;
    13fa:	e8 0e       	add	r14, r24
    13fc:	f9 1e       	adc	r15, r25
    13fe:	21 50       	subi	r18, 0x01	; 1
	int average = 0; 
	int amp = 0;

	for (byte b = 0; b < 7; b++){
		 eqRead(b);
		for (byte a = 0; a < 7; a++){
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <_ZN6MSGEQ715signalAvailableEv+0x3c>
    1402:	21 96       	adiw	r28, 0x01	; 1
 */
boolean MSGEQ7::signalAvailable(){
	int average = 0; 
	int amp = 0;

	for (byte b = 0; b < 7; b++){
    1404:	c7 30       	cpi	r28, 0x07	; 7
    1406:	d1 05       	cpc	r29, r1
    1408:	41 f7       	brne	.-48     	; 0x13da <_ZN6MSGEQ715signalAvailableEv+0x20>
    140a:	e8 01       	movw	r28, r16
    140c:	cb 57       	subi	r28, 0x7B	; 123
    140e:	df 4f       	sbci	r29, 0xFF	; 255
		}
	}

	average = average / 49;

	if (average > 5){ 
    1410:	36 e2       	ldi	r19, 0x26	; 38
    1412:	e3 16       	cp	r14, r19
    1414:	31 e0       	ldi	r19, 0x01	; 1
    1416:	f3 06       	cpc	r15, r19
    1418:	44 f0       	brlt	.+16     	; 0x142a <_ZN6MSGEQ715signalAvailableEv+0x70>
		lastAudioSignal = millis();
    141a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
    141e:	68 83       	st	Y, r22
    1420:	79 83       	std	Y+1, r23	; 0x01
    1422:	8a 83       	std	Y+2, r24	; 0x02
    1424:	9b 83       	std	Y+3, r25	; 0x03
		return true;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	33 c0       	rjmp	.+102    	; 0x1490 <_ZN6MSGEQ715signalAvailableEv+0xd6>
	}
	else if (abs(millis() - lastAudioSignal) < 15000){
    142a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
    142e:	7b 01       	movw	r14, r22
    1430:	8c 01       	movw	r16, r24
    1432:	88 81       	ld	r24, Y
    1434:	99 81       	ldd	r25, Y+1	; 0x01
    1436:	aa 81       	ldd	r26, Y+2	; 0x02
    1438:	bb 81       	ldd	r27, Y+3	; 0x03
    143a:	e8 16       	cp	r14, r24
    143c:	f9 06       	cpc	r15, r25
    143e:	0a 07       	cpc	r16, r26
    1440:	1b 07       	cpc	r17, r27
    1442:	a1 f0       	breq	.+40     	; 0x146c <_ZN6MSGEQ715signalAvailableEv+0xb2>
    1444:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
    1448:	28 81       	ld	r18, Y
    144a:	39 81       	ldd	r19, Y+1	; 0x01
    144c:	4a 81       	ldd	r20, Y+2	; 0x02
    144e:	5b 81       	ldd	r21, Y+3	; 0x03
    1450:	62 1b       	sub	r22, r18
    1452:	73 0b       	sbc	r23, r19
    1454:	84 0b       	sbc	r24, r20
    1456:	95 0b       	sbc	r25, r21
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	68 39       	cpi	r22, 0x98	; 152
    145c:	3a e3       	ldi	r19, 0x3A	; 58
    145e:	73 07       	cpc	r23, r19
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	83 07       	cpc	r24, r19
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	93 07       	cpc	r25, r19
    1468:	90 f0       	brcs	.+36     	; 0x148e <_ZN6MSGEQ715signalAvailableEv+0xd4>
    146a:	10 c0       	rjmp	.+32     	; 0x148c <_ZN6MSGEQ715signalAvailableEv+0xd2>
    146c:	0e 94 c3 1a 	call	0x3586	; 0x3586 <millis>
    1470:	e6 1a       	sub	r14, r22
    1472:	f7 0a       	sbc	r15, r23
    1474:	08 0b       	sbc	r16, r24
    1476:	19 0b       	sbc	r17, r25
    1478:	21 e0       	ldi	r18, 0x01	; 1
    147a:	88 e9       	ldi	r24, 0x98	; 152
    147c:	e8 16       	cp	r14, r24
    147e:	8a e3       	ldi	r24, 0x3A	; 58
    1480:	f8 06       	cpc	r15, r24
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	08 07       	cpc	r16, r24
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	18 07       	cpc	r17, r24
    148a:	08 f0       	brcs	.+2      	; 0x148e <_ZN6MSGEQ715signalAvailableEv+0xd4>
    148c:	20 e0       	ldi	r18, 0x00	; 0

	average = average / 49;

	if (average > 5){ 
		lastAudioSignal = millis();
		return true;
    148e:	82 2f       	mov	r24, r18
		return true;
	}
	else{
		return false;
	}
}
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	df 90       	pop	r13
    149e:	cf 90       	pop	r12
    14a0:	08 95       	ret

000014a2 <_ZN6MSGEQ77resetEQEv>:

/******************************************************************
 *	Reset Equalizer State
 */
void MSGEQ7::resetEQ(){
    14a2:	fc 01       	movw	r30, r24
	for (byte b = 0; b < 7; b++){
		freq[b].amplitude[0] = 0;
    14a4:	11 82       	std	Z+1, r1	; 0x01
    14a6:	10 82       	st	Z, r1
    14a8:	14 8a       	std	Z+20, r1	; 0x14
    14aa:	13 8a       	std	Z+19, r1	; 0x13
    14ac:	17 a2       	std	Z+39, r1	; 0x27
    14ae:	16 a2       	std	Z+38, r1	; 0x26
    14b0:	12 ae       	std	Z+58, r1	; 0x3a
    14b2:	11 ae       	std	Z+57, r1	; 0x39
    14b4:	dc 01       	movw	r26, r24
    14b6:	a4 5b       	subi	r26, 0xB4	; 180
    14b8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ba:	1d 92       	st	X+, r1
    14bc:	1c 92       	st	X, r1
    14be:	dc 01       	movw	r26, r24
    14c0:	a1 5a       	subi	r26, 0xA1	; 161
    14c2:	bf 4f       	sbci	r27, 0xFF	; 255
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	1c 92       	st	X, r1
    14c8:	1e 92       	st	-X, r1
    14ca:	ee 58       	subi	r30, 0x8E	; 142
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	11 82       	std	Z+1, r1	; 0x01
    14d0:	10 82       	st	Z, r1
	}
    14d2:	08 95       	ret

000014d4 <_ZN5RHT03C1Eh>:
/******************************************************************
 *Writen for RHT03 Temperature & Humidity sensor
 */
#include "RHT03.h"

RHT03::RHT03(uint8_t _RHT03_Pin){ //constructor
    14d4:	fc 01       	movw	r30, r24
  RHT03_Pin = _RHT03_Pin;
    14d6:	60 83       	st	Z, r22
  DDRD |= (1 << RHT03_Pin);    //RHT03Pin as output  
    14d8:	2a b1       	in	r18, 0x0a	; 10
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	ac 01       	movw	r20, r24
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <_ZN5RHT03C1Eh+0x12>
    14e2:	44 0f       	add	r20, r20
    14e4:	55 1f       	adc	r21, r21
    14e6:	6a 95       	dec	r22
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <_ZN5RHT03C1Eh+0xe>
    14ea:	24 2b       	or	r18, r20
    14ec:	2a b9       	out	0x0a, r18	; 10
  PORTD |= (1 << RHT03_Pin);    //RH03Pin HIGH   
    14ee:	2b b1       	in	r18, 0x0b	; 11
    14f0:	00 80       	ld	r0, Z
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <_ZN5RHT03C1Eh+0x24>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <_ZN5RHT03C1Eh+0x20>
    14fc:	28 2b       	or	r18, r24
    14fe:	2b b9       	out	0x0b, r18	; 11
}
    1500:	08 95       	ret

00001502 <_ZN5RHT0315Read_RHT03_DataEv>:
    humidity = (((RHT03_Data[0] << 8) | RHT03_Data[1]) / 10);
    temperature = (((RHT03_Data[2] << 8) | RHT03_Data[3]) / 10);
  }
}

uint8_t RHT03::Read_RHT03_Data(){
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	7c 01       	movw	r14, r24
    1512:	c7 e0       	ldi	r28, 0x07	; 7
    1514:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t result = 0;
    1516:	dd 24       	eor	r13, r13
  for(int i = 0; i < 8; i++){
    while(!(PIND & (1 << RHT03_Pin))); //wait 40usec
    delayMicroseconds(40);

    if(PIND & (1 << RHT03_Pin)){  //if pin still '1' after 40usec that it's '1'
      result |= (1 << (7 - i));
    1518:	01 e0       	ldi	r16, 0x01	; 1
    151a:	10 e0       	ldi	r17, 0x00	; 0

uint8_t RHT03::Read_RHT03_Data(){
  uint8_t result = 0;

  for(int i = 0; i < 8; i++){
    while(!(PIND & (1 << RHT03_Pin))); //wait 40usec
    151c:	f7 01       	movw	r30, r14
    151e:	80 81       	ld	r24, Z
    1520:	29 b1       	in	r18, 0x09	; 9
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	08 2e       	mov	r0, r24
    1526:	02 c0       	rjmp	.+4      	; 0x152c <_ZN5RHT0315Read_RHT03_DataEv+0x2a>
    1528:	35 95       	asr	r19
    152a:	27 95       	ror	r18
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <_ZN5RHT0315Read_RHT03_DataEv+0x26>
    1530:	20 ff       	sbrs	r18, 0
    1532:	f6 cf       	rjmp	.-20     	; 0x1520 <_ZN5RHT0315Read_RHT03_DataEv+0x1e>
    delayMicroseconds(40);
    1534:	88 e2       	ldi	r24, 0x28	; 40
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>

    if(PIND & (1 << RHT03_Pin)){  //if pin still '1' after 40usec that it's '1'
    153c:	29 b1       	in	r18, 0x09	; 9
    153e:	f7 01       	movw	r30, r14
    1540:	40 81       	ld	r20, Z
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	04 2e       	mov	r0, r20
    1546:	02 c0       	rjmp	.+4      	; 0x154c <_ZN5RHT0315Read_RHT03_DataEv+0x4a>
    1548:	35 95       	asr	r19
    154a:	27 95       	ror	r18
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <_ZN5RHT0315Read_RHT03_DataEv+0x46>
    1550:	20 ff       	sbrs	r18, 0
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <_ZN5RHT0315Read_RHT03_DataEv+0x62>
      result |= (1 << (7 - i));
    1554:	c8 01       	movw	r24, r16
    1556:	0c 2e       	mov	r0, r28
    1558:	02 c0       	rjmp	.+4      	; 0x155e <_ZN5RHT0315Read_RHT03_DataEv+0x5c>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <_ZN5RHT0315Read_RHT03_DataEv+0x58>
    1562:	d8 2a       	or	r13, r24
    1564:	c8 01       	movw	r24, r16
    1566:	02 c0       	rjmp	.+4      	; 0x156c <_ZN5RHT0315Read_RHT03_DataEv+0x6a>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	4a 95       	dec	r20
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <_ZN5RHT0315Read_RHT03_DataEv+0x66>
    1570:	ac 01       	movw	r20, r24
    }
    while(PIND & (1 << RHT03_Pin));    //wait for next bit
    1572:	29 b1       	in	r18, 0x09	; 9
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	24 23       	and	r18, r20
    1578:	35 23       	and	r19, r21
    157a:	21 15       	cp	r18, r1
    157c:	31 05       	cpc	r19, r1
    157e:	c9 f7       	brne	.-14     	; 0x1572 <_ZN5RHT0315Read_RHT03_DataEv+0x70>
    1580:	21 97       	sbiw	r28, 0x01	; 1
}

uint8_t RHT03::Read_RHT03_Data(){
  uint8_t result = 0;

  for(int i = 0; i < 8; i++){
    1582:	9f ef       	ldi	r25, 0xFF	; 255
    1584:	cf 3f       	cpi	r28, 0xFF	; 255
    1586:	d9 07       	cpc	r29, r25
    1588:	49 f6       	brne	.-110    	; 0x151c <_ZN5RHT0315Read_RHT03_DataEv+0x1a>
      result |= (1 << (7 - i));
    }
    while(PIND & (1 << RHT03_Pin));    //wait for next bit
  }
  return result;
}
    158a:	8d 2d       	mov	r24, r13
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	08 95       	ret

0000159c <_ZN5RHT038updateTHEv>:
}

/******************************************************************
 *	Update current temperature & humidity
 */
void RHT03::updateTH(){
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	ec 01       	movw	r28, r24
  for (int x = 0; x < 5; x++){
    RHT03_Data[x] = 0;
    15aa:	19 82       	std	Y+1, r1	; 0x01
    15ac:	1a 82       	std	Y+2, r1	; 0x02
    15ae:	1b 82       	std	Y+3, r1	; 0x03
    15b0:	1c 82       	std	Y+4, r1	; 0x04
    15b2:	1d 82       	std	Y+5, r1	; 0x05
  }

  PORTD &= ~(1 << RHT03_Pin); //RHT03Pin LOW
    15b4:	2b b1       	in	r18, 0x0b	; 11
    15b6:	01 e0       	ldi	r16, 0x01	; 1
    15b8:	10 e0       	ldi	r17, 0x00	; 0
    15ba:	c8 01       	movw	r24, r16
    15bc:	08 80       	ld	r0, Y
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <_ZN5RHT038updateTHEv+0x28>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <_ZN5RHT038updateTHEv+0x24>
    15c8:	80 95       	com	r24
    15ca:	82 23       	and	r24, r18
    15cc:	8b b9       	out	0x0b, r24	; 11
  delay(30);
    15ce:	6e e1       	ldi	r22, 0x1E	; 30
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <delay>
  PORTD |= (1 << RHT03_Pin);  //RHT03Pin HIGH
    15da:	2b b1       	in	r18, 0x0b	; 11
    15dc:	c8 01       	movw	r24, r16
    15de:	08 80       	ld	r0, Y
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <_ZN5RHT038updateTHEv+0x4a>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <_ZN5RHT038updateTHEv+0x46>
    15ea:	28 2b       	or	r18, r24
    15ec:	2b b9       	out	0x0b, r18	; 11
  delayMicroseconds(40);
    15ee:	88 e2       	ldi	r24, 0x28	; 40
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>
  DDRD &= ~(1 << RHT03_Pin);  //RHT03Pin as input
    15f6:	8a b1       	in	r24, 0x0a	; 10
    15f8:	08 80       	ld	r0, Y
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <_ZN5RHT038updateTHEv+0x64>
    15fc:	00 0f       	add	r16, r16
    15fe:	11 1f       	adc	r17, r17
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <_ZN5RHT038updateTHEv+0x60>
    1604:	00 95       	com	r16
    1606:	08 23       	and	r16, r24
    1608:	0a b9       	out	0x0a, r16	; 10
  delayMicroseconds(40);
    160a:	88 e2       	ldi	r24, 0x28	; 40
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>

  //Sensor response check
  if (PIND & (1 << RHT03_Pin)){
    1612:	89 b1       	in	r24, 0x09	; 9
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	08 80       	ld	r0, Y
    1618:	02 c0       	rjmp	.+4      	; 0x161e <_ZN5RHT038updateTHEv+0x82>
    161a:	95 95       	asr	r25
    161c:	87 95       	ror	r24
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <_ZN5RHT038updateTHEv+0x7e>
    1622:	80 ff       	sbrs	r24, 0
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <_ZN5RHT038updateTHEv+0x94>
    Serial.println("RHT03: Response Check 1 Error"); 
    1626:	8c e7       	ldi	r24, 0x7C	; 124
    1628:	94 e0       	ldi	r25, 0x04	; 4
    162a:	63 e2       	ldi	r22, 0x23	; 35
    162c:	71 e0       	ldi	r23, 0x01	; 1
    162e:	12 c0       	rjmp	.+36     	; 0x1654 <_ZN5RHT038updateTHEv+0xb8>
    return;
  }
  delayMicroseconds(80);
    1630:	80 e5       	ldi	r24, 0x50	; 80
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>
  if (!(PIND & (1 << RHT03_Pin))){
    1638:	89 b1       	in	r24, 0x09	; 9
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	08 80       	ld	r0, Y
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <_ZN5RHT038updateTHEv+0xa8>
    1640:	95 95       	asr	r25
    1642:	87 95       	ror	r24
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <_ZN5RHT038updateTHEv+0xa4>
    1648:	80 fd       	sbrc	r24, 0
    164a:	07 c0       	rjmp	.+14     	; 0x165a <_ZN5RHT038updateTHEv+0xbe>
    Serial.println("RHT03: Response Check 2 Error"); 
    164c:	8c e7       	ldi	r24, 0x7C	; 124
    164e:	94 e0       	ldi	r25, 0x04	; 4
    1650:	61 e4       	ldi	r22, 0x41	; 65
    1652:	71 e0       	ldi	r23, 0x01	; 1
    1654:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_ZN5Print7printlnEPKc>
    return;
    1658:	59 c0       	rjmp	.+178    	; 0x170c <_ZN5RHT038updateTHEv+0x170>
  }

  delayMicroseconds(80);  
    165a:	80 e5       	ldi	r24, 0x50	; 80
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 1e 1b 	call	0x363c	; 0x363c <delayMicroseconds>
}

/******************************************************************
 *	Update current temperature & humidity
 */
void RHT03::updateTH(){
    1662:	8e 01       	movw	r16, r28
    1664:	0f 5f       	subi	r16, 0xFF	; 255
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	56 e0       	ldi	r21, 0x06	; 6
    166a:	e5 2e       	mov	r14, r21
    166c:	f1 2c       	mov	r15, r1
    166e:	ec 0e       	add	r14, r28
    1670:	fd 1e       	adc	r15, r29
    return;
  }

  delayMicroseconds(80);  
  for(int i = 0; i < 5; i++){
    RHT03_Data[i] = Read_RHT03_Data();
    1672:	ce 01       	movw	r24, r28
    1674:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN5RHT0315Read_RHT03_DataEv>
    1678:	f8 01       	movw	r30, r16
    167a:	81 93       	st	Z+, r24
    167c:	8f 01       	movw	r16, r30
    Serial.println("RHT03: Response Check 2 Error"); 
    return;
  }

  delayMicroseconds(80);  
  for(int i = 0; i < 5; i++){
    167e:	ee 15       	cp	r30, r14
    1680:	ff 05       	cpc	r31, r15
    1682:	b9 f7       	brne	.-18     	; 0x1672 <_ZN5RHT038updateTHEv+0xd6>
    RHT03_Data[i] = Read_RHT03_Data();
  }

  DDRD |= (1 << RHT03_Pin);    //RHT03Pin as output  
    1684:	4a b1       	in	r20, 0x0a	; 10
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9c 01       	movw	r18, r24
    168c:	08 80       	ld	r0, Y
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <_ZN5RHT038updateTHEv+0xf8>
    1690:	22 0f       	add	r18, r18
    1692:	33 1f       	adc	r19, r19
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <_ZN5RHT038updateTHEv+0xf4>
    1698:	42 2b       	or	r20, r18
    169a:	4a b9       	out	0x0a, r20	; 10
  PORTD |= (1 << RHT03_Pin);    //RH03Pin HIGH   
    169c:	2b b1       	in	r18, 0x0b	; 11
    169e:	08 80       	ld	r0, Y
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <_ZN5RHT038updateTHEv+0x10a>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <_ZN5RHT038updateTHEv+0x106>
    16aa:	28 2b       	or	r18, r24
    16ac:	2b b9       	out	0x0b, r18	; 11


  //Check Sum, sometimes check sum bigger than 8 bit so we multiply it by B11111111
  if (RHT03_Data[4] != ((RHT03_Data[0] + RHT03_Data[1] + RHT03_Data[2] + RHT03_Data[3]) & 0xFF)){
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	2a 81       	ldd	r18, Y+2	; 0x02
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	eb 81       	ldd	r30, Y+3	; 0x03
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	0c 81       	ldd	r16, Y+4	; 0x04
    16bc:	10 e0       	ldi	r17, 0x00	; 0
    16be:	b9 01       	movw	r22, r18
    16c0:	68 0f       	add	r22, r24
    16c2:	79 1f       	adc	r23, r25
    16c4:	6e 0f       	add	r22, r30
    16c6:	7f 1f       	adc	r23, r31
    16c8:	60 0f       	add	r22, r16
    16ca:	71 1f       	adc	r23, r17
    16cc:	ad 81       	ldd	r26, Y+5	; 0x05
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ab 01       	movw	r20, r22
    16d2:	50 70       	andi	r21, 0x00	; 0
    16d4:	a4 17       	cp	r26, r20
    16d6:	b5 07       	cpc	r27, r21
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <_ZN5RHT038updateTHEv+0x14c>
    Serial.println(RHT03_Data[0] + RHT03_Data[1] + RHT03_Data[2] + RHT03_Data[3], BIN);
    16da:	8c e7       	ldi	r24, 0x7C	; 124
    16dc:	94 e0       	ldi	r25, 0x04	; 4
    16de:	42 e0       	ldi	r20, 0x02	; 2
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <_ZN5Print7printlnEii>
    return;
    16e6:	12 c0       	rjmp	.+36     	; 0x170c <_ZN5RHT038updateTHEv+0x170>
  } 
  else{
    humidity = (((RHT03_Data[0] << 8) | RHT03_Data[1]) / 10);
    16e8:	98 2f       	mov	r25, r24
    16ea:	88 27       	eor	r24, r24
    16ec:	82 2b       	or	r24, r18
    16ee:	93 2b       	or	r25, r19
    16f0:	2a e0       	ldi	r18, 0x0A	; 10
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	b9 01       	movw	r22, r18
    16f6:	0e 94 43 1c 	call	0x3886	; 0x3886 <__divmodhi4>
    16fa:	6f 83       	std	Y+7, r22	; 0x07
    temperature = (((RHT03_Data[2] << 8) | RHT03_Data[3]) / 10);
    16fc:	9e 2f       	mov	r25, r30
    16fe:	88 27       	eor	r24, r24
    1700:	80 2b       	or	r24, r16
    1702:	91 2b       	or	r25, r17
    1704:	b9 01       	movw	r22, r18
    1706:	0e 94 43 1c 	call	0x3886	; 0x3886 <__divmodhi4>
    170a:	6e 83       	std	Y+6, r22	; 0x06
  }
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	08 95       	ret

0000171a <_ZN5RHT0311getHumidityEv>:
    while(PIND & (1 << RHT03_Pin));    //wait for next bit
  }
  return result;
}

String RHT03::getHumidity(){
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	2e 97       	sbiw	r28, 0x0e	; 14
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	5c 01       	movw	r10, r24
    1740:	6b 01       	movw	r12, r22
  updateTH();
    1742:	cb 01       	movw	r24, r22
    1744:	0e 94 ce 0a 	call	0x159c	; 0x159c <_ZN5RHT038updateTHEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1748:	68 e0       	ldi	r22, 0x08	; 8
    174a:	e6 2e       	mov	r14, r22
    174c:	f1 2c       	mov	r15, r1
    174e:	ec 0e       	add	r14, r28
    1750:	fd 1e       	adc	r15, r29
    1752:	c7 01       	movw	r24, r14
    1754:	6f e5       	ldi	r22, 0x5F	; 95
    1756:	71 e0       	ldi	r23, 0x01	; 1
    1758:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
  return("H:" + String(humidity, DEC) + "%");
    175c:	8e 01       	movw	r16, r28
    175e:	0f 5f       	subi	r16, 0xFF	; 255
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	c8 01       	movw	r24, r16
    1764:	f6 01       	movw	r30, r12
    1766:	67 81       	ldd	r22, Z+7	; 0x07
    1768:	4a e0       	ldi	r20, 0x0A	; 10
    176a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN6StringC1Ehh>
    176e:	c7 01       	movw	r24, r14
    1770:	b8 01       	movw	r22, r16
    1772:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZplRK15StringSumHelperRK6String>
    1776:	62 e6       	ldi	r22, 0x62	; 98
    1778:	71 e0       	ldi	r23, 0x01	; 1
    177a:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZplRK15StringSumHelperPKc>
    177e:	bc 01       	movw	r22, r24
    1780:	c5 01       	movw	r24, r10
    1782:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN6StringC1ERKS_>
    1786:	c8 01       	movw	r24, r16
    1788:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    178c:	c7 01       	movw	r24, r14
    178e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
}
    1792:	c5 01       	movw	r24, r10
    1794:	2e 96       	adiw	r28, 0x0e	; 14
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	08 95       	ret

000017b6 <_ZN5RHT0314getTemperatureEv>:

String RHT03::getTemperature(){
    17b6:	af 92       	push	r10
    17b8:	bf 92       	push	r11
    17ba:	cf 92       	push	r12
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	2e 97       	sbiw	r28, 0x0e	; 14
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	5c 01       	movw	r10, r24
    17dc:	6b 01       	movw	r12, r22
  updateTH();
    17de:	cb 01       	movw	r24, r22
    17e0:	0e 94 ce 0a 	call	0x159c	; 0x159c <_ZN5RHT038updateTHEv>
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    17e4:	78 e0       	ldi	r23, 0x08	; 8
    17e6:	e7 2e       	mov	r14, r23
    17e8:	f1 2c       	mov	r15, r1
    17ea:	ec 0e       	add	r14, r28
    17ec:	fd 1e       	adc	r15, r29
    17ee:	c7 01       	movw	r24, r14
    17f0:	64 e6       	ldi	r22, 0x64	; 100
    17f2:	71 e0       	ldi	r23, 0x01	; 1
    17f4:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>

  return("T:" + String(temperature, DEC) + "C");
    17f8:	8e 01       	movw	r16, r28
    17fa:	0f 5f       	subi	r16, 0xFF	; 255
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	c8 01       	movw	r24, r16
    1800:	f6 01       	movw	r30, r12
    1802:	66 81       	ldd	r22, Z+6	; 0x06
    1804:	4a e0       	ldi	r20, 0x0A	; 10
    1806:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN6StringC1Ehh>
    180a:	c7 01       	movw	r24, r14
    180c:	b8 01       	movw	r22, r16
    180e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZplRK15StringSumHelperRK6String>
    1812:	67 e6       	ldi	r22, 0x67	; 103
    1814:	71 e0       	ldi	r23, 0x01	; 1
    1816:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZplRK15StringSumHelperPKc>
    181a:	bc 01       	movw	r22, r24
    181c:	c5 01       	movw	r24, r10
    181e:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN6StringC1ERKS_>
    1822:	c8 01       	movw	r24, r16
    1824:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    1828:	c7 01       	movw	r24, r14
    182a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
}
    182e:	c5 01       	movw	r24, r10
    1830:	2e 96       	adiw	r28, 0x0e	; 14
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	cf 90       	pop	r12
    184c:	bf 90       	pop	r11
    184e:	af 90       	pop	r10
    1850:	08 95       	ret

00001852 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1852:	dc 01       	movw	r26, r24
    1854:	ed 91       	ld	r30, X+
    1856:	fc 91       	ld	r31, X
    1858:	01 90       	ld	r0, Z+
    185a:	f0 81       	ld	r31, Z
    185c:	e0 2d       	mov	r30, r0
    185e:	09 95       	icall
    1860:	08 95       	ret

00001862 <_ZN6RTClibC1Ev>:
*Writen for DS1307 RTC 
*/
#include "RTClib.h"
#include "/home/semion/Dropbox/Hobby/Electronics/arduino-1.0.3/libraries/Wire/Wire.h"

RTClib::RTClib(){ //constructor
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	ec 01       	movw	r28, r24
    186c:	09 e6       	ldi	r16, 0x69	; 105
    186e:	11 e0       	ldi	r17, 0x01	; 1
    1870:	b8 01       	movw	r22, r16
    1872:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1876:	ce 01       	movw	r24, r28
    1878:	07 96       	adiw	r24, 0x07	; 7
    187a:	b8 01       	movw	r22, r16
    187c:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
	Wire.begin();
    1880:	88 ea       	ldi	r24, 0xA8	; 168
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 32 04 	call	0x864	; 0x864 <_ZN7TwoWire5beginEv>
}
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	08 95       	ret

00001892 <_ZN6RTClib3nowEv>:

/******************************************************************
 *	Update to current time
 */
void RTClib::now(){
    1892:	ff 92       	push	r15
    1894:	0f 93       	push	r16
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	8c 01       	movw	r16, r24
  Wire.beginTransmission(DS1307_ADDRESS);
    189e:	c8 ea       	ldi	r28, 0xA8	; 168
    18a0:	d2 e0       	ldi	r29, 0x02	; 2
    18a2:	ce 01       	movw	r24, r28
    18a4:	68 e6       	ldi	r22, 0x68	; 104
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0);
    18ac:	ce 01       	movw	r24, r28
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(); 
    18b6:	ce 01       	movw	r24, r28
    18b8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(DS1307_ADDRESS,7);
    18bc:	ce 01       	movw	r24, r28
    18be:	68 e6       	ldi	r22, 0x68	; 104
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	47 e0       	ldi	r20, 0x07	; 7
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN7TwoWire11requestFromEii>
  ss = bcd2dec(Wire.read() & 0x7F);
    18ca:	ce 01       	movw	r24, r28
    18cc:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN7TwoWire4readEv>
    18d0:	8f 77       	andi	r24, 0x7F	; 127

/******************************************************************
 *	Convert BCD to Binary
 */
uint8_t RTClib::bcd2dec(uint8_t val){
  return val - 6 * (val >> 4);  
    18d2:	98 2f       	mov	r25, r24
    18d4:	92 95       	swap	r25
    18d6:	9f 70       	andi	r25, 0x0F	; 15
    18d8:	2a ef       	ldi	r18, 0xFA	; 250
    18da:	f2 2e       	mov	r15, r18
    18dc:	9f 9d       	mul	r25, r15
    18de:	90 2d       	mov	r25, r0
    18e0:	11 24       	eor	r1, r1
    18e2:	98 0f       	add	r25, r24
void RTClib::now(){
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(0);
  Wire.endTransmission(); 
  Wire.requestFrom(DS1307_ADDRESS,7);
  ss = bcd2dec(Wire.read() & 0x7F);
    18e4:	f8 01       	movw	r30, r16
    18e6:	92 8f       	std	Z+26, r25	; 0x1a
  mm = bcd2dec(Wire.read());
    18e8:	ce 01       	movw	r24, r28
    18ea:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN7TwoWire4readEv>

/******************************************************************
 *	Convert BCD to Binary
 */
uint8_t RTClib::bcd2dec(uint8_t val){
  return val - 6 * (val >> 4);  
    18ee:	98 2f       	mov	r25, r24
    18f0:	92 95       	swap	r25
    18f2:	9f 70       	andi	r25, 0x0F	; 15
    18f4:	9f 9d       	mul	r25, r15
    18f6:	90 2d       	mov	r25, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	98 0f       	add	r25, r24
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(0);
  Wire.endTransmission(); 
  Wire.requestFrom(DS1307_ADDRESS,7);
  ss = bcd2dec(Wire.read() & 0x7F);
  mm = bcd2dec(Wire.read());
    18fc:	f8 01       	movw	r30, r16
    18fe:	91 8f       	std	Z+25, r25	; 0x19
  hh = bcd2dec(Wire.read());
    1900:	ce 01       	movw	r24, r28
    1902:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN7TwoWire4readEv>

/******************************************************************
 *	Convert BCD to Binary
 */
uint8_t RTClib::bcd2dec(uint8_t val){
  return val - 6 * (val >> 4);  
    1906:	98 2f       	mov	r25, r24
    1908:	92 95       	swap	r25
    190a:	9f 70       	andi	r25, 0x0F	; 15
    190c:	9f 9d       	mul	r25, r15
    190e:	90 2d       	mov	r25, r0
    1910:	11 24       	eor	r1, r1
    1912:	98 0f       	add	r25, r24
  Wire.write(0);
  Wire.endTransmission(); 
  Wire.requestFrom(DS1307_ADDRESS,7);
  ss = bcd2dec(Wire.read() & 0x7F);
  mm = bcd2dec(Wire.read());
  hh = bcd2dec(Wire.read());
    1914:	f8 01       	movw	r30, r16
    1916:	90 8f       	std	Z+24, r25	; 0x18
  Wire.read();
    1918:	ce 01       	movw	r24, r28
    191a:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN7TwoWire4readEv>
  d = bcd2dec(Wire.read());
    191e:	ce 01       	movw	r24, r28
    1920:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN7TwoWire4readEv>

/******************************************************************
 *	Convert BCD to Binary
 */
uint8_t RTClib::bcd2dec(uint8_t val){
  return val - 6 * (val >> 4);  
    1924:	98 2f       	mov	r25, r24
    1926:	92 95       	swap	r25
    1928:	9f 70       	andi	r25, 0x0F	; 15
    192a:	9f 9d       	mul	r25, r15
    192c:	90 2d       	mov	r25, r0
    192e:	11 24       	eor	r1, r1
    1930:	98 0f       	add	r25, r24
  Wire.requestFrom(DS1307_ADDRESS,7);
  ss = bcd2dec(Wire.read() & 0x7F);
  mm = bcd2dec(Wire.read());
  hh = bcd2dec(Wire.read());
  Wire.read();
  d = bcd2dec(Wire.read());
    1932:	f8 01       	movw	r30, r16
    1934:	97 8b       	std	Z+23, r25	; 0x17
  m = bcd2dec(Wire.read());
    1936:	ce 01       	movw	r24, r28
    1938:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN7TwoWire4readEv>

/******************************************************************
 *	Convert BCD to Binary
 */
uint8_t RTClib::bcd2dec(uint8_t val){
  return val - 6 * (val >> 4);  
    193c:	98 2f       	mov	r25, r24
    193e:	92 95       	swap	r25
    1940:	9f 70       	andi	r25, 0x0F	; 15
    1942:	9f 9d       	mul	r25, r15
    1944:	90 2d       	mov	r25, r0
    1946:	11 24       	eor	r1, r1
    1948:	98 0f       	add	r25, r24
  ss = bcd2dec(Wire.read() & 0x7F);
  mm = bcd2dec(Wire.read());
  hh = bcd2dec(Wire.read());
  Wire.read();
  d = bcd2dec(Wire.read());
  m = bcd2dec(Wire.read());
    194a:	f8 01       	movw	r30, r16
    194c:	96 8b       	std	Z+22, r25	; 0x16
  y = bcd2dec(Wire.read()) + 2000;
    194e:	ce 01       	movw	r24, r28
    1950:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN7TwoWire4readEv>

/******************************************************************
 *	Convert BCD to Binary
 */
uint8_t RTClib::bcd2dec(uint8_t val){
  return val - 6 * (val >> 4);  
    1954:	98 2f       	mov	r25, r24
    1956:	92 95       	swap	r25
    1958:	9f 70       	andi	r25, 0x0F	; 15
    195a:	9f 9d       	mul	r25, r15
    195c:	f0 2c       	mov	r15, r0
    195e:	11 24       	eor	r1, r1
    1960:	f8 0e       	add	r15, r24
  mm = bcd2dec(Wire.read());
  hh = bcd2dec(Wire.read());
  Wire.read();
  d = bcd2dec(Wire.read());
  m = bcd2dec(Wire.read());
  y = bcd2dec(Wire.read()) + 2000;
    1962:	8f 2d       	mov	r24, r15
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	80 53       	subi	r24, 0x30	; 48
    1968:	98 4f       	sbci	r25, 0xF8	; 248
    196a:	f8 01       	movw	r30, r16
    196c:	95 8b       	std	Z+21, r25	; 0x15
    196e:	84 8b       	std	Z+20, r24	; 0x14
}
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	08 95       	ret

0000197c <_ZN6RTClib11timeChangedEv>:

/******************************************************************
 *	Check if current minute changed
 */
boolean RTClib::timeChanged(){
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	ec 01       	movw	r28, r24
	now();
    1982:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN6RTClib3nowEv>
	if (pmm != mm){
    1986:	89 8d       	ldd	r24, Y+25	; 0x19
    1988:	9b 8d       	ldd	r25, Y+27	; 0x1b
    198a:	98 17       	cp	r25, r24
    198c:	19 f0       	breq	.+6      	; 0x1994 <_ZN6RTClib11timeChangedEv+0x18>
		pmm = mm;
    198e:	8b 8f       	std	Y+27, r24	; 0x1b
		return true;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <_ZN6RTClib11timeChangedEv+0x1a>
	}
	else{
		return false;
    1994:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <_ZN6RTClib9writeTimeEjhhhhh>:


/******************************************************************
 *	Write time to RTC Chip
 */
 void RTClib::writeTime(uint16_t y, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
    199c:	af 92       	push	r10
    199e:	bf 92       	push	r11
    19a0:	cf 92       	push	r12
    19a2:	ef 92       	push	r14
    19a4:	ff 92       	push	r15
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <_ZN6RTClib9writeTimeEjhhhhh+0x14>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	16 2f       	mov	r17, r22
	Wire.beginTransmission(DS1307_ADDRESS);
    19b6:	58 ea       	ldi	r21, 0xA8	; 168
    19b8:	a5 2e       	mov	r10, r21
    19ba:	52 e0       	ldi	r21, 0x02	; 2
    19bc:	b5 2e       	mov	r11, r21
    19be:	c5 01       	movw	r24, r10
    19c0:	68 e6       	ldi	r22, 0x68	; 104
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	29 83       	std	Y+1, r18	; 0x01
    19c6:	4a 83       	std	Y+2, r20	; 0x02
    19c8:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0);
    19cc:	c5 01       	movw	r24, r10
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN7TwoWire5writeEi>
}
/******************************************************************
 *	Convert Binary to BCD
 */
uint8_t RTClib::dec2bcd(uint8_t val){
  return val + 6 * (val / 10); 
    19d6:	3a e0       	ldi	r19, 0x0A	; 10
    19d8:	f3 2e       	mov	r15, r19
    19da:	8c 2d       	mov	r24, r12
    19dc:	6f 2d       	mov	r22, r15
    19de:	0e 94 37 1c 	call	0x386e	; 0x386e <__udivmodqi4>
    19e2:	68 2f       	mov	r22, r24
    19e4:	66 0f       	add	r22, r22
    19e6:	68 0f       	add	r22, r24
    19e8:	66 0f       	add	r22, r22
    19ea:	6c 0d       	add	r22, r12
 *	Write time to RTC Chip
 */
 void RTClib::writeTime(uint16_t y, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
	Wire.beginTransmission(DS1307_ADDRESS);
	Wire.write(0);
	Wire.write(dec2bcd(ss));			//sec
    19ec:	c5 01       	movw	r24, r10
    19ee:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire5writeEh>
}
/******************************************************************
 *	Convert Binary to BCD
 */
uint8_t RTClib::dec2bcd(uint8_t val){
  return val + 6 * (val / 10); 
    19f2:	8e 2d       	mov	r24, r14
    19f4:	6f 2d       	mov	r22, r15
    19f6:	0e 94 37 1c 	call	0x386e	; 0x386e <__udivmodqi4>
    19fa:	68 2f       	mov	r22, r24
    19fc:	66 0f       	add	r22, r22
    19fe:	68 0f       	add	r22, r24
    1a00:	66 0f       	add	r22, r22
    1a02:	6e 0d       	add	r22, r14
 */
 void RTClib::writeTime(uint16_t y, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
	Wire.beginTransmission(DS1307_ADDRESS);
	Wire.write(0);
	Wire.write(dec2bcd(ss));			//sec
	Wire.write(dec2bcd(mm));			//min
    1a04:	c5 01       	movw	r24, r10
    1a06:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire5writeEh>
}
/******************************************************************
 *	Convert Binary to BCD
 */
uint8_t RTClib::dec2bcd(uint8_t val){
  return val + 6 * (val / 10); 
    1a0a:	80 2f       	mov	r24, r16
    1a0c:	6f 2d       	mov	r22, r15
    1a0e:	0e 94 37 1c 	call	0x386e	; 0x386e <__udivmodqi4>
    1a12:	68 2f       	mov	r22, r24
    1a14:	66 0f       	add	r22, r22
    1a16:	68 0f       	add	r22, r24
    1a18:	66 0f       	add	r22, r22
    1a1a:	60 0f       	add	r22, r16
 void RTClib::writeTime(uint16_t y, uint8_t m, uint8_t d, uint8_t hh, uint8_t mm, uint8_t ss){
	Wire.beginTransmission(DS1307_ADDRESS);
	Wire.write(0);
	Wire.write(dec2bcd(ss));			//sec
	Wire.write(dec2bcd(mm));			//min
	Wire.write(dec2bcd(hh));			//hour
    1a1c:	c5 01       	movw	r24, r10
    1a1e:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire5writeEh>
	Wire.write(dec2bcd(0));			//day of week
    1a22:	c5 01       	movw	r24, r10
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire5writeEh>
}
/******************************************************************
 *	Convert Binary to BCD
 */
uint8_t RTClib::dec2bcd(uint8_t val){
  return val + 6 * (val / 10); 
    1a2a:	29 81       	ldd	r18, Y+1	; 0x01
    1a2c:	82 2f       	mov	r24, r18
    1a2e:	6f 2d       	mov	r22, r15
    1a30:	0e 94 37 1c 	call	0x386e	; 0x386e <__udivmodqi4>
    1a34:	68 2f       	mov	r22, r24
    1a36:	66 0f       	add	r22, r22
    1a38:	68 0f       	add	r22, r24
    1a3a:	66 0f       	add	r22, r22
    1a3c:	62 0f       	add	r22, r18
	Wire.write(0);
	Wire.write(dec2bcd(ss));			//sec
	Wire.write(dec2bcd(mm));			//min
	Wire.write(dec2bcd(hh));			//hour
	Wire.write(dec2bcd(0));			//day of week
	Wire.write(dec2bcd(d));			//day
    1a3e:	c5 01       	movw	r24, r10
    1a40:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire5writeEh>
}
/******************************************************************
 *	Convert Binary to BCD
 */
uint8_t RTClib::dec2bcd(uint8_t val){
  return val + 6 * (val / 10); 
    1a44:	4a 81       	ldd	r20, Y+2	; 0x02
    1a46:	84 2f       	mov	r24, r20
    1a48:	6f 2d       	mov	r22, r15
    1a4a:	0e 94 37 1c 	call	0x386e	; 0x386e <__udivmodqi4>
    1a4e:	68 2f       	mov	r22, r24
    1a50:	66 0f       	add	r22, r22
    1a52:	68 0f       	add	r22, r24
    1a54:	66 0f       	add	r22, r22
    1a56:	64 0f       	add	r22, r20
	Wire.write(dec2bcd(ss));			//sec
	Wire.write(dec2bcd(mm));			//min
	Wire.write(dec2bcd(hh));			//hour
	Wire.write(dec2bcd(0));			//day of week
	Wire.write(dec2bcd(d));			//day
	Wire.write(dec2bcd(m));			//month
    1a58:	c5 01       	movw	r24, r10
    1a5a:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire5writeEh>
	Wire.write(dec2bcd(y - 2000));	//year
    1a5e:	10 5d       	subi	r17, 0xD0	; 208
}
/******************************************************************
 *	Convert Binary to BCD
 */
uint8_t RTClib::dec2bcd(uint8_t val){
  return val + 6 * (val / 10); 
    1a60:	81 2f       	mov	r24, r17
    1a62:	6f 2d       	mov	r22, r15
    1a64:	0e 94 37 1c 	call	0x386e	; 0x386e <__udivmodqi4>
    1a68:	68 2f       	mov	r22, r24
    1a6a:	66 0f       	add	r22, r22
    1a6c:	68 0f       	add	r22, r24
    1a6e:	66 0f       	add	r22, r22
    1a70:	61 0f       	add	r22, r17
	Wire.write(dec2bcd(mm));			//min
	Wire.write(dec2bcd(hh));			//hour
	Wire.write(dec2bcd(0));			//day of week
	Wire.write(dec2bcd(d));			//day
	Wire.write(dec2bcd(m));			//month
	Wire.write(dec2bcd(y - 2000));	//year
    1a72:	c5 01       	movw	r24, r10
    1a74:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire5writeEh>
	Wire.write(0);
    1a78:	c5 01       	movw	r24, r10
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	0e 94 29 0c 	call	0x1852	; 0x1852 <_ZN7TwoWire5writeEi>
	Wire.endTransmission(); 
    1a82:	c5 01       	movw	r24, r10
    1a84:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7TwoWire15endTransmissionEv>
 }
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	08 95       	ret

00001aa0 <_ZN6RTClib7setTimeE6String>:
}

/******************************************************************
 *	Set time from string. Time Format: "c: dd/mm/yyyy hh:mm:ss PM" <-(or AM) 
 */
void RTClib::setTime(String _serIn){
    1aa0:	6f 92       	push	r6
    1aa2:	7f 92       	push	r7
    1aa4:	8f 92       	push	r8
    1aa6:	9f 92       	push	r9
    1aa8:	af 92       	push	r10
    1aaa:	bf 92       	push	r11
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	c9 56       	subi	r28, 0x69	; 105
    1ac2:	d0 40       	sbci	r29, 0x00	; 0
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	6c 01       	movw	r12, r24
	serIn = _serIn;
    1ad0:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
	lastData = 3;	 //Starts from 3 because my time data starts after "c: "
    1ad4:	b3 e0       	ldi	r27, 0x03	; 3
    1ad6:	8b 2e       	mov	r8, r27
    1ad8:	f6 01       	movw	r30, r12
    1ada:	83 8a       	std	Z+19, r8	; 0x13

	tempStr = serIn.substring(3, serIn.indexOf("/"));
    1adc:	a7 e0       	ldi	r26, 0x07	; 7
    1ade:	ea 2e       	mov	r14, r26
    1ae0:	f1 2c       	mov	r15, r1
    1ae2:	ec 0c       	add	r14, r12
    1ae4:	fd 1c       	adc	r15, r13
    1ae6:	5e 01       	movw	r10, r28
    1ae8:	08 94       	sec
    1aea:	a1 1c       	adc	r10, r1
    1aec:	b1 1c       	adc	r11, r1
    1aee:	c5 01       	movw	r24, r10
    1af0:	6a e6       	ldi	r22, 0x6A	; 106
    1af2:	71 e0       	ldi	r23, 0x01	; 1
    1af4:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1af8:	c6 01       	movw	r24, r12
    1afa:	b5 01       	movw	r22, r10
    1afc:	0e 94 16 1a 	call	0x342c	; 0x342c <_ZNK6String7indexOfERKS_>
    1b00:	9c 01       	movw	r18, r24
    1b02:	8e 01       	movw	r16, r28
    1b04:	08 5f       	subi	r16, 0xF8	; 248
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	c8 01       	movw	r24, r16
    1b0a:	b6 01       	movw	r22, r12
    1b0c:	43 e0       	ldi	r20, 0x03	; 3
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    1b14:	c7 01       	movw	r24, r14
    1b16:	b8 01       	movw	r22, r16
    1b18:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1b1c:	c8 01       	movw	r24, r16
    1b1e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1b22:	c5 01       	movw	r24, r10
    1b24:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    lastData = serIn.indexOf("/") + 1;
    1b28:	8e 01       	movw	r16, r28
    1b2a:	01 5f       	subi	r16, 0xF1	; 241
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	c8 01       	movw	r24, r16
    1b30:	6a e6       	ldi	r22, 0x6A	; 106
    1b32:	71 e0       	ldi	r23, 0x01	; 1
    1b34:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1b38:	c6 01       	movw	r24, r12
    1b3a:	b8 01       	movw	r22, r16
    1b3c:	0e 94 16 1a 	call	0x342c	; 0x342c <_ZNK6String7indexOfERKS_>
    1b40:	8f 5f       	subi	r24, 0xFF	; 255
    1b42:	f6 01       	movw	r30, r12
    1b44:	83 8b       	std	Z+19, r24	; 0x13
    1b46:	c8 01       	movw	r24, r16
    1b48:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    tempStr.toCharArray(cArray, tempStr.length() + 1);
    1b4c:	fe e0       	ldi	r31, 0x0E	; 14
    1b4e:	af 2e       	mov	r10, r31
    1b50:	b1 2c       	mov	r11, r1
    1b52:	ac 0c       	add	r10, r12
    1b54:	bd 1c       	adc	r11, r13
    1b56:	f6 01       	movw	r30, r12
    1b58:	43 85       	ldd	r20, Z+11	; 0x0b
    1b5a:	54 85       	ldd	r21, Z+12	; 0x0c
    1b5c:	4f 5f       	subi	r20, 0xFF	; 255
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
    1b60:	c7 01       	movw	r24, r14
    1b62:	b5 01       	movw	r22, r10
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZNK6String8getBytesEPhjj>
	d = atoi(cArray);
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1b72:	f6 01       	movw	r30, r12
    1b74:	87 8b       	std	Z+23, r24	; 0x17
	if (d > 31 || d <= 0){
    1b76:	81 50       	subi	r24, 0x01	; 1
    1b78:	8f 31       	cpi	r24, 0x1F	; 31
    1b7a:	28 f0       	brcs	.+10     	; 0x1b86 <_ZN6RTClib7setTimeE6String+0xe6>
			Serial.println("Day Error");
    1b7c:	8c e7       	ldi	r24, 0x7C	; 124
    1b7e:	94 e0       	ldi	r25, 0x04	; 4
    1b80:	6c e6       	ldi	r22, 0x6C	; 108
    1b82:	71 e0       	ldi	r23, 0x01	; 1
    1b84:	59 c1       	rjmp	.+690    	; 0x1e38 <_ZN6RTClib7setTimeE6String+0x398>
			return;
	}  

    
    tempStr = serIn.substring(lastData, serIn.indexOf("/", lastData));
    1b86:	e6 e1       	ldi	r30, 0x16	; 22
    1b88:	6e 2e       	mov	r6, r30
    1b8a:	71 2c       	mov	r7, r1
    1b8c:	6c 0e       	add	r6, r28
    1b8e:	7d 1e       	adc	r7, r29
    1b90:	c3 01       	movw	r24, r6
    1b92:	6a e6       	ldi	r22, 0x6A	; 106
    1b94:	71 e0       	ldi	r23, 0x01	; 1
    1b96:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1b9a:	f6 01       	movw	r30, r12
    1b9c:	93 88       	ldd	r9, Z+19	; 0x13
    1b9e:	c6 01       	movw	r24, r12
    1ba0:	b3 01       	movw	r22, r6
    1ba2:	49 2d       	mov	r20, r9
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZNK6String7indexOfERKS_j>
    1baa:	9c 01       	movw	r18, r24
    1bac:	8e 01       	movw	r16, r28
    1bae:	03 5e       	subi	r16, 0xE3	; 227
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	49 2d       	mov	r20, r9
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    1bbe:	c7 01       	movw	r24, r14
    1bc0:	b8 01       	movw	r22, r16
    1bc2:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1bcc:	c3 01       	movw	r24, r6
    1bce:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	lastData = serIn.indexOf("/", lastData) + 1;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	0c 5d       	subi	r16, 0xDC	; 220
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	c8 01       	movw	r24, r16
    1bda:	6a e6       	ldi	r22, 0x6A	; 106
    1bdc:	71 e0       	ldi	r23, 0x01	; 1
    1bde:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1be2:	f6 01       	movw	r30, r12
    1be4:	43 89       	ldd	r20, Z+19	; 0x13
    1be6:	c6 01       	movw	r24, r12
    1be8:	b8 01       	movw	r22, r16
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZNK6String7indexOfERKS_j>
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	83 8b       	std	Z+19, r24	; 0x13
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    tempStr.toCharArray(cArray, tempStr.length() + 1);
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	43 85       	ldd	r20, Z+11	; 0x0b
    1c00:	54 85       	ldd	r21, Z+12	; 0x0c
    1c02:	4f 5f       	subi	r20, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	c7 01       	movw	r24, r14
    1c08:	b5 01       	movw	r22, r10
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZNK6String8getBytesEPhjj>
	m = atoi(cArray);
    1c12:	c5 01       	movw	r24, r10
    1c14:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1c18:	f6 01       	movw	r30, r12
    1c1a:	86 8b       	std	Z+22, r24	; 0x16
	if (m > 12 || m <= 0){
    1c1c:	81 50       	subi	r24, 0x01	; 1
    1c1e:	8c 30       	cpi	r24, 0x0C	; 12
    1c20:	28 f0       	brcs	.+10     	; 0x1c2c <_ZN6RTClib7setTimeE6String+0x18c>
			Serial.println("Month Error");
    1c22:	8c e7       	ldi	r24, 0x7C	; 124
    1c24:	94 e0       	ldi	r25, 0x04	; 4
    1c26:	66 e7       	ldi	r22, 0x76	; 118
    1c28:	71 e0       	ldi	r23, 0x01	; 1
    1c2a:	06 c1       	rjmp	.+524    	; 0x1e38 <_ZN6RTClib7setTimeE6String+0x398>
			return;
	}  
     
    tempStr = serIn.substring(lastData, lastData + 4);
    1c2c:	f6 01       	movw	r30, r12
    1c2e:	43 89       	ldd	r20, Z+19	; 0x13
    1c30:	8e 01       	movw	r16, r28
    1c32:	05 5d       	subi	r16, 0xD5	; 213
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	24 2f       	mov	r18, r20
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	2c 5f       	subi	r18, 0xFC	; 252
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	c8 01       	movw	r24, r16
    1c40:	b6 01       	movw	r22, r12
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    1c48:	c7 01       	movw	r24, r14
    1c4a:	b8 01       	movw	r22, r16
    1c4c:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1c50:	c8 01       	movw	r24, r16
    1c52:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    lastData += 5;
    1c56:	f6 01       	movw	r30, r12
    1c58:	83 89       	ldd	r24, Z+19	; 0x13
    1c5a:	8b 5f       	subi	r24, 0xFB	; 251
    1c5c:	83 8b       	std	Z+19, r24	; 0x13
    tempStr.toCharArray(cArray, tempStr.length() + 1);
    1c5e:	43 85       	ldd	r20, Z+11	; 0x0b
    1c60:	54 85       	ldd	r21, Z+12	; 0x0c
    1c62:	4f 5f       	subi	r20, 0xFF	; 255
    1c64:	5f 4f       	sbci	r21, 0xFF	; 255
    1c66:	c7 01       	movw	r24, r14
    1c68:	b5 01       	movw	r22, r10
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZNK6String8getBytesEPhjj>
    y = atoi(cArray);
    1c72:	c5 01       	movw	r24, r10
    1c74:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1c78:	9c 01       	movw	r18, r24
    1c7a:	f6 01       	movw	r30, r12
    1c7c:	95 8b       	std	Z+21, r25	; 0x15
    1c7e:	84 8b       	std	Z+20, r24	; 0x14
	if (y > 2099 || y < 2012){
    1c80:	2c 5d       	subi	r18, 0xDC	; 220
    1c82:	37 40       	sbci	r19, 0x07	; 7
    1c84:	28 35       	cpi	r18, 0x58	; 88
    1c86:	31 05       	cpc	r19, r1
    1c88:	28 f0       	brcs	.+10     	; 0x1c94 <_ZN6RTClib7setTimeE6String+0x1f4>
			Serial.println("Year Error");
    1c8a:	8c e7       	ldi	r24, 0x7C	; 124
    1c8c:	94 e0       	ldi	r25, 0x04	; 4
    1c8e:	62 e8       	ldi	r22, 0x82	; 130
    1c90:	71 e0       	ldi	r23, 0x01	; 1
    1c92:	d2 c0       	rjmp	.+420    	; 0x1e38 <_ZN6RTClib7setTimeE6String+0x398>
			return;
	}  
   
    tempStr = serIn.substring(lastData, serIn.indexOf(":", lastData));
    1c94:	72 e3       	ldi	r23, 0x32	; 50
    1c96:	67 2e       	mov	r6, r23
    1c98:	71 2c       	mov	r7, r1
    1c9a:	6c 0e       	add	r6, r28
    1c9c:	7d 1e       	adc	r7, r29
    1c9e:	c3 01       	movw	r24, r6
    1ca0:	6d e8       	ldi	r22, 0x8D	; 141
    1ca2:	71 e0       	ldi	r23, 0x01	; 1
    1ca4:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1ca8:	f6 01       	movw	r30, r12
    1caa:	93 88       	ldd	r9, Z+19	; 0x13
    1cac:	c6 01       	movw	r24, r12
    1cae:	b3 01       	movw	r22, r6
    1cb0:	49 2d       	mov	r20, r9
    1cb2:	50 e0       	ldi	r21, 0x00	; 0
    1cb4:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZNK6String7indexOfERKS_j>
    1cb8:	9c 01       	movw	r18, r24
    1cba:	8e 01       	movw	r16, r28
    1cbc:	07 5c       	subi	r16, 0xC7	; 199
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	b6 01       	movw	r22, r12
    1cc4:	49 2d       	mov	r20, r9
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    1ccc:	c7 01       	movw	r24, r14
    1cce:	b8 01       	movw	r22, r16
    1cd0:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1cda:	c3 01       	movw	r24, r6
    1cdc:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    lastData = serIn.indexOf(":", lastData) + 1;
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	00 5c       	subi	r16, 0xC0	; 192
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	6d e8       	ldi	r22, 0x8D	; 141
    1cea:	71 e0       	ldi	r23, 0x01	; 1
    1cec:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1cf0:	f6 01       	movw	r30, r12
    1cf2:	43 89       	ldd	r20, Z+19	; 0x13
    1cf4:	c6 01       	movw	r24, r12
    1cf6:	b8 01       	movw	r22, r16
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZNK6String7indexOfERKS_j>
    1cfe:	8f 5f       	subi	r24, 0xFF	; 255
    1d00:	f6 01       	movw	r30, r12
    1d02:	83 8b       	std	Z+19, r24	; 0x13
    1d04:	c8 01       	movw	r24, r16
    1d06:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    tempStr.toCharArray(cArray, tempStr.length() + 1);
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	43 85       	ldd	r20, Z+11	; 0x0b
    1d0e:	54 85       	ldd	r21, Z+12	; 0x0c
    1d10:	4f 5f       	subi	r20, 0xFF	; 255
    1d12:	5f 4f       	sbci	r21, 0xFF	; 255
    1d14:	c7 01       	movw	r24, r14
    1d16:	b5 01       	movw	r22, r10
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZNK6String8getBytesEPhjj>
    hh = atoi(cArray);
    1d20:	c5 01       	movw	r24, r10
    1d22:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1d26:	f6 01       	movw	r30, r12
    1d28:	80 8f       	std	Z+24, r24	; 0x18
	if (hh > 24 || hh < 0){
    1d2a:	89 31       	cpi	r24, 0x19	; 25
    1d2c:	28 f0       	brcs	.+10     	; 0x1d38 <_ZN6RTClib7setTimeE6String+0x298>
			Serial.println("Hour Error");
    1d2e:	8c e7       	ldi	r24, 0x7C	; 124
    1d30:	94 e0       	ldi	r25, 0x04	; 4
    1d32:	6f e8       	ldi	r22, 0x8F	; 143
    1d34:	71 e0       	ldi	r23, 0x01	; 1
    1d36:	80 c0       	rjmp	.+256    	; 0x1e38 <_ZN6RTClib7setTimeE6String+0x398>
			return;
	}  
    
    tempStr = serIn.substring(lastData, serIn.indexOf(":", lastData));
    1d38:	67 e4       	ldi	r22, 0x47	; 71
    1d3a:	66 2e       	mov	r6, r22
    1d3c:	71 2c       	mov	r7, r1
    1d3e:	6c 0e       	add	r6, r28
    1d40:	7d 1e       	adc	r7, r29
    1d42:	c3 01       	movw	r24, r6
    1d44:	6d e8       	ldi	r22, 0x8D	; 141
    1d46:	71 e0       	ldi	r23, 0x01	; 1
    1d48:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1d4c:	f6 01       	movw	r30, r12
    1d4e:	93 88       	ldd	r9, Z+19	; 0x13
    1d50:	c6 01       	movw	r24, r12
    1d52:	b3 01       	movw	r22, r6
    1d54:	49 2d       	mov	r20, r9
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZNK6String7indexOfERKS_j>
    1d5c:	9c 01       	movw	r18, r24
    1d5e:	8e 01       	movw	r16, r28
    1d60:	02 5b       	subi	r16, 0xB2	; 178
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
    1d64:	c8 01       	movw	r24, r16
    1d66:	b6 01       	movw	r22, r12
    1d68:	49 2d       	mov	r20, r9
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    1d70:	c7 01       	movw	r24, r14
    1d72:	b8 01       	movw	r22, r16
    1d74:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1d78:	c8 01       	movw	r24, r16
    1d7a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1d7e:	c3 01       	movw	r24, r6
    1d80:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    lastData = serIn.indexOf(":", lastData) + 1;
    1d84:	8e 01       	movw	r16, r28
    1d86:	0b 5a       	subi	r16, 0xAB	; 171
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	6d e8       	ldi	r22, 0x8D	; 141
    1d8e:	71 e0       	ldi	r23, 0x01	; 1
    1d90:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    1d94:	f6 01       	movw	r30, r12
    1d96:	43 89       	ldd	r20, Z+19	; 0x13
    1d98:	c6 01       	movw	r24, r12
    1d9a:	b8 01       	movw	r22, r16
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZNK6String7indexOfERKS_j>
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	f6 01       	movw	r30, r12
    1da6:	83 8b       	std	Z+19, r24	; 0x13
    1da8:	c8 01       	movw	r24, r16
    1daa:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    tempStr.toCharArray(cArray, tempStr.length() + 1);
    1dae:	f6 01       	movw	r30, r12
    1db0:	43 85       	ldd	r20, Z+11	; 0x0b
    1db2:	54 85       	ldd	r21, Z+12	; 0x0c
    1db4:	4f 5f       	subi	r20, 0xFF	; 255
    1db6:	5f 4f       	sbci	r21, 0xFF	; 255
    1db8:	c7 01       	movw	r24, r14
    1dba:	b5 01       	movw	r22, r10
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZNK6String8getBytesEPhjj>
    mm = atoi(cArray);
    1dc4:	c5 01       	movw	r24, r10
    1dc6:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1dca:	f6 01       	movw	r30, r12
    1dcc:	81 8f       	std	Z+25, r24	; 0x19
	if (mm > 60 || mm < 0){
    1dce:	8d 33       	cpi	r24, 0x3D	; 61
    1dd0:	28 f0       	brcs	.+10     	; 0x1ddc <_ZN6RTClib7setTimeE6String+0x33c>
			Serial.println("Mimute Error");
    1dd2:	8c e7       	ldi	r24, 0x7C	; 124
    1dd4:	94 e0       	ldi	r25, 0x04	; 4
    1dd6:	6a e9       	ldi	r22, 0x9A	; 154
    1dd8:	71 e0       	ldi	r23, 0x01	; 1
    1dda:	2e c0       	rjmp	.+92     	; 0x1e38 <_ZN6RTClib7setTimeE6String+0x398>
			return;
	}  
    
    tempStr = serIn.substring(lastData, lastData + 2);
    1ddc:	f6 01       	movw	r30, r12
    1dde:	43 89       	ldd	r20, Z+19	; 0x13
    1de0:	8e 01       	movw	r16, r28
    1de2:	04 5a       	subi	r16, 0xA4	; 164
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	24 2f       	mov	r18, r20
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	2e 5f       	subi	r18, 0xFE	; 254
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	c8 01       	movw	r24, r16
    1df0:	b6 01       	movw	r22, r12
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    1df8:	c7 01       	movw	r24, r14
    1dfa:	b8 01       	movw	r22, r16
    1dfc:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1e00:	c8 01       	movw	r24, r16
    1e02:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    lastData += 3;
    1e06:	f6 01       	movw	r30, r12
    1e08:	83 89       	ldd	r24, Z+19	; 0x13
    1e0a:	8d 5f       	subi	r24, 0xFD	; 253
    1e0c:	83 8b       	std	Z+19, r24	; 0x13
    tempStr.toCharArray(cArray, tempStr.length() + 1);
    1e0e:	43 85       	ldd	r20, Z+11	; 0x0b
    1e10:	54 85       	ldd	r21, Z+12	; 0x0c
    1e12:	4f 5f       	subi	r20, 0xFF	; 255
    1e14:	5f 4f       	sbci	r21, 0xFF	; 255
    1e16:	c7 01       	movw	r24, r14
    1e18:	b5 01       	movw	r22, r10
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	0e 94 cc 19 	call	0x3398	; 0x3398 <_ZNK6String8getBytesEPhjj>
    ss = atoi(cArray);
    1e22:	c5 01       	movw	r24, r10
    1e24:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <atoi>
    1e28:	f6 01       	movw	r30, r12
    1e2a:	82 8f       	std	Z+26, r24	; 0x1a
	if (ss > 60 || ss < 0){
    1e2c:	8d 33       	cpi	r24, 0x3D	; 61
    1e2e:	38 f0       	brcs	.+14     	; 0x1e3e <_ZN6RTClib7setTimeE6String+0x39e>
			Serial.println("Second Error");
    1e30:	8c e7       	ldi	r24, 0x7C	; 124
    1e32:	94 e0       	ldi	r25, 0x04	; 4
    1e34:	67 ea       	ldi	r22, 0xA7	; 167
    1e36:	71 e0       	ldi	r23, 0x01	; 1
    1e38:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <_ZN5Print7printlnEPKc>
			return;
    1e3c:	2d c0       	rjmp	.+90     	; 0x1e98 <_ZN6RTClib7setTimeE6String+0x3f8>
	}  
    
    tempStr = serIn.substring(lastData, lastData + 2);
    1e3e:	f6 01       	movw	r30, r12
    1e40:	43 89       	ldd	r20, Z+19	; 0x13
    1e42:	8e 01       	movw	r16, r28
    1e44:	0d 59       	subi	r16, 0x9D	; 157
    1e46:	1f 4f       	sbci	r17, 0xFF	; 255
    1e48:	24 2f       	mov	r18, r20
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	2e 5f       	subi	r18, 0xFE	; 254
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	c8 01       	movw	r24, r16
    1e52:	b6 01       	movw	r22, r12
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	0e 94 1b 1a 	call	0x3436	; 0x3436 <_ZNK6String9substringEjj>
    1e5a:	c7 01       	movw	r24, r14
    1e5c:	b8 01       	movw	r22, r16
    1e5e:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1e62:	c8 01       	movw	r24, r16
    1e64:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    lastData = 3; //to prepare for next String 
    1e68:	f6 01       	movw	r30, r12
    1e6a:	83 8a       	std	Z+19, r8	; 0x13
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    1e6c:	c7 01       	movw	r24, r14
    1e6e:	64 eb       	ldi	r22, 0xB4	; 180
    1e70:	71 e0       	ldi	r23, 0x01	; 1
    1e72:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_ZNK6String6equalsEPKc>
    if (tempStr == "PM") hh += 12;
    1e76:	88 23       	and	r24, r24
    1e78:	21 f0       	breq	.+8      	; 0x1e82 <_ZN6RTClib7setTimeE6String+0x3e2>
    1e7a:	f6 01       	movw	r30, r12
    1e7c:	80 8d       	ldd	r24, Z+24	; 0x18
    1e7e:	84 5f       	subi	r24, 0xF4	; 244
    1e80:	80 8f       	std	Z+24, r24	; 0x18

	RTClib::writeTime(y, m, d, hh, mm, ss);
    1e82:	f6 01       	movw	r30, r12
    1e84:	64 89       	ldd	r22, Z+20	; 0x14
    1e86:	75 89       	ldd	r23, Z+21	; 0x15
    1e88:	c6 01       	movw	r24, r12
    1e8a:	46 89       	ldd	r20, Z+22	; 0x16
    1e8c:	27 89       	ldd	r18, Z+23	; 0x17
    1e8e:	00 8d       	ldd	r16, Z+24	; 0x18
    1e90:	e1 8c       	ldd	r14, Z+25	; 0x19
    1e92:	c2 8c       	ldd	r12, Z+26	; 0x1a
    1e94:	0e 94 ce 0c 	call	0x199c	; 0x199c <_ZN6RTClib9writeTimeEjhhhhh>
}
    1e98:	c7 59       	subi	r28, 0x97	; 151
    1e9a:	df 4f       	sbci	r29, 0xFF	; 255
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	ff 90       	pop	r15
    1eb0:	ef 90       	pop	r14
    1eb2:	df 90       	pop	r13
    1eb4:	cf 90       	pop	r12
    1eb6:	bf 90       	pop	r11
    1eb8:	af 90       	pop	r10
    1eba:	9f 90       	pop	r9
    1ebc:	8f 90       	pop	r8
    1ebe:	7f 90       	pop	r7
    1ec0:	6f 90       	pop	r6
    1ec2:	08 95       	ret

00001ec4 <_ZN6RTClib12formatNumberEh>:

/******************************************************************
 * 1. Add zero to time or date represented by Single digit (18:4 -> 18:04, 1:2 -> 01:02)
 * 2. Change time or date format from uint8_t to String 
 */
String RTClib::formatNumber(uint8_t number){
    1ec4:	bf 92       	push	r11
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	65 97       	sbiw	r28, 0x15	; 21
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	6c 01       	movw	r12, r24
    1ee8:	b4 2e       	mov	r11, r20
	String value;
    1eea:	69 e6       	ldi	r22, 0x69	; 105
    1eec:	71 e0       	ldi	r23, 0x01	; 1
    1eee:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
  if (number < 10){
    1ef2:	8b 2d       	mov	r24, r11
    1ef4:	8a 30       	cpi	r24, 0x0A	; 10
    1ef6:	08 f5       	brcc	.+66     	; 0x1f3a <_ZN6RTClib12formatNumberEh+0x76>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ef8:	98 e0       	ldi	r25, 0x08	; 8
    1efa:	e9 2e       	mov	r14, r25
    1efc:	f1 2c       	mov	r15, r1
    1efe:	ec 0e       	add	r14, r28
    1f00:	fd 1e       	adc	r15, r29
    1f02:	c7 01       	movw	r24, r14
    1f04:	67 eb       	ldi	r22, 0xB7	; 183
    1f06:	71 e0       	ldi	r23, 0x01	; 1
    1f08:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
    value = "0" + String(number,DEC);
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	0f 5f       	subi	r16, 0xFF	; 255
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	c8 01       	movw	r24, r16
    1f14:	6b 2d       	mov	r22, r11
    1f16:	4a e0       	ldi	r20, 0x0A	; 10
    1f18:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN6StringC1Ehh>
    1f1c:	c7 01       	movw	r24, r14
    1f1e:	b8 01       	movw	r22, r16
    1f20:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZplRK15StringSumHelperRK6String>
    1f24:	bc 01       	movw	r22, r24
    1f26:	c6 01       	movw	r24, r12
    1f28:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    1f32:	c7 01       	movw	r24, r14
    1f34:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <_ZN6RTClib12formatNumberEh+0x94>
  }
  else{
    value = String(number,DEC);
    1f3a:	8e 01       	movw	r16, r28
    1f3c:	01 5f       	subi	r16, 0xF1	; 241
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	c8 01       	movw	r24, r16
    1f42:	6b 2d       	mov	r22, r11
    1f44:	4a e0       	ldi	r20, 0x0A	; 10
    1f46:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN6StringC1Ehh>
    1f4a:	c6 01       	movw	r24, r12
    1f4c:	b8 01       	movw	r22, r16
    1f4e:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
    1f52:	c8 01       	movw	r24, r16
    1f54:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
  }
  return value;
}
    1f58:	c6 01       	movw	r24, r12
    1f5a:	65 96       	adiw	r28, 0x15	; 21
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	1f 91       	pop	r17
    1f6c:	0f 91       	pop	r16
    1f6e:	ff 90       	pop	r15
    1f70:	ef 90       	pop	r14
    1f72:	df 90       	pop	r13
    1f74:	cf 90       	pop	r12
    1f76:	bf 90       	pop	r11
    1f78:	08 95       	ret

00001f7a <_ZN6RTClib7getTimeEv>:


/******************************************************************
 *	Read current time value from RTC chip
 */
String RTClib::getTime(){
    1f7a:	6f 92       	push	r6
    1f7c:	7f 92       	push	r7
    1f7e:	8f 92       	push	r8
    1f80:	9f 92       	push	r9
    1f82:	af 92       	push	r10
    1f84:	bf 92       	push	r11
    1f86:	cf 92       	push	r12
    1f88:	df 92       	push	r13
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	65 97       	sbiw	r28, 0x15	; 21
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	4c 01       	movw	r8, r24
    1fa8:	8b 01       	movw	r16, r22
	RTClib::now();
    1faa:	cb 01       	movw	r24, r22
    1fac:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN6RTClib3nowEv>
	return (formatNumber(hh) + ":" + formatNumber(mm));
    1fb0:	5e 01       	movw	r10, r28
    1fb2:	08 94       	sec
    1fb4:	a1 1c       	adc	r10, r1
    1fb6:	b1 1c       	adc	r11, r1
    1fb8:	c5 01       	movw	r24, r10
    1fba:	b8 01       	movw	r22, r16
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	40 8d       	ldd	r20, Z+24	; 0x18
    1fc0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN6RTClib12formatNumberEh>
public:
	StringSumHelper(const String &s) : String(s) {}
    1fc4:	38 e0       	ldi	r19, 0x08	; 8
    1fc6:	c3 2e       	mov	r12, r19
    1fc8:	d1 2c       	mov	r13, r1
    1fca:	cc 0e       	add	r12, r28
    1fcc:	dd 1e       	adc	r13, r29
    1fce:	c6 01       	movw	r24, r12
    1fd0:	b5 01       	movw	r22, r10
    1fd2:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN6StringC1ERKS_>
    1fd6:	c6 01       	movw	r24, r12
    1fd8:	6d e8       	ldi	r22, 0x8D	; 141
    1fda:	71 e0       	ldi	r23, 0x01	; 1
    1fdc:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZplRK15StringSumHelperPKc>
    1fe0:	3c 01       	movw	r6, r24
    1fe2:	2f e0       	ldi	r18, 0x0F	; 15
    1fe4:	e2 2e       	mov	r14, r18
    1fe6:	f1 2c       	mov	r15, r1
    1fe8:	ec 0e       	add	r14, r28
    1fea:	fd 1e       	adc	r15, r29
    1fec:	c7 01       	movw	r24, r14
    1fee:	b8 01       	movw	r22, r16
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	41 8d       	ldd	r20, Z+25	; 0x19
    1ff4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN6RTClib12formatNumberEh>
    1ff8:	c3 01       	movw	r24, r6
    1ffa:	b7 01       	movw	r22, r14
    1ffc:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZplRK15StringSumHelperRK6String>
    2000:	bc 01       	movw	r22, r24
    2002:	c4 01       	movw	r24, r8
    2004:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN6StringC1ERKS_>
    2008:	c7 01       	movw	r24, r14
    200a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    200e:	c6 01       	movw	r24, r12
    2010:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    2014:	c5 01       	movw	r24, r10
    2016:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
}
    201a:	c4 01       	movw	r24, r8
    201c:	65 96       	adiw	r28, 0x15	; 21
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	bf 90       	pop	r11
    203a:	af 90       	pop	r10
    203c:	9f 90       	pop	r9
    203e:	8f 90       	pop	r8
    2040:	7f 90       	pop	r7
    2042:	6f 90       	pop	r6
    2044:	08 95       	ret

00002046 <_ZN6RTClib7getDateEv>:


/******************************************************************
 *	Read current date value from RTC chip
 */
String RTClib::getDate(){
    2046:	6f 92       	push	r6
    2048:	7f 92       	push	r7
    204a:	8f 92       	push	r8
    204c:	9f 92       	push	r9
    204e:	af 92       	push	r10
    2050:	bf 92       	push	r11
    2052:	cf 92       	push	r12
    2054:	df 92       	push	r13
    2056:	ef 92       	push	r14
    2058:	ff 92       	push	r15
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	65 97       	sbiw	r28, 0x15	; 21
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	4c 01       	movw	r8, r24
    2074:	8b 01       	movw	r16, r22
	 RTClib::now();
    2076:	cb 01       	movw	r24, r22
    2078:	0e 94 49 0c 	call	0x1892	; 0x1892 <_ZN6RTClib3nowEv>
	 return (formatNumber(d) + "/" + formatNumber(m));
    207c:	5e 01       	movw	r10, r28
    207e:	08 94       	sec
    2080:	a1 1c       	adc	r10, r1
    2082:	b1 1c       	adc	r11, r1
    2084:	c5 01       	movw	r24, r10
    2086:	b8 01       	movw	r22, r16
    2088:	f8 01       	movw	r30, r16
    208a:	47 89       	ldd	r20, Z+23	; 0x17
    208c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN6RTClib12formatNumberEh>
public:
	StringSumHelper(const String &s) : String(s) {}
    2090:	58 e0       	ldi	r21, 0x08	; 8
    2092:	c5 2e       	mov	r12, r21
    2094:	d1 2c       	mov	r13, r1
    2096:	cc 0e       	add	r12, r28
    2098:	dd 1e       	adc	r13, r29
    209a:	c6 01       	movw	r24, r12
    209c:	b5 01       	movw	r22, r10
    209e:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN6StringC1ERKS_>
    20a2:	c6 01       	movw	r24, r12
    20a4:	6a e6       	ldi	r22, 0x6A	; 106
    20a6:	71 e0       	ldi	r23, 0x01	; 1
    20a8:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZplRK15StringSumHelperPKc>
    20ac:	3c 01       	movw	r6, r24
    20ae:	4f e0       	ldi	r20, 0x0F	; 15
    20b0:	e4 2e       	mov	r14, r20
    20b2:	f1 2c       	mov	r15, r1
    20b4:	ec 0e       	add	r14, r28
    20b6:	fd 1e       	adc	r15, r29
    20b8:	c7 01       	movw	r24, r14
    20ba:	b8 01       	movw	r22, r16
    20bc:	f8 01       	movw	r30, r16
    20be:	46 89       	ldd	r20, Z+22	; 0x16
    20c0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN6RTClib12formatNumberEh>
    20c4:	c3 01       	movw	r24, r6
    20c6:	b7 01       	movw	r22, r14
    20c8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZplRK15StringSumHelperRK6String>
    20cc:	bc 01       	movw	r22, r24
    20ce:	c4 01       	movw	r24, r8
    20d0:	0e 94 37 18 	call	0x306e	; 0x306e <_ZN6StringC1ERKS_>
    20d4:	c7 01       	movw	r24, r14
    20d6:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    20da:	c6 01       	movw	r24, r12
    20dc:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
    20e0:	c5 01       	movw	r24, r10
    20e2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
}
    20e6:	c4 01       	movw	r24, r8
    20e8:	65 96       	adiw	r28, 0x15	; 21
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	cf 90       	pop	r12
    2104:	bf 90       	pop	r11
    2106:	af 90       	pop	r10
    2108:	9f 90       	pop	r9
    210a:	8f 90       	pop	r8
    210c:	7f 90       	pop	r7
    210e:	6f 90       	pop	r6
    2110:	08 95       	ret

00002112 <_ZN7ht1632c10chipSelectEh>:

/******************************************************************
 * Select or de-select a particular ht1632c chip.
 * CD pins are active-low; writing 0 to the pin selects the chip.
 */
void ht1632c::chipSelect(byte chip){
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	ec 01       	movw	r28, r24
    211e:	f6 2e       	mov	r15, r22

  digitalWrite(_ht1632_cs, LOW);     //Writes '0' to shift register
    2120:	8c 01       	movw	r16, r24
    2122:	00 58       	subi	r16, 0x80	; 128
    2124:	1f 4f       	sbci	r17, 0xFF	; 255
    2126:	f8 01       	movw	r30, r16
    2128:	80 81       	ld	r24, Z
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
  digitalWrite(_ht1632_clk,LOW);     //Activates first Chip
    2130:	cf 57       	subi	r28, 0x7F	; 127
    2132:	df 4f       	sbci	r29, 0xFF	; 255
    2134:	88 81       	ld	r24, Y
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
  digitalWrite(_ht1632_clk,HIGH);    
    213c:	88 81       	ld	r24, Y
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
  digitalWrite(_ht1632_cs, HIGH);    //Writes '1' to shift register to disable other chips
    2144:	f8 01       	movw	r30, r16
    2146:	80 81       	ld	r24, Z
    2148:	61 e0       	ldi	r22, 0x01	; 1
    214a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>

  for (byte i = 0; i < chip; i++){   //Shift '0' to specific chip to enable it
    214e:	00 e0       	ldi	r16, 0x00	; 0
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <_ZN7ht1632c10chipSelectEh+0x52>
    digitalWrite(_ht1632_clk,LOW);
    2152:	88 81       	ld	r24, Y
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
    digitalWrite(_ht1632_clk,HIGH);
    215a:	88 81       	ld	r24, Y
    215c:	61 e0       	ldi	r22, 0x01	; 1
    215e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
  digitalWrite(_ht1632_cs, LOW);     //Writes '0' to shift register
  digitalWrite(_ht1632_clk,LOW);     //Activates first Chip
  digitalWrite(_ht1632_clk,HIGH);    
  digitalWrite(_ht1632_cs, HIGH);    //Writes '1' to shift register to disable other chips

  for (byte i = 0; i < chip; i++){   //Shift '0' to specific chip to enable it
    2162:	0f 5f       	subi	r16, 0xFF	; 255
    2164:	0f 15       	cp	r16, r15
    2166:	a8 f3       	brcs	.-22     	; 0x2152 <_ZN7ht1632c10chipSelectEh+0x40>
    digitalWrite(_ht1632_clk,LOW);
    digitalWrite(_ht1632_clk,HIGH);
  }
}
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	08 95       	ret

00002174 <_ZN7ht1632c8chipFreeEv>:

void ht1632c::chipFree(){
    2174:	1f 93       	push	r17
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	ec 01       	movw	r28, r24
  digitalWrite(_ht1632_cs,HIGH);      //Reset Selected Chips
    217c:	fc 01       	movw	r30, r24
    217e:	e0 58       	subi	r30, 0x80	; 128
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	61 e0       	ldi	r22, 0x01	; 1
    2186:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
    218a:	18 e0       	ldi	r17, 0x08	; 8
  for(byte i = 0; i < 8; i++){
    digitalWrite(_ht1632_clk, LOW);
    218c:	cf 57       	subi	r28, 0x7F	; 127
    218e:	df 4f       	sbci	r29, 0xFF	; 255
    2190:	88 81       	ld	r24, Y
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
    digitalWrite(_ht1632_clk, HIGH);
    2198:	88 81       	ld	r24, Y
    219a:	61 e0       	ldi	r22, 0x01	; 1
    219c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
    21a0:	11 50       	subi	r17, 0x01	; 1
  }
}

void ht1632c::chipFree(){
  digitalWrite(_ht1632_cs,HIGH);      //Reset Selected Chips
  for(byte i = 0; i < 8; i++){
    21a2:	b1 f7       	brne	.-20     	; 0x2190 <_ZN7ht1632c8chipFreeEv+0x1c>
    digitalWrite(_ht1632_clk, LOW);
    digitalWrite(_ht1632_clk, HIGH);
  }
}
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	08 95       	ret

000021ac <_ZN7ht1632c9writeBitsEhh>:
 * ht1632_writebits
 * Write bits (up to 8) to h1632 on pins ht1632_data, ht1632_wrclk Chip is assumed to already be chip-selected
 * Bits are shifted out from MSB to LSB, with the first bit sent being (bits & firstbit), shifted till firsbit is zero.
 */
void ht1632c::writeBits (byte bits, byte firstbit)
{
    21ac:	ef 92       	push	r14
    21ae:	ff 92       	push	r15
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	f6 2e       	mov	r15, r22
    21ba:	e4 2e       	mov	r14, r20
  while (firstbit) {
    digitalWrite(_ht1632_wrclk, LOW);
    21bc:	8c 01       	movw	r16, r24
    21be:	0e 57       	subi	r16, 0x7E	; 126
    21c0:	1f 4f       	sbci	r17, 0xFF	; 255
    21c2:	ec 01       	movw	r28, r24
    21c4:	cd 57       	subi	r28, 0x7D	; 125
    21c6:	df 4f       	sbci	r29, 0xFF	; 255
 * Write bits (up to 8) to h1632 on pins ht1632_data, ht1632_wrclk Chip is assumed to already be chip-selected
 * Bits are shifted out from MSB to LSB, with the first bit sent being (bits & firstbit), shifted till firsbit is zero.
 */
void ht1632c::writeBits (byte bits, byte firstbit)
{
  while (firstbit) {
    21c8:	15 c0       	rjmp	.+42     	; 0x21f4 <_ZN7ht1632c9writeBitsEhh+0x48>
    digitalWrite(_ht1632_wrclk, LOW);
    21ca:	f8 01       	movw	r30, r16
    21cc:	80 81       	ld	r24, Z
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
    if (bits & firstbit) {
    21d4:	8e 2d       	mov	r24, r14
    21d6:	8f 21       	and	r24, r15
    21d8:	19 f0       	breq	.+6      	; 0x21e0 <_ZN7ht1632c9writeBitsEhh+0x34>
      digitalWrite(_ht1632_data, HIGH);
    21da:	88 81       	ld	r24, Y
    21dc:	61 e0       	ldi	r22, 0x01	; 1
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <_ZN7ht1632c9writeBitsEhh+0x38>
    } 
    else {
      digitalWrite(_ht1632_data, LOW);
    21e0:	88 81       	ld	r24, Y
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
    }
    digitalWrite(_ht1632_wrclk, HIGH);
    21e8:	f8 01       	movw	r30, r16
    21ea:	80 81       	ld	r24, Z
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <digitalWrite>
    firstbit >>= 1;
    21f2:	e6 94       	lsr	r14
 * Write bits (up to 8) to h1632 on pins ht1632_data, ht1632_wrclk Chip is assumed to already be chip-selected
 * Bits are shifted out from MSB to LSB, with the first bit sent being (bits & firstbit), shifted till firsbit is zero.
 */
void ht1632c::writeBits (byte bits, byte firstbit)
{
  while (firstbit) {
    21f4:	ee 20       	and	r14, r14
    21f6:	49 f7       	brne	.-46     	; 0x21ca <_ZN7ht1632c9writeBitsEhh+0x1e>
      digitalWrite(_ht1632_data, LOW);
    }
    digitalWrite(_ht1632_wrclk, HIGH);
    firstbit >>= 1;
  }
}
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	1f 91       	pop	r17
    21fe:	0f 91       	pop	r16
    2200:	ff 90       	pop	r15
    2202:	ef 90       	pop	r14
    2204:	08 95       	ret

00002206 <_ZN7ht1632c8sendDataEhhh>:
 *    Select 1 0 1 A6 A5 A4 A3 A2 A1 A0 D0 D1 D2 D3 Free
 * Note that the address is sent MSB first, while the data is sent LSB first!
 * This means that somewhere a bit reversal will have to be done to get
 * zero-based addressing of words and dots within words.
 */
 void ht1632c::sendData (byte c, byte address, byte data){
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	1f 93       	push	r17
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	7c 01       	movw	r14, r24
    2218:	14 2f       	mov	r17, r20
  chipSelect(c);				 // Select chip
    221a:	29 83       	std	Y+1, r18	; 0x01
    221c:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN7ht1632c10chipSelectEh>
  writeBits(HT1632_ID_WR, 1<<2); // Send ID: WRITE to RAM
    2220:	c7 01       	movw	r24, r14
    2222:	65 e0       	ldi	r22, 0x05	; 5
    2224:	44 e0       	ldi	r20, 0x04	; 4
    2226:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN7ht1632c9writeBitsEhh>
  writeBits(address, 1<<6);      // Send address
    222a:	c7 01       	movw	r24, r14
    222c:	61 2f       	mov	r22, r17
    222e:	40 e4       	ldi	r20, 0x40	; 64
    2230:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN7ht1632c9writeBitsEhh>
  writeBits(data, 1<<3);         // Send 4 bits of data
    2234:	c7 01       	movw	r24, r14
    2236:	29 81       	ldd	r18, Y+1	; 0x01
    2238:	62 2f       	mov	r22, r18
    223a:	48 e0       	ldi	r20, 0x08	; 8
    223c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN7ht1632c9writeBitsEhh>
  chipFree();                    //Done.
    2240:	c7 01       	movw	r24, r14
    2242:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN7ht1632c8chipFreeEv>
}
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	1f 91       	pop	r17
    224e:	ff 90       	pop	r15
    2250:	ef 90       	pop	r14
    2252:	08 95       	ret

00002254 <_ZN7ht1632c7sendCmdEhh>:
 * sendcmd
 * Send a command to the ht1632 chip. A command consists of a 3-bit "CMD" ID, an 8bit command, and one "don't care bit".
 *   Select 1 0 0 c7 c6 c5 c4 c3 c2 c1 c0 xx Free
 */
 void ht1632c::sendCmd (byte c, byte command)
{
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	ec 01       	movw	r28, r24
    225c:	14 2f       	mov	r17, r20
  chipSelect(c);				   // Select chip
    225e:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN7ht1632c10chipSelectEh>
  writeBits(HT1632_ID_CMD, 1<<2);  // send 3 bits of id: COMMMAND
    2262:	ce 01       	movw	r24, r28
    2264:	64 e0       	ldi	r22, 0x04	; 4
    2266:	44 e0       	ldi	r20, 0x04	; 4
    2268:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN7ht1632c9writeBitsEhh>
  writeBits(command, 1<<7);        // send the actual command
    226c:	ce 01       	movw	r24, r28
    226e:	61 2f       	mov	r22, r17
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN7ht1632c9writeBitsEhh>
  writeBits(0, 1);         	       // one extra dont-care bit in commands.
    2276:	ce 01       	movw	r24, r28
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN7ht1632c9writeBitsEhh>
  chipFree();                      //done
    2280:	ce 01       	movw	r24, r28
    2282:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN7ht1632c8chipFreeEv>
}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	08 95       	ret

0000228e <_ZN7ht1632c9reAddressEhhch>:
 *            row - one of 2 rows (each row consist of 8 leds)
 *            color - of the pixels
 *            data - to transefer to column 
 *Returns:    none
 */
void ht1632c::reAddress(byte column, byte row, char color, byte data){
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	ec 01       	movw	r28, r24
    22a0:	d4 2e       	mov	r13, r20
  byte chip;
  byte addressGreen;	//for green dots on same location
  byte addressRed;		//for red dots on same location
  chip = (column > 15) + row * 2; 
    22a2:	14 2f       	mov	r17, r20
    22a4:	11 0f       	add	r17, r17
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	60 31       	cpi	r22, 0x10	; 16
    22aa:	08 f4       	brcc	.+2      	; 0x22ae <_ZN7ht1632c9reAddressEhhch+0x20>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	18 0f       	add	r17, r24

  addressGreen = (column % 16) * 2;
  addressRed = 32 + (column % 16) * 2;
    22b0:	e6 2e       	mov	r14, r22
    22b2:	ff 24       	eor	r15, r15

  switch (color){
    22b4:	27 36       	cpi	r18, 0x67	; 103
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <_ZN7ht1632c9reAddressEhhch+0x32>
    22b8:	22 37       	cpi	r18, 0x72	; 114
    22ba:	09 f0       	breq	.+2      	; 0x22be <_ZN7ht1632c9reAddressEhhch+0x30>
    22bc:	49 c0       	rjmp	.+146    	; 0x2350 <_ZN7ht1632c9reAddressEhhch+0xc2>
    22be:	23 c0       	rjmp	.+70     	; 0x2306 <_ZN7ht1632c9reAddressEhhch+0x78>
  byte chip;
  byte addressGreen;	//for green dots on same location
  byte addressRed;		//for red dots on same location
  chip = (column > 15) + row * 2; 

  addressGreen = (column % 16) * 2;
    22c0:	7f e0       	ldi	r23, 0x0F	; 15
    22c2:	c7 2e       	mov	r12, r23
    22c4:	c6 22       	and	r12, r22
    22c6:	cc 0c       	add	r12, r12
  addressRed = 32 + (column % 16) * 2;

  switch (color){
  case 'g':
	  sendData(chip, addressGreen, data >> 4);  //send data to first half of single dot matrix 
    22c8:	e0 2f       	mov	r30, r16
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	54 e0       	ldi	r21, 0x04	; 4
    22ce:	f5 95       	asr	r31
    22d0:	e7 95       	ror	r30
    22d2:	5a 95       	dec	r21
    22d4:	e1 f7       	brne	.-8      	; 0x22ce <_ZN7ht1632c9reAddressEhhch+0x40>
    22d6:	ce 01       	movw	r24, r28
    22d8:	61 2f       	mov	r22, r17
    22da:	4c 2d       	mov	r20, r12
    22dc:	2e 2f       	mov	r18, r30
    22de:	0e 94 03 11 	call	0x2206	; 0x2206 <_ZN7ht1632c8sendDataEhhh>
	  sendData(chip, addressGreen + 1, data);   //send data to second half of single dot matrix
    22e2:	4c 2d       	mov	r20, r12
    22e4:	4f 5f       	subi	r20, 0xFF	; 255
    22e6:	ce 01       	movw	r24, r28
    22e8:	61 2f       	mov	r22, r17
    22ea:	20 2f       	mov	r18, r16
    22ec:	0e 94 03 11 	call	0x2206	; 0x2206 <_ZN7ht1632c8sendDataEhhh>
	  addressState[column][row][color == 'r'] = data;
    22f0:	f7 01       	movw	r30, r14
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	ed 0d       	add	r30, r13
    22f8:	f1 1d       	adc	r31, r1
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	ec 0f       	add	r30, r28
    2300:	fd 1f       	adc	r31, r29
    2302:	00 83       	st	Z, r16
    break;  
    2304:	25 c0       	rjmp	.+74     	; 0x2350 <_ZN7ht1632c9reAddressEhhch+0xc2>
  byte addressGreen;	//for green dots on same location
  byte addressRed;		//for red dots on same location
  chip = (column > 15) + row * 2; 

  addressGreen = (column % 16) * 2;
  addressRed = 32 + (column % 16) * 2;
    2306:	a7 01       	movw	r20, r14
    2308:	4f 70       	andi	r20, 0x0F	; 15
    230a:	50 70       	andi	r21, 0x00	; 0
    230c:	40 5f       	subi	r20, 0xF0	; 240
    230e:	5f 4f       	sbci	r21, 0xFF	; 255
    2310:	c4 2e       	mov	r12, r20
    2312:	cc 0c       	add	r12, r12
	  sendData(chip, addressGreen, data >> 4);  //send data to first half of single dot matrix 
	  sendData(chip, addressGreen + 1, data);   //send data to second half of single dot matrix
	  addressState[column][row][color == 'r'] = data;
    break;  
  case 'r':
	  sendData(chip, addressRed, data >> 4);	//send data to first half of single dot matrix 
    2314:	e0 2f       	mov	r30, r16
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	24 e0       	ldi	r18, 0x04	; 4
    231a:	f5 95       	asr	r31
    231c:	e7 95       	ror	r30
    231e:	2a 95       	dec	r18
    2320:	e1 f7       	brne	.-8      	; 0x231a <_ZN7ht1632c9reAddressEhhch+0x8c>
    2322:	ce 01       	movw	r24, r28
    2324:	61 2f       	mov	r22, r17
    2326:	4c 2d       	mov	r20, r12
    2328:	2e 2f       	mov	r18, r30
    232a:	0e 94 03 11 	call	0x2206	; 0x2206 <_ZN7ht1632c8sendDataEhhh>
 	  sendData(chip, addressRed + 1, data);     //send data to second half of single dot matrix              
    232e:	4c 2d       	mov	r20, r12
    2330:	4f 5f       	subi	r20, 0xFF	; 255
    2332:	ce 01       	movw	r24, r28
    2334:	61 2f       	mov	r22, r17
    2336:	20 2f       	mov	r18, r16
    2338:	0e 94 03 11 	call	0x2206	; 0x2206 <_ZN7ht1632c8sendDataEhhh>
	  addressState[column][row][color == 'r'] = data;
    233c:	f7 01       	movw	r30, r14
    233e:	ee 0f       	add	r30, r30
    2340:	ff 1f       	adc	r31, r31
    2342:	ed 0d       	add	r30, r13
    2344:	f1 1d       	adc	r31, r1
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	ec 0f       	add	r30, r28
    234c:	fd 1f       	adc	r31, r29
    234e:	01 83       	std	Z+1, r16	; 0x01
    break;
  }
}
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	ff 90       	pop	r15
    235a:	ef 90       	pop	r14
    235c:	df 90       	pop	r13
    235e:	cf 90       	pop	r12
    2360:	08 95       	ret

00002362 <_ZN7ht1632c5pointEhhc>:
 *Parameters: x - coordinate of SureBoard
 *            y - coordinate of SureBoard
 *            color - g for green r for red o for orange and b for black/off
 *Returns:    None
 */
void ht1632c::point(byte x , byte y, char color){
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	cf 92       	push	r12
    2368:	df 92       	push	r13
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	6c 01       	movw	r12, r24
    2376:	16 2f       	mov	r17, r22
  boolean row;    //row to send data to
  byte address;   //address to send data to
  byte data;      //data to send
  

  row = y / 8;
    2378:	f4 2e       	mov	r15, r20
    237a:	f6 94       	lsr	r15
    237c:	f6 94       	lsr	r15
    237e:	f6 94       	lsr	r15
  switch (color){
    2380:	27 36       	cpi	r18, 0x67	; 103
    2382:	69 f0       	breq	.+26     	; 0x239e <_ZN7ht1632c5pointEhhc+0x3c>
    2384:	28 36       	cpi	r18, 0x68	; 104
    2386:	24 f4       	brge	.+8      	; 0x2390 <_ZN7ht1632c5pointEhhc+0x2e>
    2388:	22 36       	cpi	r18, 0x62	; 98
    238a:	09 f0       	breq	.+2      	; 0x238e <_ZN7ht1632c5pointEhhc+0x2c>
    238c:	89 c0       	rjmp	.+274    	; 0x24a0 <_ZN7ht1632c5pointEhhc+0x13e>
    238e:	65 c0       	rjmp	.+202    	; 0x245a <_ZN7ht1632c5pointEhhc+0xf8>
    2390:	2f 36       	cpi	r18, 0x6F	; 111
    2392:	09 f4       	brne	.+2      	; 0x2396 <_ZN7ht1632c5pointEhhc+0x34>
    2394:	45 c0       	rjmp	.+138    	; 0x2420 <_ZN7ht1632c5pointEhhc+0xbe>
    2396:	22 37       	cpi	r18, 0x72	; 114
    2398:	09 f0       	breq	.+2      	; 0x239c <_ZN7ht1632c5pointEhhc+0x3a>
    239a:	82 c0       	rjmp	.+260    	; 0x24a0 <_ZN7ht1632c5pointEhhc+0x13e>
    239c:	1e c0       	rjmp	.+60     	; 0x23da <_ZN7ht1632c5pointEhhc+0x78>
  case 'g':
	data = (addressState[x][row][0]) | (B10000000 >> (y % 8)); 
    239e:	c6 2f       	mov	r28, r22
    23a0:	d0 e0       	ldi	r29, 0x00	; 0
    23a2:	47 70       	andi	r20, 0x07	; 7
    23a4:	50 e8       	ldi	r21, 0x80	; 128
    23a6:	a5 2e       	mov	r10, r21
    23a8:	b1 2c       	mov	r11, r1
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <_ZN7ht1632c5pointEhhc+0x4e>
    23ac:	b5 94       	asr	r11
    23ae:	a7 94       	ror	r10
    23b0:	4a 95       	dec	r20
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <_ZN7ht1632c5pointEhhc+0x4a>
    23b4:	cc 0f       	add	r28, r28
    23b6:	dd 1f       	adc	r29, r29
    23b8:	cf 0d       	add	r28, r15
    23ba:	d1 1d       	adc	r29, r1
    23bc:	cc 0f       	add	r28, r28
    23be:	dd 1f       	adc	r29, r29
    23c0:	c8 0f       	add	r28, r24
    23c2:	d9 1f       	adc	r29, r25
    23c4:	08 81       	ld	r16, Y
    23c6:	0a 29       	or	r16, r10
	reAddress(x, row, color, data);
    23c8:	4f 2d       	mov	r20, r15
    23ca:	27 e6       	ldi	r18, 0x67	; 103
    23cc:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	data = (addressState[x][row][1]) & (~(B10000000 >> (y % 8))); 
    23d0:	0a 2d       	mov	r16, r10
    23d2:	00 95       	com	r16
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	08 23       	and	r16, r24
    23d8:	5d c0       	rjmp	.+186    	; 0x2494 <_ZN7ht1632c5pointEhhc+0x132>
	reAddress(x, row, 'r', data);
	break;
  case 'r':
	data = (addressState[x][row][1]) | (B10000000 >> (y % 8)); 
    23da:	c6 2f       	mov	r28, r22
    23dc:	d0 e0       	ldi	r29, 0x00	; 0
    23de:	47 70       	andi	r20, 0x07	; 7
    23e0:	90 e8       	ldi	r25, 0x80	; 128
    23e2:	a9 2e       	mov	r10, r25
    23e4:	b1 2c       	mov	r11, r1
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <_ZN7ht1632c5pointEhhc+0x8a>
    23e8:	b5 94       	asr	r11
    23ea:	a7 94       	ror	r10
    23ec:	4a 95       	dec	r20
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <_ZN7ht1632c5pointEhhc+0x86>
    23f0:	cc 0f       	add	r28, r28
    23f2:	dd 1f       	adc	r29, r29
    23f4:	cf 0d       	add	r28, r15
    23f6:	d1 1d       	adc	r29, r1
    23f8:	cc 0f       	add	r28, r28
    23fa:	dd 1f       	adc	r29, r29
    23fc:	cc 0d       	add	r28, r12
    23fe:	dd 1d       	adc	r29, r13
    2400:	09 81       	ldd	r16, Y+1	; 0x01
    2402:	0a 29       	or	r16, r10
	reAddress(x, row, color, data);
    2404:	c6 01       	movw	r24, r12
    2406:	4f 2d       	mov	r20, r15
    2408:	22 e7       	ldi	r18, 0x72	; 114
    240a:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	data = (addressState[x][row][0]) & (~(B10000000 >> (y % 8))); 
    240e:	0a 2d       	mov	r16, r10
    2410:	00 95       	com	r16
    2412:	88 81       	ld	r24, Y
    2414:	08 23       	and	r16, r24
	reAddress(x, row, 'g', data);
    2416:	c6 01       	movw	r24, r12
    2418:	61 2f       	mov	r22, r17
    241a:	4f 2d       	mov	r20, r15
    241c:	27 e6       	ldi	r18, 0x67	; 103
    241e:	3e c0       	rjmp	.+124    	; 0x249c <_ZN7ht1632c5pointEhhc+0x13a>
	break;
  case 'o':
	data = (addressState[x][row][0]) | (B10000000 >> (y % 8)); 
    2420:	c6 2f       	mov	r28, r22
    2422:	d0 e0       	ldi	r29, 0x00	; 0
    2424:	47 70       	andi	r20, 0x07	; 7
    2426:	80 e8       	ldi	r24, 0x80	; 128
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <_ZN7ht1632c5pointEhhc+0xce>
    242c:	95 95       	asr	r25
    242e:	87 95       	ror	r24
    2430:	4a 95       	dec	r20
    2432:	e2 f7       	brpl	.-8      	; 0x242c <_ZN7ht1632c5pointEhhc+0xca>
    2434:	a8 2e       	mov	r10, r24
    2436:	cc 0f       	add	r28, r28
    2438:	dd 1f       	adc	r29, r29
    243a:	cf 0d       	add	r28, r15
    243c:	d1 1d       	adc	r29, r1
    243e:	cc 0f       	add	r28, r28
    2440:	dd 1f       	adc	r29, r29
    2442:	cc 0d       	add	r28, r12
    2444:	dd 1d       	adc	r29, r13
    2446:	08 81       	ld	r16, Y
    2448:	08 2b       	or	r16, r24
	reAddress(x, row, 'g', data);
    244a:	c6 01       	movw	r24, r12
    244c:	4f 2d       	mov	r20, r15
    244e:	27 e6       	ldi	r18, 0x67	; 103
    2450:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	data = (addressState[x][row][1]) | (B10000000 >> (y % 8)); 
    2454:	09 81       	ldd	r16, Y+1	; 0x01
    2456:	0a 29       	or	r16, r10
    2458:	1d c0       	rjmp	.+58     	; 0x2494 <_ZN7ht1632c5pointEhhc+0x132>
	reAddress(x, row, 'r', data);
	break;
  case 'b':
	data = (addressState[x][row][0]) & (~(B10000000 >> (y % 8))); 
    245a:	c6 2f       	mov	r28, r22
    245c:	d0 e0       	ldi	r29, 0x00	; 0
    245e:	47 70       	andi	r20, 0x07	; 7
    2460:	80 e8       	ldi	r24, 0x80	; 128
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	02 c0       	rjmp	.+4      	; 0x246a <_ZN7ht1632c5pointEhhc+0x108>
    2466:	95 95       	asr	r25
    2468:	87 95       	ror	r24
    246a:	4a 95       	dec	r20
    246c:	e2 f7       	brpl	.-8      	; 0x2466 <_ZN7ht1632c5pointEhhc+0x104>
    246e:	a8 2e       	mov	r10, r24
    2470:	a0 94       	com	r10
    2472:	cc 0f       	add	r28, r28
    2474:	dd 1f       	adc	r29, r29
    2476:	cf 0d       	add	r28, r15
    2478:	d1 1d       	adc	r29, r1
    247a:	cc 0f       	add	r28, r28
    247c:	dd 1f       	adc	r29, r29
    247e:	cc 0d       	add	r28, r12
    2480:	dd 1d       	adc	r29, r13
    2482:	08 81       	ld	r16, Y
    2484:	0a 21       	and	r16, r10
	reAddress(x, row, 'g', data);
    2486:	c6 01       	movw	r24, r12
    2488:	4f 2d       	mov	r20, r15
    248a:	27 e6       	ldi	r18, 0x67	; 103
    248c:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	data = (addressState[x][row][1]) & (~(B10000000 >> (y % 8))); 
    2490:	09 81       	ldd	r16, Y+1	; 0x01
    2492:	0a 21       	and	r16, r10
	reAddress(x, row, 'r', data);
    2494:	c6 01       	movw	r24, r12
    2496:	61 2f       	mov	r22, r17
    2498:	4f 2d       	mov	r20, r15
    249a:	22 e7       	ldi	r18, 0x72	; 114
    249c:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	break;
  }
 	 
}
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	bf 90       	pop	r11
    24b0:	af 90       	pop	r10
    24b2:	08 95       	ret

000024b4 <_ZN7ht1632c8writeRowE6Stringhcc>:
 *            row - board devided into 2 rows 8 leds each (0 for top row & 1 for bottom row) 
 *            color - of the text
 *            language - 'e' for english & 'h' for hebrew  
 *Returns:    none
 */
void ht1632c::writeRow(String message, boolean row, char color, char language){
    24b4:	2f 92       	push	r2
    24b6:	3f 92       	push	r3
    24b8:	4f 92       	push	r4
    24ba:	5f 92       	push	r5
    24bc:	6f 92       	push	r6
    24be:	7f 92       	push	r7
    24c0:	8f 92       	push	r8
    24c2:	9f 92       	push	r9
    24c4:	af 92       	push	r10
    24c6:	bf 92       	push	r11
    24c8:	cf 92       	push	r12
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	29 97       	sbiw	r28, 0x09	; 9
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	2c 01       	movw	r4, r24
    24ea:	6b 01       	movw	r12, r22
    24ec:	48 87       	std	Y+8, r20	; 0x08
    24ee:	22 2e       	mov	r2, r18
    24f0:	10 2f       	mov	r17, r16
  byte dots;	//dots char consist of 
  byte column = 0;
  uint8_t c;		//char to write 

	if (message.length() <= 5){
    24f2:	fb 01       	movw	r30, r22
    24f4:	84 81       	ldd	r24, Z+4	; 0x04
    24f6:	95 81       	ldd	r25, Z+5	; 0x05
    24f8:	86 30       	cpi	r24, 0x06	; 6
    24fa:	91 05       	cpc	r25, r1
    24fc:	08 f0       	brcs	.+2      	; 0x2500 <_ZN7ht1632c8writeRowE6Stringhcc+0x4c>
    24fe:	5e c0       	rjmp	.+188    	; 0x25bc <_ZN7ht1632c8writeRowE6Stringhcc+0x108>
    2500:	88 24       	eor	r8, r8
    2502:	99 24       	eor	r9, r9
    2504:	77 24       	eor	r7, r7
 *            row - board devided into 2 rows 8 leds each (0 for top row & 1 for bottom row) 
 *            color - of the text
 *            language - 'e' for english & 'h' for hebrew  
 *Returns:    none
 */
void ht1632c::writeRow(String message, boolean row, char color, char language){
    2506:	29 e1       	ldi	r18, 0x19	; 25
    2508:	32 2e       	mov	r3, r18
    250a:	50 c0       	rjmp	.+160    	; 0x25ac <_ZN7ht1632c8writeRowE6Stringhcc+0xf8>
  byte column = 0;
  uint8_t c;		//char to write 

	if (message.length() <= 5){
		for(char i  = 0; i < message.length(); i++){
			c  = message.charAt(i);
    250c:	c6 01       	movw	r24, r12
    250e:	b4 01       	movw	r22, r8
    2510:	0e 94 c9 19 	call	0x3392	; 0x3392 <_ZNK6String6charAtEj>
		
			 if ( c >= '{' && c <= '~'){
    2514:	98 2f       	mov	r25, r24
    2516:	9b 57       	subi	r25, 0x7B	; 123
    2518:	94 30       	cpi	r25, 0x04	; 4
    251a:	10 f4       	brcc	.+4      	; 0x2520 <_ZN7ht1632c8writeRowE6Stringhcc+0x6c>
				c -= 59;
    251c:	8b 53       	subi	r24, 0x3B	; 59
    251e:	0c c0       	rjmp	.+24     	; 0x2538 <_ZN7ht1632c8writeRowE6Stringhcc+0x84>
			}
			else if (c >= 97 && c <= 123 || c == 127){ //  �: � = 97 �� �: = 122 � �: = 127
    2520:	98 2f       	mov	r25, r24
    2522:	91 56       	subi	r25, 0x61	; 97
    2524:	9b 31       	cpi	r25, 0x1B	; 27
    2526:	18 f0       	brcs	.+6      	; 0x252e <_ZN7ht1632c8writeRowE6Stringhcc+0x7a>
    2528:	8f 37       	cpi	r24, 0x7F	; 127
    252a:	19 f4       	brne	.+6      	; 0x2532 <_ZN7ht1632c8writeRowE6Stringhcc+0x7e>
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <_ZN7ht1632c8writeRowE6Stringhcc+0x82>
					if (c == 127){
						c = 94;
					}
					else{
						c -= 29;
    252e:	8d 51       	subi	r24, 0x1D	; 29
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <_ZN7ht1632c8writeRowE6Stringhcc+0x84>
					}
			}
			else{
				c -= 32;
    2532:	80 52       	subi	r24, 0x20	; 32
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <_ZN7ht1632c8writeRowE6Stringhcc+0x84>
			 if ( c >= '{' && c <= '~'){
				c -= 59;
			}
			else if (c >= 97 && c <= 123 || c == 127){ //  �: � = 97 �� �: = 122 � �: = 127
					if (c == 127){
						c = 94;
    2536:	8e e5       	ldi	r24, 0x5E	; 94
    2538:	67 2c       	mov	r6, r7
    253a:	94 e0       	ldi	r25, 0x04	; 4
    253c:	e9 2e       	mov	r14, r25
    253e:	f1 2c       	mov	r15, r1
				if (language == 'e'){
					dots = pgm_read_byte_near(&Font[c][n]);
					reAddress(column , row, color, dots);
				}
				else if (language == 'h'){
					dots = pgm_read_byte_near(&Font[c][4 - n]);
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	5c 01       	movw	r10, r24
    2544:	aa 0c       	add	r10, r10
    2546:	bb 1c       	adc	r11, r11
    2548:	aa 0c       	add	r10, r10
    254a:	bb 1c       	adc	r11, r11
    254c:	a8 0e       	add	r10, r24
    254e:	b9 1e       	adc	r11, r25
 *            row - board devided into 2 rows 8 leds each (0 for top row & 1 for bottom row) 
 *            color - of the text
 *            language - 'e' for english & 'h' for hebrew  
 *Returns:    none
 */
void ht1632c::writeRow(String message, boolean row, char color, char language){
    2550:	f3 2d       	mov	r31, r3
    2552:	f7 19       	sub	r31, r7
    2554:	f9 87       	std	Y+9, r31	; 0x09
			else{
				c -= 32;
			}

			for (char n = 0; n < 5; n++){
				column += 1;
    2556:	63 94       	inc	r6
				if (language == 'e'){
    2558:	15 36       	cpi	r17, 0x65	; 101
    255a:	61 f4       	brne	.+24     	; 0x2574 <_ZN7ht1632c8writeRowE6Stringhcc+0xc0>
 *            row - board devided into 2 rows 8 leds each (0 for top row & 1 for bottom row) 
 *            color - of the text
 *            language - 'e' for english & 'h' for hebrew  
 *Returns:    none
 */
void ht1632c::writeRow(String message, boolean row, char color, char language){
    255c:	e4 e0       	ldi	r30, 0x04	; 4
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	ee 19       	sub	r30, r14
    2562:	ff 09       	sbc	r31, r15
			}

			for (char n = 0; n < 5; n++){
				column += 1;
				if (language == 'e'){
					dots = pgm_read_byte_near(&Font[c][n]);
    2564:	ea 0d       	add	r30, r10
    2566:	fb 1d       	adc	r31, r11
    2568:	e8 59       	subi	r30, 0x98	; 152
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	04 91       	lpm	r16, Z+
					reAddress(column , row, color, dots);
    256e:	c2 01       	movw	r24, r4
    2570:	66 2d       	mov	r22, r6
    2572:	0b c0       	rjmp	.+22     	; 0x258a <_ZN7ht1632c8writeRowE6Stringhcc+0xd6>
				}
				else if (language == 'h'){
    2574:	18 36       	cpi	r17, 0x68	; 104
    2576:	69 f4       	brne	.+26     	; 0x2592 <_ZN7ht1632c8writeRowE6Stringhcc+0xde>
					dots = pgm_read_byte_near(&Font[c][4 - n]);
    2578:	f7 01       	movw	r30, r14
    257a:	ea 0d       	add	r30, r10
    257c:	fb 1d       	adc	r31, r11
    257e:	e8 59       	subi	r30, 0x98	; 152
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	04 91       	lpm	r16, Z+
					reAddress(30 - column , row, color, dots);
    2584:	69 85       	ldd	r22, Y+9	; 0x09
    2586:	6e 0d       	add	r22, r14
    2588:	c2 01       	movw	r24, r4
    258a:	48 85       	ldd	r20, Y+8	; 0x08
    258c:	22 2d       	mov	r18, r2
    258e:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
    2592:	08 94       	sec
    2594:	e1 08       	sbc	r14, r1
    2596:	f1 08       	sbc	r15, r1
			}
			else{
				c -= 32;
			}

			for (char n = 0; n < 5; n++){
    2598:	8f ef       	ldi	r24, 0xFF	; 255
    259a:	e8 16       	cp	r14, r24
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	f8 06       	cpc	r15, r24
    25a0:	d1 f6       	brne	.-76     	; 0x2556 <_ZN7ht1632c8writeRowE6Stringhcc+0xa2>
    25a2:	e6 e0       	ldi	r30, 0x06	; 6
    25a4:	7e 0e       	add	r7, r30
    25a6:	08 94       	sec
    25a8:	81 1c       	adc	r8, r1
    25aa:	91 1c       	adc	r9, r1
  byte dots;	//dots char consist of 
  byte column = 0;
  uint8_t c;		//char to write 

	if (message.length() <= 5){
		for(char i  = 0; i < message.length(); i++){
    25ac:	f6 01       	movw	r30, r12
    25ae:	84 81       	ldd	r24, Z+4	; 0x04
    25b0:	95 81       	ldd	r25, Z+5	; 0x05
    25b2:	88 16       	cp	r8, r24
    25b4:	99 06       	cpc	r9, r25
    25b6:	08 f4       	brcc	.+2      	; 0x25ba <_ZN7ht1632c8writeRowE6Stringhcc+0x106>
    25b8:	a9 cf       	rjmp	.-174    	; 0x250c <_ZN7ht1632c8writeRowE6Stringhcc+0x58>
    25ba:	87 c0       	rjmp	.+270    	; 0x26ca <_ZN7ht1632c8writeRowE6Stringhcc+0x216>
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    25bc:	5e 01       	movw	r10, r28
    25be:	08 94       	sec
    25c0:	a1 1c       	adc	r10, r1
    25c2:	b1 1c       	adc	r11, r1
    25c4:	c5 01       	movw	r24, r10
    25c6:	69 eb       	ldi	r22, 0xB9	; 185
    25c8:	71 e0       	ldi	r23, 0x01	; 1
    25ca:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
			}
			column += 1;
		}
	}
	else if(message.length() > 5){
		message = "     " + message + "           ";
    25ce:	c5 01       	movw	r24, r10
    25d0:	b6 01       	movw	r22, r12
    25d2:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZplRK15StringSumHelperRK6String>
    25d6:	6f eb       	ldi	r22, 0xBF	; 191
    25d8:	71 e0       	ldi	r23, 0x01	; 1
    25da:	0e 94 0d 19 	call	0x321a	; 0x321a <_ZplRK15StringSumHelperPKc>
    25de:	bc 01       	movw	r22, r24
    25e0:	c6 01       	movw	r24, r12
    25e2:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
{
    25e6:	c5 01       	movw	r24, r10
    25e8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <_ZN6StringD1Ev>
		for(byte n = 0; n < message.length() * 4 ; n++){
    25ec:	77 24       	eor	r7, r7

				if(language == 'e'){
					reAddress(column, row, color, dots);
				}
				else if(language == 'h'){
					reAddress(31 - column, row, color, dots);
    25ee:	bf e1       	ldi	r27, 0x1F	; 31
    25f0:	6b 2e       	mov	r6, r27
    25f2:	5e c0       	rjmp	.+188    	; 0x26b0 <_ZN7ht1632c8writeRowE6Stringhcc+0x1fc>
			column += 1;
		}
	}
	else if(message.length() > 5){
		message = "     " + message + "           ";
		for(byte n = 0; n < message.length() * 4 ; n++){
    25f4:	ff 24       	eor	r15, r15
			for(column = 0; column < 32; column++){

				if((n + column) % 6 == 5){
    25f6:	c4 01       	movw	r24, r8
    25f8:	66 e0       	ldi	r22, 0x06	; 6
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	0e 94 43 1c 	call	0x3886	; 0x3886 <__divmodhi4>
    2600:	5c 01       	movw	r10, r24
    2602:	85 30       	cpi	r24, 0x05	; 5
    2604:	91 05       	cpc	r25, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <_ZN7ht1632c8writeRowE6Stringhcc+0x156>
    2608:	39 c0       	rjmp	.+114    	; 0x267c <_ZN7ht1632c8writeRowE6Stringhcc+0x1c8>
					dots = B00000000;
				}
				else{
					c  = message.charAt((n + column) / 6 );
    260a:	c6 01       	movw	r24, r12
    260c:	0e 94 c9 19 	call	0x3392	; 0x3392 <_ZNK6String6charAtEj>

					if ( c >= '{' && c <= '~'){
    2610:	98 2f       	mov	r25, r24
    2612:	9b 57       	subi	r25, 0x7B	; 123
    2614:	94 30       	cpi	r25, 0x04	; 4
    2616:	10 f4       	brcc	.+4      	; 0x261c <_ZN7ht1632c8writeRowE6Stringhcc+0x168>
						c -= 59;
    2618:	8b 53       	subi	r24, 0x3B	; 59
    261a:	0c c0       	rjmp	.+24     	; 0x2634 <_ZN7ht1632c8writeRowE6Stringhcc+0x180>
					}
				else if (c >= 97 && c <= 123 || c == 127){ //  �: � = 97 �� �: = 122 � �: = 127
    261c:	98 2f       	mov	r25, r24
    261e:	91 56       	subi	r25, 0x61	; 97
    2620:	9b 31       	cpi	r25, 0x1B	; 27
    2622:	18 f0       	brcs	.+6      	; 0x262a <_ZN7ht1632c8writeRowE6Stringhcc+0x176>
    2624:	8f 37       	cpi	r24, 0x7F	; 127
    2626:	19 f4       	brne	.+6      	; 0x262e <_ZN7ht1632c8writeRowE6Stringhcc+0x17a>
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <_ZN7ht1632c8writeRowE6Stringhcc+0x17e>
					if (c == 127){
						c = 94;
					}
					else{
						c -= 29;
    262a:	8d 51       	subi	r24, 0x1D	; 29
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <_ZN7ht1632c8writeRowE6Stringhcc+0x180>
					}
				}
				else{
					c -= 32;
    262e:	80 52       	subi	r24, 0x20	; 32
    2630:	01 c0       	rjmp	.+2      	; 0x2634 <_ZN7ht1632c8writeRowE6Stringhcc+0x180>
					if ( c >= '{' && c <= '~'){
						c -= 59;
					}
				else if (c >= 97 && c <= 123 || c == 127){ //  �: � = 97 �� �: = 122 � �: = 127
					if (c == 127){
						c = 94;
    2632:	8e e5       	ldi	r24, 0x5E	; 94
				else{
					c -= 32;
				}


						if(language == 'e'){
    2634:	15 36       	cpi	r17, 0x65	; 101
    2636:	71 f4       	brne	.+28     	; 0x2654 <_ZN7ht1632c8writeRowE6Stringhcc+0x1a0>
							dots = pgm_read_byte_near(&Font[c][(n + column) % 6]);
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	fc 01       	movw	r30, r24
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	e8 0f       	add	r30, r24
    2646:	f9 1f       	adc	r31, r25
    2648:	ea 0d       	add	r30, r10
    264a:	fb 1d       	adc	r31, r11
    264c:	e8 59       	subi	r30, 0x98	; 152
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	e4 90       	lpm	r14, Z+
    2652:	17 c0       	rjmp	.+46     	; 0x2682 <_ZN7ht1632c8writeRowE6Stringhcc+0x1ce>
					}
					else if(language == 'h'){
    2654:	18 36       	cpi	r17, 0x68	; 104
    2656:	c9 f4       	brne	.+50     	; 0x268a <_ZN7ht1632c8writeRowE6Stringhcc+0x1d6>
						dots = pgm_read_byte_near(&Font[c][4 - ((n + column) % 6) ]);
    2658:	e4 e0       	ldi	r30, 0x04	; 4
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	ea 19       	sub	r30, r10
    265e:	fb 09       	sbc	r31, r11
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 01       	movw	r18, r24
    2664:	22 0f       	add	r18, r18
    2666:	33 1f       	adc	r19, r19
    2668:	22 0f       	add	r18, r18
    266a:	33 1f       	adc	r19, r19
    266c:	28 0f       	add	r18, r24
    266e:	39 1f       	adc	r19, r25
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	e8 59       	subi	r30, 0x98	; 152
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	e4 90       	lpm	r14, Z+
    267a:	09 c0       	rjmp	.+18     	; 0x268e <_ZN7ht1632c8writeRowE6Stringhcc+0x1da>
					}
				}

				if(language == 'e'){
    267c:	15 36       	cpi	r17, 0x65	; 101
    267e:	21 f4       	brne	.+8      	; 0x2688 <_ZN7ht1632c8writeRowE6Stringhcc+0x1d4>
		message = "     " + message + "           ";
		for(byte n = 0; n < message.length() * 4 ; n++){
			for(column = 0; column < 32; column++){

				if((n + column) % 6 == 5){
					dots = B00000000;
    2680:	ee 24       	eor	r14, r14
						dots = pgm_read_byte_near(&Font[c][4 - ((n + column) % 6) ]);
					}
				}

				if(language == 'e'){
					reAddress(column, row, color, dots);
    2682:	c2 01       	movw	r24, r4
    2684:	6f 2d       	mov	r22, r15
    2686:	06 c0       	rjmp	.+12     	; 0x2694 <_ZN7ht1632c8writeRowE6Stringhcc+0x1e0>
		message = "     " + message + "           ";
		for(byte n = 0; n < message.length() * 4 ; n++){
			for(column = 0; column < 32; column++){

				if((n + column) % 6 == 5){
					dots = B00000000;
    2688:	ee 24       	eor	r14, r14
				}

				if(language == 'e'){
					reAddress(column, row, color, dots);
				}
				else if(language == 'h'){
    268a:	18 36       	cpi	r17, 0x68	; 104
    268c:	41 f4       	brne	.+16     	; 0x269e <_ZN7ht1632c8writeRowE6Stringhcc+0x1ea>
					reAddress(31 - column, row, color, dots);
    268e:	66 2d       	mov	r22, r6
    2690:	6f 19       	sub	r22, r15
    2692:	c2 01       	movw	r24, r4
    2694:	48 85       	ldd	r20, Y+8	; 0x08
    2696:	22 2d       	mov	r18, r2
    2698:	0e 2d       	mov	r16, r14
    269a:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
		}
	}
	else if(message.length() > 5){
		message = "     " + message + "           ";
		for(byte n = 0; n < message.length() * 4 ; n++){
			for(column = 0; column < 32; column++){
    269e:	f3 94       	inc	r15
    26a0:	08 94       	sec
    26a2:	81 1c       	adc	r8, r1
    26a4:	91 1c       	adc	r9, r1
    26a6:	8f 2d       	mov	r24, r15
    26a8:	80 32       	cpi	r24, 0x20	; 32
    26aa:	09 f0       	breq	.+2      	; 0x26ae <_ZN7ht1632c8writeRowE6Stringhcc+0x1fa>
    26ac:	a4 cf       	rjmp	.-184    	; 0x25f6 <_ZN7ht1632c8writeRowE6Stringhcc+0x142>
			column += 1;
		}
	}
	else if(message.length() > 5){
		message = "     " + message + "           ";
		for(byte n = 0; n < message.length() * 4 ; n++){
    26ae:	73 94       	inc	r7
    26b0:	87 2c       	mov	r8, r7
    26b2:	99 24       	eor	r9, r9
    26b4:	f6 01       	movw	r30, r12
    26b6:	84 81       	ldd	r24, Z+4	; 0x04
    26b8:	95 81       	ldd	r25, Z+5	; 0x05
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	88 16       	cp	r8, r24
    26c4:	99 06       	cpc	r9, r25
    26c6:	08 f4       	brcc	.+2      	; 0x26ca <_ZN7ht1632c8writeRowE6Stringhcc+0x216>
    26c8:	95 cf       	rjmp	.-214    	; 0x25f4 <_ZN7ht1632c8writeRowE6Stringhcc+0x140>
					reAddress(31 - column, row, color, dots);
				}
			}
		}
	}
}	
    26ca:	29 96       	adiw	r28, 0x09	; 9
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	ef 90       	pop	r14
    26e2:	df 90       	pop	r13
    26e4:	cf 90       	pop	r12
    26e6:	bf 90       	pop	r11
    26e8:	af 90       	pop	r10
    26ea:	9f 90       	pop	r9
    26ec:	8f 90       	pop	r8
    26ee:	7f 90       	pop	r7
    26f0:	6f 90       	pop	r6
    26f2:	5f 90       	pop	r5
    26f4:	4f 90       	pop	r4
    26f6:	3f 90       	pop	r3
    26f8:	2f 90       	pop	r2
    26fa:	08 95       	ret

000026fc <_ZN7ht1632c10resetBoardEv>:
 *resetBoard - reset all pixel/led states 
 *Syntax:     resetBoard()
 *Parameters: none || row to reset (0 for first 1 for second row) 
 *Returns:    none
 */
void ht1632c::resetBoard(){
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	ec 01       	movw	r28, r24
  for(byte i = 0; i < 32; i++){
    2706:	10 e0       	ldi	r17, 0x00	; 0
    reAddress(i, 0, 'r', B00000000); //Reset first row 
    2708:	ce 01       	movw	r24, r28
    270a:	61 2f       	mov	r22, r17
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	22 e7       	ldi	r18, 0x72	; 114
    2710:	00 e0       	ldi	r16, 0x00	; 0
    2712:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	reAddress(i, 0, 'g', B00000000); 
    2716:	ce 01       	movw	r24, r28
    2718:	61 2f       	mov	r22, r17
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	27 e6       	ldi	r18, 0x67	; 103
    271e:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
    reAddress(i, 1, 'r', B00000000); //Reset second row 
    2722:	ce 01       	movw	r24, r28
    2724:	61 2f       	mov	r22, r17
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	22 e7       	ldi	r18, 0x72	; 114
    272a:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	reAddress(i, 1, 'g', B00000000); 
    272e:	ce 01       	movw	r24, r28
    2730:	61 2f       	mov	r22, r17
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	27 e6       	ldi	r18, 0x67	; 103
    2736:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
 *Syntax:     resetBoard()
 *Parameters: none || row to reset (0 for first 1 for second row) 
 *Returns:    none
 */
void ht1632c::resetBoard(){
  for(byte i = 0; i < 32; i++){
    273a:	1f 5f       	subi	r17, 0xFF	; 255
    273c:	10 32       	cpi	r17, 0x20	; 32
    273e:	21 f7       	brne	.-56     	; 0x2708 <_ZN7ht1632c10resetBoardEv+0xc>
    reAddress(i, 0, 'r', B00000000); //Reset first row 
	reAddress(i, 0, 'g', B00000000); 
    reAddress(i, 1, 'r', B00000000); //Reset second row 
	reAddress(i, 1, 'g', B00000000); 
  }
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	08 95       	ret

0000274a <_ZN7ht1632cC1Ehhhh>:
#include "ht1632c.h"                     // Holtek LED driver by WestFW - updated to HT1632C by Nick Hall
#include <avr/pgmspace.h>                // Enable data to be stored in Flash Mem as well as SRAM              
#include "NewFont.h"                     // Font library
#include <Arduino.h>
   
ht1632c::ht1632c(byte ht1632_cs, byte ht1632_clk, byte ht1632_wrclk, byte ht1632_data){
    274a:	af 92       	push	r10
    274c:	bf 92       	push	r11
    274e:	cf 92       	push	r12
    2750:	df 92       	push	r13
    2752:	ef 92       	push	r14
    2754:	ff 92       	push	r15
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	ec 01       	movw	r28, r24
    2760:	86 2f       	mov	r24, r22
	_ht1632_cs = ht1632_cs;			//Chip select signal input
    2762:	fe 01       	movw	r30, r28
    2764:	e0 58       	subi	r30, 0x80	; 128
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 83       	st	Z, r22
	_ht1632_clk = ht1632_clk;		//Chip select clock signal input
    276a:	51 e8       	ldi	r21, 0x81	; 129
    276c:	c5 2e       	mov	r12, r21
    276e:	d1 2c       	mov	r13, r1
    2770:	cc 0e       	add	r12, r28
    2772:	dd 1e       	adc	r13, r29
    2774:	f6 01       	movw	r30, r12
    2776:	40 83       	st	Z, r20
	_ht1632_wrclk = ht1632_wrclk;	        //Write data clock input
    2778:	42 e8       	ldi	r20, 0x82	; 130
    277a:	a4 2e       	mov	r10, r20
    277c:	b1 2c       	mov	r11, r1
    277e:	ac 0e       	add	r10, r28
    2780:	bd 1e       	adc	r11, r29
    2782:	f5 01       	movw	r30, r10
    2784:	20 83       	st	Z, r18
	_ht1632_data = ht1632_data;		//Data input
    2786:	33 e8       	ldi	r19, 0x83	; 131
    2788:	e3 2e       	mov	r14, r19
    278a:	f1 2c       	mov	r15, r1
    278c:	ec 0e       	add	r14, r28
    278e:	fd 1e       	adc	r15, r29
    2790:	f7 01       	movw	r30, r14
    2792:	00 83       	st	Z, r16

  pinMode(_ht1632_cs, OUTPUT);
    2794:	61 e0       	ldi	r22, 0x01	; 1
    2796:	0e 94 b1 1b 	call	0x3762	; 0x3762 <pinMode>
  pinMode(_ht1632_clk, OUTPUT);
    279a:	f6 01       	movw	r30, r12
    279c:	80 81       	ld	r24, Z
    279e:	61 e0       	ldi	r22, 0x01	; 1
    27a0:	0e 94 b1 1b 	call	0x3762	; 0x3762 <pinMode>
  pinMode(_ht1632_wrclk, OUTPUT);
    27a4:	f5 01       	movw	r30, r10
    27a6:	80 81       	ld	r24, Z
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	0e 94 b1 1b 	call	0x3762	; 0x3762 <pinMode>
  pinMode(_ht1632_data, OUTPUT);
    27ae:	f7 01       	movw	r30, r14
    27b0:	80 81       	ld	r24, Z
    27b2:	61 e0       	ldi	r22, 0x01	; 1
    27b4:	0e 94 b1 1b 	call	0x3762	; 0x3762 <pinMode>

  for (byte c = 0; c < 4; c++){  
    27b8:	10 e0       	ldi	r17, 0x00	; 0
    sendCmd(c, HT1632_CMD_SYSON);    // System on 
    27ba:	ce 01       	movw	r24, r28
    27bc:	61 2f       	mov	r22, r17
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN7ht1632c7sendCmdEhh>
    sendCmd(c, HT1632_CMD_LEDON);    // LEDs on 
    27c4:	ce 01       	movw	r24, r28
    27c6:	61 2f       	mov	r22, r17
    27c8:	43 e0       	ldi	r20, 0x03	; 3
    27ca:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN7ht1632c7sendCmdEhh>
    sendCmd(c, HT1632_CMD_COMS00);   // NMOS Output 8 COM X 16 Rows X 2 Colors
    27ce:	ce 01       	movw	r24, r28
    27d0:	61 2f       	mov	r22, r17
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN7ht1632c7sendCmdEhh>
  pinMode(_ht1632_cs, OUTPUT);
  pinMode(_ht1632_clk, OUTPUT);
  pinMode(_ht1632_wrclk, OUTPUT);
  pinMode(_ht1632_data, OUTPUT);

  for (byte c = 0; c < 4; c++){  
    27d8:	1f 5f       	subi	r17, 0xFF	; 255
    27da:	14 30       	cpi	r17, 0x04	; 4
    27dc:	71 f7       	brne	.-36     	; 0x27ba <_ZN7ht1632cC1Ehhhh+0x70>
    sendCmd(c, HT1632_CMD_SYSON);    // System on 
    sendCmd(c, HT1632_CMD_LEDON);    // LEDs on 
    sendCmd(c, HT1632_CMD_COMS00);   // NMOS Output 8 COM X 16 Rows X 2 Colors
  }
  
  resetBoard();
    27de:	ce 01       	movw	r24, r28
    27e0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <_ZN7ht1632c10resetBoardEv>
}
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	ff 90       	pop	r15
    27ee:	ef 90       	pop	r14
    27f0:	df 90       	pop	r13
    27f2:	cf 90       	pop	r12
    27f4:	bf 90       	pop	r11
    27f6:	af 90       	pop	r10
    27f8:	08 95       	ret

000027fa <_ZN7ht1632c10resetBoardEh>:
    reAddress(i, 1, 'r', B00000000); //Reset second row 
	reAddress(i, 1, 'g', B00000000); 
  }
}

void ht1632c::resetBoard(boolean row){
    27fa:	ff 92       	push	r15
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	ec 01       	movw	r28, r24
    2806:	f6 2e       	mov	r15, r22
  for(byte i = 0; i < 32; i++){
    2808:	10 e0       	ldi	r17, 0x00	; 0
    reAddress(i, row, 'r', B00000000); //Reset some row 
    280a:	ce 01       	movw	r24, r28
    280c:	61 2f       	mov	r22, r17
    280e:	4f 2d       	mov	r20, r15
    2810:	22 e7       	ldi	r18, 0x72	; 114
    2812:	00 e0       	ldi	r16, 0x00	; 0
    2814:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	reAddress(i, row, 'g', B00000000);
    2818:	ce 01       	movw	r24, r28
    281a:	61 2f       	mov	r22, r17
    281c:	4f 2d       	mov	r20, r15
    281e:	27 e6       	ldi	r18, 0x67	; 103
    2820:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7ht1632c9reAddressEhhch>
	reAddress(i, 1, 'g', B00000000); 
  }
}

void ht1632c::resetBoard(boolean row){
  for(byte i = 0; i < 32; i++){
    2824:	1f 5f       	subi	r17, 0xFF	; 255
    2826:	10 32       	cpi	r17, 0x20	; 32
    2828:	81 f7       	brne	.-32     	; 0x280a <_ZN7ht1632c10resetBoardEh+0x10>
    reAddress(i, row, 'r', B00000000); //Reset some row 
	reAddress(i, row, 'g', B00000000);
  }
}
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	08 95       	ret

00002836 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    2836:	fc 01       	movw	r30, r24
    2838:	84 85       	ldd	r24, Z+12	; 0x0c
    283a:	95 85       	ldd	r25, Z+13	; 0x0d
    283c:	fc 01       	movw	r30, r24
    283e:	e0 5c       	subi	r30, 0xC0	; 192
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	20 81       	ld	r18, Z
    2844:	31 81       	ldd	r19, Z+1	; 0x01
    2846:	8e 5b       	subi	r24, 0xBE	; 190
    2848:	9f 4f       	sbci	r25, 0xFF	; 255
    284a:	fc 01       	movw	r30, r24
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	28 1b       	sub	r18, r24
    2852:	39 0b       	sbc	r19, r25
    2854:	2f 73       	andi	r18, 0x3F	; 63
    2856:	30 70       	andi	r19, 0x00	; 0
}
    2858:	c9 01       	movw	r24, r18
    285a:	08 95       	ret

0000285c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    285c:	fc 01       	movw	r30, r24
    285e:	84 85       	ldd	r24, Z+12	; 0x0c
    2860:	95 85       	ldd	r25, Z+13	; 0x0d
    2862:	fc 01       	movw	r30, r24
    2864:	e0 5c       	subi	r30, 0xC0	; 192
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	40 81       	ld	r20, Z
    286a:	51 81       	ldd	r21, Z+1	; 0x01
    286c:	fc 01       	movw	r30, r24
    286e:	ee 5b       	subi	r30, 0xBE	; 190
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	20 81       	ld	r18, Z
    2874:	31 81       	ldd	r19, Z+1	; 0x01
    2876:	42 17       	cp	r20, r18
    2878:	53 07       	cpc	r21, r19
    287a:	41 f0       	breq	.+16     	; 0x288c <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    287c:	01 90       	ld	r0, Z+
    287e:	f0 81       	ld	r31, Z
    2880:	e0 2d       	mov	r30, r0
    2882:	e8 0f       	add	r30, r24
    2884:	f9 1f       	adc	r31, r25
    2886:	20 81       	ld	r18, Z
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    288c:	2f ef       	ldi	r18, 0xFF	; 255
    288e:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    2890:	c9 01       	movw	r24, r18
    2892:	08 95       	ret

00002894 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    2894:	fc 01       	movw	r30, r24
    2896:	84 85       	ldd	r24, Z+12	; 0x0c
    2898:	95 85       	ldd	r25, Z+13	; 0x0d
    289a:	fc 01       	movw	r30, r24
    289c:	e0 5c       	subi	r30, 0xC0	; 192
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	40 81       	ld	r20, Z
    28a2:	51 81       	ldd	r21, Z+1	; 0x01
    28a4:	fc 01       	movw	r30, r24
    28a6:	ee 5b       	subi	r30, 0xBE	; 190
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	20 81       	ld	r18, Z
    28ac:	31 81       	ldd	r19, Z+1	; 0x01
    28ae:	42 17       	cp	r20, r18
    28b0:	53 07       	cpc	r21, r19
    28b2:	71 f0       	breq	.+28     	; 0x28d0 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    28b4:	a0 81       	ld	r26, Z
    28b6:	b1 81       	ldd	r27, Z+1	; 0x01
    28b8:	a8 0f       	add	r26, r24
    28ba:	b9 1f       	adc	r27, r25
    28bc:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	8f 73       	andi	r24, 0x3F	; 63
    28c6:	90 70       	andi	r25, 0x00	; 0
    28c8:	91 83       	std	Z+1, r25	; 0x01
    28ca:	80 83       	st	Z, r24
    return c;
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    28d0:	2f ef       	ldi	r18, 0xFF	; 255
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    28d4:	c9 01       	movw	r24, r18
    28d6:	08 95       	ret

000028d8 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    28d8:	dc 01       	movw	r26, r24
    28da:	1e 96       	adiw	r26, 0x0e	; 14
    28dc:	8d 91       	ld	r24, X+
    28de:	9c 91       	ld	r25, X
    28e0:	1f 97       	sbiw	r26, 0x0f	; 15
    28e2:	fc 01       	movw	r30, r24
    28e4:	e0 5c       	subi	r30, 0xC0	; 192
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	8e 5b       	subi	r24, 0xBE	; 190
    28ea:	9f 4f       	sbci	r25, 0xFF	; 255
    28ec:	40 81       	ld	r20, Z
    28ee:	51 81       	ldd	r21, Z+1	; 0x01
    28f0:	dc 01       	movw	r26, r24
    28f2:	2d 91       	ld	r18, X+
    28f4:	3c 91       	ld	r19, X
    28f6:	11 97       	sbiw	r26, 0x01	; 1
    28f8:	42 17       	cp	r20, r18
    28fa:	53 07       	cpc	r21, r19
    28fc:	b9 f7       	brne	.-18     	; 0x28ec <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    28fe:	08 95       	ret

00002900 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    2900:	1f 93       	push	r17
    2902:	fc 01       	movw	r30, r24
    2904:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2906:	26 85       	ldd	r18, Z+14	; 0x0e
    2908:	37 85       	ldd	r19, Z+15	; 0x0f
    290a:	d9 01       	movw	r26, r18
    290c:	a0 5c       	subi	r26, 0xC0	; 192
    290e:	bf 4f       	sbci	r27, 0xFF	; 255
    2910:	8d 91       	ld	r24, X+
    2912:	9c 91       	ld	r25, X
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	60 e4       	ldi	r22, 0x40	; 64
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	0e 94 43 1c 	call	0x3886	; 0x3886 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    291e:	d9 01       	movw	r26, r18
    2920:	ae 5b       	subi	r26, 0xBE	; 190
    2922:	bf 4f       	sbci	r27, 0xFF	; 255
    2924:	4d 91       	ld	r20, X+
    2926:	5c 91       	ld	r21, X
    2928:	11 97       	sbiw	r26, 0x01	; 1
    292a:	84 17       	cp	r24, r20
    292c:	95 07       	cpc	r25, r21
    292e:	d1 f3       	breq	.-12     	; 0x2924 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    2930:	d9 01       	movw	r26, r18
    2932:	a0 5c       	subi	r26, 0xC0	; 192
    2934:	bf 4f       	sbci	r27, 0xFF	; 255
    2936:	0d 90       	ld	r0, X+
    2938:	bc 91       	ld	r27, X
    293a:	a0 2d       	mov	r26, r0
    293c:	a2 0f       	add	r26, r18
    293e:	b3 1f       	adc	r27, r19
    2940:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    2942:	a6 85       	ldd	r26, Z+14	; 0x0e
    2944:	b7 85       	ldd	r27, Z+15	; 0x0f
    2946:	a0 5c       	subi	r26, 0xC0	; 192
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	11 96       	adiw	r26, 0x01	; 1
    294c:	9c 93       	st	X, r25
    294e:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    2950:	a6 89       	ldd	r26, Z+22	; 0x16
    2952:	b7 89       	ldd	r27, Z+23	; 0x17
    2954:	2c 91       	ld	r18, X
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	05 8c       	ldd	r0, Z+29	; 0x1d
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <_ZN14HardwareSerial5writeEh+0x62>
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	0a 94       	dec	r0
    2964:	e2 f7       	brpl	.-8      	; 0x295e <_ZN14HardwareSerial5writeEh+0x5e>
    2966:	28 2b       	or	r18, r24
    2968:	2c 93       	st	X, r18
  
  return 1;
}
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	1f 91       	pop	r17
    2970:	08 95       	ret

00002972 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    2972:	fb 01       	movw	r30, r22
    2974:	e0 5c       	subi	r30, 0xC0	; 192
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	20 81       	ld	r18, Z
    297a:	31 81       	ldd	r19, Z+1	; 0x01
    297c:	2f 5f       	subi	r18, 0xFF	; 255
    297e:	3f 4f       	sbci	r19, 0xFF	; 255
    2980:	2f 73       	andi	r18, 0x3F	; 63
    2982:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    2984:	db 01       	movw	r26, r22
    2986:	ae 5b       	subi	r26, 0xBE	; 190
    2988:	bf 4f       	sbci	r27, 0xFF	; 255
    298a:	4d 91       	ld	r20, X+
    298c:	5c 91       	ld	r21, X
    298e:	11 97       	sbiw	r26, 0x01	; 1
    2990:	24 17       	cp	r18, r20
    2992:	35 07       	cpc	r19, r21
    2994:	39 f0       	breq	.+14     	; 0x29a4 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    2996:	a0 81       	ld	r26, Z
    2998:	b1 81       	ldd	r27, Z+1	; 0x01
    299a:	a6 0f       	add	r26, r22
    299c:	b7 1f       	adc	r27, r23
    299e:	8c 93       	st	X, r24
    buffer->head = i;
    29a0:	31 83       	std	Z+1, r19	; 0x01
    29a2:	20 83       	st	Z, r18
    29a4:	08 95       	ret

000029a6 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    29a6:	08 95       	ret

000029a8 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	2f 93       	push	r18
    29b4:	3f 93       	push	r19
    29b6:	4f 93       	push	r20
    29b8:	5f 93       	push	r21
    29ba:	6f 93       	push	r22
    29bc:	7f 93       	push	r23
    29be:	8f 93       	push	r24
    29c0:	9f 93       	push	r25
    29c2:	af 93       	push	r26
    29c4:	bf 93       	push	r27
    29c6:	ef 93       	push	r30
    29c8:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    29ca:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    29ce:	64 ef       	ldi	r22, 0xF4	; 244
    29d0:	73 e0       	ldi	r23, 0x03	; 3
    29d2:	0e 94 b9 14 	call	0x2972	; 0x2972 <_Z10store_charhP11ring_buffer>
  }
    29d6:	ff 91       	pop	r31
    29d8:	ef 91       	pop	r30
    29da:	bf 91       	pop	r27
    29dc:	af 91       	pop	r26
    29de:	9f 91       	pop	r25
    29e0:	8f 91       	pop	r24
    29e2:	7f 91       	pop	r23
    29e4:	6f 91       	pop	r22
    29e6:	5f 91       	pop	r21
    29e8:	4f 91       	pop	r20
    29ea:	3f 91       	pop	r19
    29ec:	2f 91       	pop	r18
    29ee:	0f 90       	pop	r0
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	0f 90       	pop	r0
    29f4:	1f 90       	pop	r1
    29f6:	18 95       	reti

000029f8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    29f8:	8c e7       	ldi	r24, 0x7C	; 124
    29fa:	94 e0       	ldi	r25, 0x04	; 4
    29fc:	0e 94 1b 14 	call	0x2836	; 0x2836 <_ZN14HardwareSerial9availableEv>
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	11 f0       	breq	.+4      	; 0x2a08 <_Z14serialEventRunv+0x10>
    2a04:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_Z11serialEventv>
    2a08:	08 95       	ret

00002a0a <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    2a0a:	1f 92       	push	r1
    2a0c:	0f 92       	push	r0
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	0f 92       	push	r0
    2a12:	11 24       	eor	r1, r1
    2a14:	2f 93       	push	r18
    2a16:	3f 93       	push	r19
    2a18:	5f 93       	push	r21
    2a1a:	6f 93       	push	r22
    2a1c:	7f 93       	push	r23
    2a1e:	8f 93       	push	r24
    2a20:	9f 93       	push	r25
    2a22:	af 93       	push	r26
    2a24:	bf 93       	push	r27
    2a26:	ef 93       	push	r30
    2a28:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    2a2a:	20 91 78 04 	lds	r18, 0x0478
    2a2e:	30 91 79 04 	lds	r19, 0x0479
    2a32:	80 91 7a 04 	lds	r24, 0x047A
    2a36:	90 91 7b 04 	lds	r25, 0x047B
    2a3a:	28 17       	cp	r18, r24
    2a3c:	39 07       	cpc	r19, r25
    2a3e:	31 f4       	brne	.+12     	; 0x2a4c <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    2a40:	80 91 c1 00 	lds	r24, 0x00C1
    2a44:	8f 7d       	andi	r24, 0xDF	; 223
    2a46:	80 93 c1 00 	sts	0x00C1, r24
    2a4a:	16 c0       	rjmp	.+44     	; 0x2a78 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    2a4c:	e0 91 7a 04 	lds	r30, 0x047A
    2a50:	f0 91 7b 04 	lds	r31, 0x047B
    2a54:	e8 5c       	subi	r30, 0xC8	; 200
    2a56:	fb 4f       	sbci	r31, 0xFB	; 251
    2a58:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    2a5a:	80 91 7a 04 	lds	r24, 0x047A
    2a5e:	90 91 7b 04 	lds	r25, 0x047B
    2a62:	01 96       	adiw	r24, 0x01	; 1
    2a64:	60 e4       	ldi	r22, 0x40	; 64
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	0e 94 43 1c 	call	0x3886	; 0x3886 <__divmodhi4>
    2a6c:	90 93 7b 04 	sts	0x047B, r25
    2a70:	80 93 7a 04 	sts	0x047A, r24
	
  #if defined(UDR0)
    UDR0 = c;
    2a74:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    2a78:	ff 91       	pop	r31
    2a7a:	ef 91       	pop	r30
    2a7c:	bf 91       	pop	r27
    2a7e:	af 91       	pop	r26
    2a80:	9f 91       	pop	r25
    2a82:	8f 91       	pop	r24
    2a84:	7f 91       	pop	r23
    2a86:	6f 91       	pop	r22
    2a88:	5f 91       	pop	r21
    2a8a:	3f 91       	pop	r19
    2a8c:	2f 91       	pop	r18
    2a8e:	0f 90       	pop	r0
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	0f 90       	pop	r0
    2a94:	1f 90       	pop	r1
    2a96:	18 95       	reti

00002a98 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    2a98:	df 92       	push	r13
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	ec 01       	movw	r28, r24
    2aa8:	7a 01       	movw	r14, r20
    2aaa:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    2aac:	dd 24       	eor	r13, r13
    2aae:	d3 94       	inc	r13
    2ab0:	40 30       	cpi	r20, 0x00	; 0
    2ab2:	81 ee       	ldi	r24, 0xE1	; 225
    2ab4:	58 07       	cpc	r21, r24
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	68 07       	cpc	r22, r24
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	78 07       	cpc	r23, r24
    2abe:	49 f4       	brne	.+18     	; 0x2ad2 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    2ac0:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    2ac2:	ec 89       	ldd	r30, Y+20	; 0x14
    2ac4:	fd 89       	ldd	r31, Y+21	; 0x15
    2ac6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2ac8:	60 e8       	ldi	r22, 0x80	; 128
    2aca:	74 e8       	ldi	r23, 0x84	; 132
    2acc:	8e e1       	ldi	r24, 0x1E	; 30
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    2ad2:	ec 89       	ldd	r30, Y+20	; 0x14
    2ad4:	fd 89       	ldd	r31, Y+21	; 0x15
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <_ZN14HardwareSerial5beginEm+0x4a>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <_ZN14HardwareSerial5beginEm+0x46>
    2ae6:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2ae8:	60 e0       	ldi	r22, 0x00	; 0
    2aea:	79 e0       	ldi	r23, 0x09	; 9
    2aec:	8d e3       	ldi	r24, 0x3D	; 61
    2aee:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2af0:	a8 01       	movw	r20, r16
    2af2:	97 01       	movw	r18, r14
    2af4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__udivmodsi4>
    2af8:	21 50       	subi	r18, 0x01	; 1
    2afa:	30 40       	sbci	r19, 0x00	; 0
    2afc:	40 40       	sbci	r20, 0x00	; 0
    2afe:	50 40       	sbci	r21, 0x00	; 0
    2b00:	56 95       	lsr	r21
    2b02:	47 95       	ror	r20
    2b04:	37 95       	ror	r19
    2b06:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    2b08:	80 e1       	ldi	r24, 0x10	; 16
    2b0a:	20 30       	cpi	r18, 0x00	; 0
    2b0c:	38 07       	cpc	r19, r24
    2b0e:	10 f0       	brcs	.+4      	; 0x2b14 <_ZN14HardwareSerial5beginEm+0x7c>
    2b10:	dd 20       	and	r13, r13
    2b12:	b1 f6       	brne	.-84     	; 0x2ac0 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2b14:	e8 89       	ldd	r30, Y+16	; 0x10
    2b16:	f9 89       	ldd	r31, Y+17	; 0x11
    2b18:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2b1a:	ea 89       	ldd	r30, Y+18	; 0x12
    2b1c:	fb 89       	ldd	r31, Y+19	; 0x13
    2b1e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    2b20:	ee 89       	ldd	r30, Y+22	; 0x16
    2b22:	ff 89       	ldd	r31, Y+23	; 0x17
    2b24:	40 81       	ld	r20, Z
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9c 01       	movw	r18, r24
    2b2c:	0a 8c       	ldd	r0, Y+26	; 0x1a
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <_ZN14HardwareSerial5beginEm+0x9c>
    2b30:	22 0f       	add	r18, r18
    2b32:	33 1f       	adc	r19, r19
    2b34:	0a 94       	dec	r0
    2b36:	e2 f7       	brpl	.-8      	; 0x2b30 <_ZN14HardwareSerial5beginEm+0x98>
    2b38:	42 2b       	or	r20, r18
    2b3a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    2b3c:	ee 89       	ldd	r30, Y+22	; 0x16
    2b3e:	ff 89       	ldd	r31, Y+23	; 0x17
    2b40:	40 81       	ld	r20, Z
    2b42:	9c 01       	movw	r18, r24
    2b44:	0b 8c       	ldd	r0, Y+27	; 0x1b
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <_ZN14HardwareSerial5beginEm+0xb4>
    2b48:	22 0f       	add	r18, r18
    2b4a:	33 1f       	adc	r19, r19
    2b4c:	0a 94       	dec	r0
    2b4e:	e2 f7       	brpl	.-8      	; 0x2b48 <_ZN14HardwareSerial5beginEm+0xb0>
    2b50:	42 2b       	or	r20, r18
    2b52:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    2b54:	ee 89       	ldd	r30, Y+22	; 0x16
    2b56:	ff 89       	ldd	r31, Y+23	; 0x17
    2b58:	40 81       	ld	r20, Z
    2b5a:	9c 01       	movw	r18, r24
    2b5c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <_ZN14HardwareSerial5beginEm+0xcc>
    2b60:	22 0f       	add	r18, r18
    2b62:	33 1f       	adc	r19, r19
    2b64:	0a 94       	dec	r0
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <_ZN14HardwareSerial5beginEm+0xc8>
    2b68:	42 2b       	or	r20, r18
    2b6a:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    2b6c:	ee 89       	ldd	r30, Y+22	; 0x16
    2b6e:	ff 89       	ldd	r31, Y+23	; 0x17
    2b70:	20 81       	ld	r18, Z
    2b72:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <_ZN14HardwareSerial5beginEm+0xe2>
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	0a 94       	dec	r0
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <_ZN14HardwareSerial5beginEm+0xde>
    2b7e:	80 95       	com	r24
    2b80:	82 23       	and	r24, r18
    2b82:	80 83       	st	Z, r24
}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	08 95       	ret

00002b94 <_GLOBAL__I_rx_buffer>:
    2b94:	10 92 7f 04 	sts	0x047F, r1
    2b98:	10 92 7e 04 	sts	0x047E, r1
    2b9c:	88 ee       	ldi	r24, 0xE8	; 232
    2b9e:	93 e0       	ldi	r25, 0x03	; 3
    2ba0:	a0 e0       	ldi	r26, 0x00	; 0
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	80 93 80 04 	sts	0x0480, r24
    2ba8:	90 93 81 04 	sts	0x0481, r25
    2bac:	a0 93 82 04 	sts	0x0482, r26
    2bb0:	b0 93 83 04 	sts	0x0483, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2bb4:	ee e7       	ldi	r30, 0x7E	; 126
    2bb6:	f4 e0       	ldi	r31, 0x04	; 4
    2bb8:	8a ee       	ldi	r24, 0xEA	; 234
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	92 93       	st	-Z, r25
    2bbe:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    2bc0:	84 ef       	ldi	r24, 0xF4	; 244
    2bc2:	93 e0       	ldi	r25, 0x03	; 3
    2bc4:	95 87       	std	Z+13, r25	; 0x0d
    2bc6:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    2bc8:	88 e3       	ldi	r24, 0x38	; 56
    2bca:	94 e0       	ldi	r25, 0x04	; 4
    2bcc:	97 87       	std	Z+15, r25	; 0x0f
    2bce:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    2bd0:	85 ec       	ldi	r24, 0xC5	; 197
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	91 8b       	std	Z+17, r25	; 0x11
    2bd6:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    2bd8:	84 ec       	ldi	r24, 0xC4	; 196
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	93 8b       	std	Z+19, r25	; 0x13
    2bde:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    2be0:	80 ec       	ldi	r24, 0xC0	; 192
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	95 8b       	std	Z+21, r25	; 0x15
    2be6:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    2be8:	81 ec       	ldi	r24, 0xC1	; 193
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	97 8b       	std	Z+23, r25	; 0x17
    2bee:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    2bf0:	86 ec       	ldi	r24, 0xC6	; 198
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	91 8f       	std	Z+25, r25	; 0x19
    2bf6:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    2bf8:	84 e0       	ldi	r24, 0x04	; 4
    2bfa:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    2bfc:	83 e0       	ldi	r24, 0x03	; 3
    2bfe:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    2c00:	87 e0       	ldi	r24, 0x07	; 7
    2c02:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    2c04:	85 e0       	ldi	r24, 0x05	; 5
    2c06:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    2c0c:	08 95       	ret

00002c0e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2c0e:	cf 92       	push	r12
    2c10:	df 92       	push	r13
    2c12:	ef 92       	push	r14
    2c14:	ff 92       	push	r15
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	6c 01       	movw	r12, r24
    2c20:	7b 01       	movw	r14, r22
    2c22:	8a 01       	movw	r16, r20
  size_t n = 0;
    2c24:	c0 e0       	ldi	r28, 0x00	; 0
    2c26:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    2c2a:	d7 01       	movw	r26, r14
    2c2c:	6d 91       	ld	r22, X+
    2c2e:	7d 01       	movw	r14, r26
    2c30:	d6 01       	movw	r26, r12
    2c32:	ed 91       	ld	r30, X+
    2c34:	fc 91       	ld	r31, X
    2c36:	01 90       	ld	r0, Z+
    2c38:	f0 81       	ld	r31, Z
    2c3a:	e0 2d       	mov	r30, r0
    2c3c:	c6 01       	movw	r24, r12
    2c3e:	09 95       	icall
    2c40:	c8 0f       	add	r28, r24
    2c42:	d9 1f       	adc	r29, r25
    2c44:	01 50       	subi	r16, 0x01	; 1
    2c46:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    2c48:	01 15       	cp	r16, r1
    2c4a:	11 05       	cpc	r17, r1
    2c4c:	71 f7       	brne	.-36     	; 0x2c2a <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    2c4e:	ce 01       	movw	r24, r28
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	df 90       	pop	r13
    2c5e:	cf 90       	pop	r12
    2c60:	08 95       	ret

00002c62 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    2c62:	db 01       	movw	r26, r22
    2c64:	0d 90       	ld	r0, X+
    2c66:	00 20       	and	r0, r0
    2c68:	e9 f7       	brne	.-6      	; 0x2c64 <_ZN5Print5writeEPKc+0x2>
    2c6a:	ad 01       	movw	r20, r26
    2c6c:	41 50       	subi	r20, 0x01	; 1
    2c6e:	50 40       	sbci	r21, 0x00	; 0
    2c70:	46 1b       	sub	r20, r22
    2c72:	57 0b       	sbc	r21, r23
    2c74:	dc 01       	movw	r26, r24
    2c76:	ed 91       	ld	r30, X+
    2c78:	fc 91       	ld	r31, X
    2c7a:	02 80       	ldd	r0, Z+2	; 0x02
    2c7c:	f3 81       	ldd	r31, Z+3	; 0x03
    2c7e:	e0 2d       	mov	r30, r0
    2c80:	09 95       	icall
    2c82:	08 95       	ret

00002c84 <_ZN5Print5printERK6String>:
    virtual size_t write(const uint8_t *buffer, size_t size);
    
    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    2c84:	af 92       	push	r10
    2c86:	bf 92       	push	r11
    2c88:	cf 92       	push	r12
    2c8a:	df 92       	push	r13
    2c8c:	ef 92       	push	r14
    2c8e:	ff 92       	push	r15
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    2c98:	7c 01       	movw	r14, r24
    2c9a:	6b 01       	movw	r12, r22
    size_t print(unsigned char, int = DEC);
    size_t print(int, int = DEC);
    2c9c:	c0 e0       	ldi	r28, 0x00	; 0
    2c9e:	d0 e0       	ldi	r29, 0x00	; 0
    
    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = DEC);
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	10 e0       	ldi	r17, 0x00	; 0
    size_t print(int, int = DEC);
    2ca4:	10 c0       	rjmp	.+32     	; 0x2cc6 <_ZN5Print5printERK6String+0x42>
    size_t print(unsigned int, int = DEC);
    2ca6:	d7 01       	movw	r26, r14
    2ca8:	ed 91       	ld	r30, X+
    2caa:	fc 91       	ld	r31, X
    2cac:	a0 80       	ld	r10, Z
    2cae:	b1 80       	ldd	r11, Z+1	; 0x01
    2cb0:	c6 01       	movw	r24, r12
    2cb2:	be 01       	movw	r22, r28
    2cb4:	0e 94 b6 19 	call	0x336c	; 0x336c <_ZNK6StringixEj>
    2cb8:	68 2f       	mov	r22, r24
    2cba:	c7 01       	movw	r24, r14
    2cbc:	f5 01       	movw	r30, r10
    2cbe:	09 95       	icall
    2cc0:	08 0f       	add	r16, r24
    2cc2:	19 1f       	adc	r17, r25
    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = DEC);
    size_t print(int, int = DEC);
    2cc4:	21 96       	adiw	r28, 0x01	; 1
    2cc6:	f6 01       	movw	r30, r12
    2cc8:	84 81       	ldd	r24, Z+4	; 0x04
    2cca:	95 81       	ldd	r25, Z+5	; 0x05
    2ccc:	c8 17       	cp	r28, r24
    2cce:	d9 07       	cpc	r29, r25
    2cd0:	50 f3       	brcs	.-44     	; 0x2ca6 <_ZN5Print5printERK6String+0x22>
    size_t print(unsigned int, int = DEC);
    size_t print(long, int = DEC);
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    2cd2:	c8 01       	movw	r24, r16
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	df 90       	pop	r13
    2ce2:	cf 90       	pop	r12
    2ce4:	bf 90       	pop	r11
    2ce6:	af 90       	pop	r10
    2ce8:	08 95       	ret

00002cea <_ZN5Print5printEc>:
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = DEC);
    size_t println(int, int = DEC);
    size_t println(unsigned int, int = DEC);
    2cea:	dc 01       	movw	r26, r24
    2cec:	ed 91       	ld	r30, X+
    2cee:	fc 91       	ld	r31, X
    2cf0:	01 90       	ld	r0, Z+
    2cf2:	f0 81       	ld	r31, Z
    2cf4:	e0 2d       	mov	r30, r0
    2cf6:	09 95       	icall
    size_t println(long, int = DEC);
    2cf8:	08 95       	ret

00002cfa <_ZN5Print7printlnEv>:
    2cfa:	0f 93       	push	r16
    2cfc:	1f 93       	push	r17
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	ec 01       	movw	r28, r24
    2d04:	6d e0       	ldi	r22, 0x0D	; 13
    2d06:	0e 94 75 16 	call	0x2cea	; 0x2cea <_ZN5Print5printEc>
    2d0a:	8c 01       	movw	r16, r24
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	6a e0       	ldi	r22, 0x0A	; 10
    2d10:	0e 94 75 16 	call	0x2cea	; 0x2cea <_ZN5Print5printEc>
    2d14:	08 0f       	add	r16, r24
    2d16:	19 1f       	adc	r17, r25
    2d18:	c8 01       	movw	r24, r16
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	08 95       	ret

00002d24 <_ZN5Print7printlnERK6String>:
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	ec 01       	movw	r28, r24
    2d2e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN5Print5printERK6String>
    2d32:	8c 01       	movw	r16, r24
    2d34:	ce 01       	movw	r24, r28
    2d36:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN5Print7printlnEv>
    2d3a:	08 0f       	add	r16, r24
    2d3c:	19 1f       	adc	r17, r25
    2d3e:	c8 01       	movw	r24, r16
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	1f 91       	pop	r17
    2d46:	0f 91       	pop	r16
    2d48:	08 95       	ret

00002d4a <_ZN5Print7printlnEPKc>:
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	ec 01       	movw	r28, r24
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    2d54:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_ZN5Print5writeEPKc>
    2d58:	8c 01       	movw	r16, r24
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN5Print7printlnEv>
    2d60:	08 0f       	add	r16, r24
    2d62:	19 1f       	adc	r17, r25
    2d64:	c8 01       	movw	r24, r16
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <_ZN5Print11printNumberEmh>:
    2d70:	8f 92       	push	r8
    2d72:	9f 92       	push	r9
    2d74:	af 92       	push	r10
    2d76:	bf 92       	push	r11
    2d78:	cf 92       	push	r12
    2d7a:	df 92       	push	r13
    2d7c:	ef 92       	push	r14
    2d7e:	ff 92       	push	r15
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	a1 97       	sbiw	r28, 0x21	; 33
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	6c 01       	movw	r12, r24
    2d9a:	04 2f       	mov	r16, r20
    2d9c:	e5 2f       	mov	r30, r21
    2d9e:	cb 01       	movw	r24, r22
    2da0:	12 2f       	mov	r17, r18
    2da2:	19 a2       	std	Y+33, r1	; 0x21
    2da4:	22 30       	cpi	r18, 0x02	; 2
    2da6:	08 f4       	brcc	.+2      	; 0x2daa <_ZN5Print11printNumberEmh+0x3a>
    2da8:	1a e0       	ldi	r17, 0x0A	; 10
    2daa:	21 e2       	ldi	r18, 0x21	; 33
    2dac:	e2 2e       	mov	r14, r18
    2dae:	f1 2c       	mov	r15, r1
    2db0:	ec 0e       	add	r14, r28
    2db2:	fd 1e       	adc	r15, r29
    2db4:	81 2e       	mov	r8, r17
    2db6:	99 24       	eor	r9, r9
    2db8:	aa 24       	eor	r10, r10
    2dba:	bb 24       	eor	r11, r11
    2dbc:	03 c0       	rjmp	.+6      	; 0x2dc4 <_ZN5Print11printNumberEmh+0x54>
    2dbe:	02 2f       	mov	r16, r18
    2dc0:	e3 2f       	mov	r30, r19
    2dc2:	ca 01       	movw	r24, r20
    2dc4:	60 2f       	mov	r22, r16
    2dc6:	7e 2f       	mov	r23, r30
    2dc8:	a5 01       	movw	r20, r10
    2dca:	94 01       	movw	r18, r8
    2dcc:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__udivmodsi4>
    2dd0:	12 9f       	mul	r17, r18
    2dd2:	80 2d       	mov	r24, r0
    2dd4:	11 24       	eor	r1, r1
    2dd6:	08 1b       	sub	r16, r24
    2dd8:	08 94       	sec
    2dda:	e1 08       	sbc	r14, r1
    2ddc:	f1 08       	sbc	r15, r1
    2dde:	0a 30       	cpi	r16, 0x0A	; 10
    2de0:	14 f4       	brge	.+4      	; 0x2de6 <_ZN5Print11printNumberEmh+0x76>
    2de2:	00 5d       	subi	r16, 0xD0	; 208
    2de4:	01 c0       	rjmp	.+2      	; 0x2de8 <_ZN5Print11printNumberEmh+0x78>
    2de6:	09 5c       	subi	r16, 0xC9	; 201
    2de8:	f7 01       	movw	r30, r14
    2dea:	00 83       	st	Z, r16
    2dec:	21 15       	cp	r18, r1
    2dee:	31 05       	cpc	r19, r1
    2df0:	41 05       	cpc	r20, r1
    2df2:	51 05       	cpc	r21, r1
    2df4:	21 f7       	brne	.-56     	; 0x2dbe <_ZN5Print11printNumberEmh+0x4e>
    2df6:	c6 01       	movw	r24, r12
    2df8:	b7 01       	movw	r22, r14
    2dfa:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_ZN5Print5writeEPKc>
    2dfe:	a1 96       	adiw	r28, 0x21	; 33
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	ff 90       	pop	r15
    2e14:	ef 90       	pop	r14
    2e16:	df 90       	pop	r13
    2e18:	cf 90       	pop	r12
    2e1a:	bf 90       	pop	r11
    2e1c:	af 90       	pop	r10
    2e1e:	9f 90       	pop	r9
    2e20:	8f 90       	pop	r8
    2e22:	08 95       	ret

00002e24 <_ZN5Print5printEmi>:
    2e24:	21 15       	cp	r18, r1
    2e26:	31 05       	cpc	r19, r1
    2e28:	49 f4       	brne	.+18     	; 0x2e3c <_ZN5Print5printEmi+0x18>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	ed 91       	ld	r30, X+
    2e2e:	fc 91       	ld	r31, X
    2e30:	01 90       	ld	r0, Z+
    2e32:	f0 81       	ld	r31, Z
    2e34:	e0 2d       	mov	r30, r0
    2e36:	64 2f       	mov	r22, r20
    2e38:	09 95       	icall
    2e3a:	08 95       	ret
    2e3c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN5Print11printNumberEmh>
    2e40:	08 95       	ret

00002e42 <_ZN5Print7printlnEhi>:
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	ec 01       	movw	r28, r24
    2e4c:	9a 01       	movw	r18, r20
    size_t println(unsigned int, int = DEC);
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    2e4e:	46 2f       	mov	r20, r22
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	0e 94 12 17 	call	0x2e24	; 0x2e24 <_ZN5Print5printEmi>
    2e5a:	8c 01       	movw	r16, r24
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN5Print7printlnEv>
    2e62:	08 0f       	add	r16, r24
    2e64:	19 1f       	adc	r17, r25
    2e66:	c8 01       	movw	r24, r16
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	1f 91       	pop	r17
    2e6e:	0f 91       	pop	r16
    2e70:	08 95       	ret

00002e72 <_ZN5Print5printEli>:
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	0f 93       	push	r16
    2e7c:	1f 93       	push	r17
    2e7e:	cf 93       	push	r28
    2e80:	df 93       	push	r29
    2e82:	ec 01       	movw	r28, r24
    2e84:	7a 01       	movw	r14, r20
    2e86:	8b 01       	movw	r16, r22
    2e88:	21 15       	cp	r18, r1
    2e8a:	31 05       	cpc	r19, r1
    2e8c:	41 f4       	brne	.+16     	; 0x2e9e <_ZN5Print5printEli+0x2c>
    2e8e:	e8 81       	ld	r30, Y
    2e90:	f9 81       	ldd	r31, Y+1	; 0x01
    2e92:	01 90       	ld	r0, Z+
    2e94:	f0 81       	ld	r31, Z
    2e96:	e0 2d       	mov	r30, r0
    2e98:	64 2f       	mov	r22, r20
    2e9a:	09 95       	icall
    2e9c:	1a c0       	rjmp	.+52     	; 0x2ed2 <_ZN5Print5printEli+0x60>
    2e9e:	2a 30       	cpi	r18, 0x0A	; 10
    2ea0:	31 05       	cpc	r19, r1
    2ea2:	a9 f4       	brne	.+42     	; 0x2ece <_ZN5Print5printEli+0x5c>
    2ea4:	77 ff       	sbrs	r23, 7
    2ea6:	12 c0       	rjmp	.+36     	; 0x2ecc <_ZN5Print5printEli+0x5a>
    2ea8:	6d e2       	ldi	r22, 0x2D	; 45
    2eaa:	0e 94 75 16 	call	0x2cea	; 0x2cea <_ZN5Print5printEc>
    2eae:	6c 01       	movw	r12, r24
    2eb0:	44 27       	eor	r20, r20
    2eb2:	55 27       	eor	r21, r21
    2eb4:	ba 01       	movw	r22, r20
    2eb6:	4e 19       	sub	r20, r14
    2eb8:	5f 09       	sbc	r21, r15
    2eba:	60 0b       	sbc	r22, r16
    2ebc:	71 0b       	sbc	r23, r17
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	2a e0       	ldi	r18, 0x0A	; 10
    2ec2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN5Print11printNumberEmh>
    2ec6:	c8 0e       	add	r12, r24
    2ec8:	d9 1e       	adc	r13, r25
    2eca:	04 c0       	rjmp	.+8      	; 0x2ed4 <_ZN5Print5printEli+0x62>
    2ecc:	2a e0       	ldi	r18, 0x0A	; 10
    2ece:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN5Print11printNumberEmh>
    2ed2:	6c 01       	movw	r12, r24
    2ed4:	c6 01       	movw	r24, r12
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	1f 91       	pop	r17
    2edc:	0f 91       	pop	r16
    2ede:	ff 90       	pop	r15
    2ee0:	ef 90       	pop	r14
    2ee2:	df 90       	pop	r13
    2ee4:	cf 90       	pop	r12
    2ee6:	08 95       	ret

00002ee8 <_ZN5Print7printlnEii>:
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	ec 01       	movw	r28, r24
    2ef2:	9a 01       	movw	r18, r20
    size_t println(void);
};

#endif
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	ac 01       	movw	r20, r24
    2ef8:	66 27       	eor	r22, r22
    2efa:	57 fd       	sbrc	r21, 7
    2efc:	60 95       	com	r22
    2efe:	76 2f       	mov	r23, r22
    2f00:	ce 01       	movw	r24, r28
    2f02:	0e 94 39 17 	call	0x2e72	; 0x2e72 <_ZN5Print5printEli>
    2f06:	8c 01       	movw	r16, r24
    2f08:	ce 01       	movw	r24, r28
    2f0a:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN5Print7printlnEv>
    2f0e:	08 0f       	add	r16, r24
    2f10:	19 1f       	adc	r17, r25
    2f12:	c8 01       	movw	r24, r16
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	08 95       	ret

00002f1e <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    2f1e:	fc 01       	movw	r30, r24
    2f20:	80 81       	ld	r24, Z
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <free>
}
    2f28:	08 95       	ret

00002f2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2f30:	88 81       	ld	r24, Y
    2f32:	99 81       	ldd	r25, Y+1	; 0x01
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	11 f0       	breq	.+4      	; 0x2f3c <_ZN6String10invalidateEv+0x12>
    2f38:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <free>
	buffer = NULL;
    2f3c:	19 82       	std	Y+1, r1	; 0x01
    2f3e:	18 82       	st	Y, r1
	capacity = len = 0;
    2f40:	1d 82       	std	Y+5, r1	; 0x05
    2f42:	1c 82       	std	Y+4, r1	; 0x04
    2f44:	1b 82       	std	Y+3, r1	; 0x03
    2f46:	1a 82       	std	Y+2, r1	; 0x02
}
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	08 95       	ret

00002f4e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	ec 01       	movw	r28, r24
    2f58:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2f5a:	6f 5f       	subi	r22, 0xFF	; 255
    2f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5e:	88 81       	ld	r24, Y
    2f60:	99 81       	ldd	r25, Y+1	; 0x01
    2f62:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <realloc>
	if (newbuffer) {
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	31 f0       	breq	.+12     	; 0x2f76 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2f6a:	99 83       	std	Y+1, r25	; 0x01
    2f6c:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2f6e:	1b 83       	std	Y+3, r17	; 0x03
    2f70:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	01 c0       	rjmp	.+2      	; 0x2f78 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2f76:	80 e0       	ldi	r24, 0x00	; 0
}
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2f88:	88 81       	ld	r24, Y
    2f8a:	99 81       	ldd	r25, Y+1	; 0x01
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	29 f0       	breq	.+10     	; 0x2f9a <_ZN6String7reserveEj+0x18>
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	9b 81       	ldd	r25, Y+3	; 0x03
    2f94:	86 17       	cp	r24, r22
    2f96:	97 07       	cpc	r25, r23
    2f98:	78 f4       	brcc	.+30     	; 0x2fb8 <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <_ZN6String12changeBufferEj>
    2fa0:	88 23       	and	r24, r24
    2fa2:	41 f0       	breq	.+16     	; 0x2fb4 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa8:	00 97       	sbiw	r24, 0x00	; 0
    2faa:	31 f4       	brne	.+12     	; 0x2fb8 <_ZN6String7reserveEj+0x36>
    2fac:	e8 81       	ld	r30, Y
    2fae:	f9 81       	ldd	r31, Y+1	; 0x01
    2fb0:	10 82       	st	Z, r1
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	08 95       	ret

00002fc0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2fc0:	ef 92       	push	r14
    2fc2:	ff 92       	push	r15
    2fc4:	0f 93       	push	r16
    2fc6:	1f 93       	push	r17
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
    2fcc:	ec 01       	movw	r28, r24
    2fce:	7b 01       	movw	r14, r22
    2fd0:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2fd2:	ba 01       	movw	r22, r20
    2fd4:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN6String7reserveEj>
    2fd8:	88 23       	and	r24, r24
    2fda:	21 f4       	brne	.+8      	; 0x2fe4 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2fdc:	ce 01       	movw	r24, r28
    2fde:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN6String10invalidateEv>
		return *this;
    2fe2:	07 c0       	rjmp	.+14     	; 0x2ff2 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2fe4:	1d 83       	std	Y+5, r17	; 0x05
    2fe6:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2fe8:	88 81       	ld	r24, Y
    2fea:	99 81       	ldd	r25, Y+1	; 0x01
    2fec:	b7 01       	movw	r22, r14
    2fee:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <strcpy>
	return *this;
}
    2ff2:	ce 01       	movw	r24, r28
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	1f 91       	pop	r17
    2ffa:	0f 91       	pop	r16
    2ffc:	ff 90       	pop	r15
    2ffe:	ef 90       	pop	r14
    3000:	08 95       	ret

00003002 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3008:	11 82       	std	Z+1, r1	; 0x01
    300a:	10 82       	st	Z, r1
	capacity = 0;
    300c:	13 82       	std	Z+3, r1	; 0x03
    300e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3010:	15 82       	std	Z+5, r1	; 0x05
    3012:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3014:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    3016:	61 15       	cp	r22, r1
    3018:	71 05       	cpc	r23, r1
    301a:	59 f0       	breq	.+22     	; 0x3032 <_ZN6StringC1EPKc+0x30>
    301c:	eb 01       	movw	r28, r22
    301e:	09 90       	ld	r0, Y+
    3020:	00 20       	and	r0, r0
    3022:	e9 f7       	brne	.-6      	; 0x301e <_ZN6StringC1EPKc+0x1c>
    3024:	ae 01       	movw	r20, r28
    3026:	41 50       	subi	r20, 0x01	; 1
    3028:	50 40       	sbci	r21, 0x00	; 0
    302a:	46 1b       	sub	r20, r22
    302c:	57 0b       	sbc	r21, r23
    302e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN6String4copyEPKcj>
}
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	08 95       	ret

00003038 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	ec 01       	movw	r28, r24
    3042:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    3044:	86 17       	cp	r24, r22
    3046:	97 07       	cpc	r25, r23
    3048:	61 f0       	breq	.+24     	; 0x3062 <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	61 15       	cp	r22, r1
    3050:	71 05       	cpc	r23, r1
    3052:	29 f0       	breq	.+10     	; 0x305e <_ZN6StringaSERKS_+0x26>
    3054:	44 81       	ldd	r20, Z+4	; 0x04
    3056:	55 81       	ldd	r21, Z+5	; 0x05
    3058:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN6String4copyEPKcj>
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    305e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN6String10invalidateEv>
	
	return *this;
}
    3062:	ce 01       	movw	r24, r28
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	ff 90       	pop	r15
    306a:	ef 90       	pop	r14
    306c:	08 95       	ret

0000306e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    306e:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3070:	11 82       	std	Z+1, r1	; 0x01
    3072:	10 82       	st	Z, r1
	capacity = 0;
    3074:	13 82       	std	Z+3, r1	; 0x03
    3076:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3078:	15 82       	std	Z+5, r1	; 0x05
    307a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    307c:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    307e:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6StringaSERKS_>
}
    3082:	08 95       	ret

00003084 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    3084:	0f 93       	push	r16
    3086:	1f 93       	push	r17
    3088:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    308a:	61 15       	cp	r22, r1
    308c:	71 05       	cpc	r23, r1
    308e:	61 f0       	breq	.+24     	; 0x30a8 <_ZN6StringaSEPKc+0x24>
    3090:	db 01       	movw	r26, r22
    3092:	0d 90       	ld	r0, X+
    3094:	00 20       	and	r0, r0
    3096:	e9 f7       	brne	.-6      	; 0x3092 <_ZN6StringaSEPKc+0xe>
    3098:	ad 01       	movw	r20, r26
    309a:	41 50       	subi	r20, 0x01	; 1
    309c:	50 40       	sbci	r21, 0x00	; 0
    309e:	46 1b       	sub	r20, r22
    30a0:	57 0b       	sbc	r21, r23
    30a2:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN6String4copyEPKcj>
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <_ZN6StringaSEPKc+0x28>
	else invalidate();
    30a8:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN6String10invalidateEv>
	
	return *this;
}
    30ac:	c8 01       	movw	r24, r16
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	08 95       	ret

000030b4 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	df 93       	push	r29
    30be:	cf 93       	push	r28
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	62 97       	sbiw	r28, 0x12	; 18
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	7c 01       	movw	r14, r24
    30d2:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    30d4:	f7 01       	movw	r30, r14
    30d6:	11 82       	std	Z+1, r1	; 0x01
    30d8:	10 82       	st	Z, r1
	capacity = 0;
    30da:	13 82       	std	Z+3, r1	; 0x03
    30dc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    30de:	15 82       	std	Z+5, r1	; 0x05
    30e0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    30e2:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    30e4:	8e 01       	movw	r16, r28
    30e6:	0f 5f       	subi	r16, 0xFF	; 255
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	b8 01       	movw	r22, r16
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <itoa>
	*this = buf;
    30f2:	c7 01       	movw	r24, r14
    30f4:	b8 01       	movw	r22, r16
    30f6:	0e 94 42 18 	call	0x3084	; 0x3084 <_ZN6StringaSEPKc>
}
    30fa:	62 96       	adiw	r28, 0x12	; 18
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	ff 90       	pop	r15
    3110:	ef 90       	pop	r14
    3112:	08 95       	ret

00003114 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	29 97       	sbiw	r28, 0x09	; 9
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	7c 01       	movw	r14, r24
    3132:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3134:	f7 01       	movw	r30, r14
    3136:	11 82       	std	Z+1, r1	; 0x01
    3138:	10 82       	st	Z, r1
	capacity = 0;
    313a:	13 82       	std	Z+3, r1	; 0x03
    313c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    313e:	15 82       	std	Z+5, r1	; 0x05
    3140:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3142:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	8e 01       	movw	r16, r28
    3148:	0f 5f       	subi	r16, 0xFF	; 255
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	b8 01       	movw	r22, r16
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <utoa>
	*this = buf;
    3154:	c7 01       	movw	r24, r14
    3156:	b8 01       	movw	r22, r16
    3158:	0e 94 42 18 	call	0x3084	; 0x3084 <_ZN6StringaSEPKc>
}
    315c:	29 96       	adiw	r28, 0x09	; 9
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	08 95       	ret

00003176 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    3176:	ef 92       	push	r14
    3178:	ff 92       	push	r15
    317a:	0f 93       	push	r16
    317c:	1f 93       	push	r17
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	ec 01       	movw	r28, r24
    3184:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    3186:	0c 81       	ldd	r16, Y+4	; 0x04
    3188:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    318a:	61 15       	cp	r22, r1
    318c:	71 05       	cpc	r23, r1
    318e:	b9 f0       	breq	.+46     	; 0x31be <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    3190:	41 15       	cp	r20, r1
    3192:	51 05       	cpc	r21, r1
    3194:	91 f0       	breq	.+36     	; 0x31ba <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    3196:	04 0f       	add	r16, r20
    3198:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    319a:	b8 01       	movw	r22, r16
    319c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN6String7reserveEj>
    31a0:	88 23       	and	r24, r24
    31a2:	69 f0       	breq	.+26     	; 0x31be <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    31a4:	28 81       	ld	r18, Y
    31a6:	39 81       	ldd	r19, Y+1	; 0x01
    31a8:	8c 81       	ldd	r24, Y+4	; 0x04
    31aa:	9d 81       	ldd	r25, Y+5	; 0x05
    31ac:	82 0f       	add	r24, r18
    31ae:	93 1f       	adc	r25, r19
    31b0:	b7 01       	movw	r22, r14
    31b2:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <strcpy>
	len = newlen;
    31b6:	1d 83       	std	Y+5, r17	; 0x05
    31b8:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	01 c0       	rjmp	.+2      	; 0x31c0 <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    31be:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    31c0:	df 91       	pop	r29
    31c2:	cf 91       	pop	r28
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	ff 90       	pop	r15
    31ca:	ef 90       	pop	r14
    31cc:	08 95       	ret

000031ce <_ZN6String6concatEc>:
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
{
    31ce:	df 93       	push	r29
    31d0:	cf 93       	push	r28
    31d2:	00 d0       	rcall	.+0      	; 0x31d4 <_ZN6String6concatEc+0x6>
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    31d8:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    31da:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    31dc:	be 01       	movw	r22, r28
    31de:	6f 5f       	subi	r22, 0xFF	; 255
    31e0:	7f 4f       	sbci	r23, 0xFF	; 255
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	0e 94 bb 18 	call	0x3176	; 0x3176 <_ZN6String6concatEPKcj>
}
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    31f4:	0f 93       	push	r16
    31f6:	1f 93       	push	r17
    31f8:	8c 01       	movw	r16, r24
    31fa:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    31fc:	60 81       	ld	r22, Z
    31fe:	71 81       	ldd	r23, Z+1	; 0x01
    3200:	44 81       	ldd	r20, Z+4	; 0x04
    3202:	55 81       	ldd	r21, Z+5	; 0x05
    3204:	0e 94 bb 18 	call	0x3176	; 0x3176 <_ZN6String6concatEPKcj>
    3208:	88 23       	and	r24, r24
    320a:	19 f4       	brne	.+6      	; 0x3212 <_ZplRK15StringSumHelperRK6String+0x1e>
    320c:	c8 01       	movw	r24, r16
    320e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN6String10invalidateEv>
	return a;
}
    3212:	c8 01       	movw	r24, r16
    3214:	1f 91       	pop	r17
    3216:	0f 91       	pop	r16
    3218:	08 95       	ret

0000321a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    3220:	61 15       	cp	r22, r1
    3222:	71 05       	cpc	r23, r1
    3224:	69 f0       	breq	.+26     	; 0x3240 <_ZplRK15StringSumHelperPKc+0x26>
    3226:	db 01       	movw	r26, r22
    3228:	0d 90       	ld	r0, X+
    322a:	00 20       	and	r0, r0
    322c:	e9 f7       	brne	.-6      	; 0x3228 <_ZplRK15StringSumHelperPKc+0xe>
    322e:	ad 01       	movw	r20, r26
    3230:	41 50       	subi	r20, 0x01	; 1
    3232:	50 40       	sbci	r21, 0x00	; 0
    3234:	46 1b       	sub	r20, r22
    3236:	57 0b       	sbc	r21, r23
    3238:	0e 94 bb 18 	call	0x3176	; 0x3176 <_ZN6String6concatEPKcj>
    323c:	88 23       	and	r24, r24
    323e:	19 f4       	brne	.+6      	; 0x3246 <_ZplRK15StringSumHelperPKc+0x2c>
    3240:	c8 01       	movw	r24, r16
    3242:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <_ZN6String10invalidateEv>
	return a;
}
    3246:	c8 01       	movw	r24, r16
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	08 95       	ret

0000324e <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	fc 01       	movw	r30, r24
    3254:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	00 97       	sbiw	r24, 0x00	; 0
    325c:	31 f0       	breq	.+12     	; 0x326a <_ZNK6String9compareToERKS_+0x1c>
    325e:	6d 91       	ld	r22, X+
    3260:	7c 91       	ld	r23, X
    3262:	11 97       	sbiw	r26, 0x01	; 1
    3264:	61 15       	cp	r22, r1
    3266:	71 05       	cpc	r23, r1
    3268:	e9 f4       	brne	.+58     	; 0x32a4 <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    326a:	cd 91       	ld	r28, X+
    326c:	dc 91       	ld	r29, X
    326e:	11 97       	sbiw	r26, 0x01	; 1
    3270:	20 97       	sbiw	r28, 0x00	; 0
    3272:	69 f0       	breq	.+26     	; 0x328e <_ZNK6String9compareToERKS_+0x40>
    3274:	14 96       	adiw	r26, 0x04	; 4
    3276:	2d 91       	ld	r18, X+
    3278:	3c 91       	ld	r19, X
    327a:	15 97       	sbiw	r26, 0x05	; 5
    327c:	21 15       	cp	r18, r1
    327e:	31 05       	cpc	r19, r1
    3280:	31 f0       	breq	.+12     	; 0x328e <_ZNK6String9compareToERKS_+0x40>
    3282:	28 81       	ld	r18, Y
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	30 95       	com	r19
    3288:	21 95       	neg	r18
    328a:	3f 4f       	sbci	r19, 0xFF	; 255
    328c:	12 c0       	rjmp	.+36     	; 0x32b2 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	71 f0       	breq	.+28     	; 0x32ae <_ZNK6String9compareToERKS_+0x60>
    3292:	24 81       	ldd	r18, Z+4	; 0x04
    3294:	35 81       	ldd	r19, Z+5	; 0x05
    3296:	21 15       	cp	r18, r1
    3298:	31 05       	cpc	r19, r1
    329a:	49 f0       	breq	.+18     	; 0x32ae <_ZNK6String9compareToERKS_+0x60>
    329c:	fc 01       	movw	r30, r24
    329e:	20 81       	ld	r18, Z
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	07 c0       	rjmp	.+14     	; 0x32b2 <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    32a4:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <strcmp>
    32a8:	28 2f       	mov	r18, r24
    32aa:	39 2f       	mov	r19, r25
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    32b2:	c9 01       	movw	r24, r18
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	08 95       	ret

000032ba <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    32ba:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    32bc:	84 81       	ldd	r24, Z+4	; 0x04
    32be:	95 81       	ldd	r25, Z+5	; 0x05
    32c0:	00 97       	sbiw	r24, 0x00	; 0
    32c2:	41 f4       	brne	.+16     	; 0x32d4 <_ZNK6String6equalsEPKc+0x1a>
    32c4:	61 15       	cp	r22, r1
    32c6:	71 05       	cpc	r23, r1
    32c8:	19 f0       	breq	.+6      	; 0x32d0 <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	fb 01       	movw	r30, r22
    32ce:	09 c0       	rjmp	.+18     	; 0x32e2 <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	08 95       	ret
    32d4:	01 90       	ld	r0, Z+
    32d6:	f0 81       	ld	r31, Z
    32d8:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    32da:	61 15       	cp	r22, r1
    32dc:	71 05       	cpc	r23, r1
    32de:	31 f4       	brne	.+12     	; 0x32ec <_ZNK6String6equalsEPKc+0x32>
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 81       	ld	r25, Z
    32e4:	99 23       	and	r25, r25
    32e6:	59 f0       	breq	.+22     	; 0x32fe <_ZNK6String6equalsEPKc+0x44>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    32ec:	cf 01       	movw	r24, r30
    32ee:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <strcmp>
    32f2:	9c 01       	movw	r18, r24
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	21 15       	cp	r18, r1
    32f8:	31 05       	cpc	r19, r1
    32fa:	09 f0       	breq	.+2      	; 0x32fe <_ZNK6String6equalsEPKc+0x44>
    32fc:	80 e0       	ldi	r24, 0x00	; 0
}
    32fe:	08 95       	ret

00003300 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    3300:	fc 01       	movw	r30, r24
    3302:	db 01       	movw	r26, r22
    3304:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3306:	14 96       	adiw	r26, 0x04	; 4
    3308:	4d 91       	ld	r20, X+
    330a:	5c 91       	ld	r21, X
    330c:	15 97       	sbiw	r26, 0x05	; 5
    330e:	24 81       	ldd	r18, Z+4	; 0x04
    3310:	35 81       	ldd	r19, Z+5	; 0x05
    3312:	24 1b       	sub	r18, r20
    3314:	35 0b       	sbc	r19, r21
    3316:	28 17       	cp	r18, r24
    3318:	39 07       	cpc	r19, r25
    331a:	a0 f0       	brcs	.+40     	; 0x3344 <_ZNK6String10startsWithERKS_j+0x44>
    331c:	20 81       	ld	r18, Z
    331e:	31 81       	ldd	r19, Z+1	; 0x01
    3320:	21 15       	cp	r18, r1
    3322:	31 05       	cpc	r19, r1
    3324:	79 f0       	breq	.+30     	; 0x3344 <_ZNK6String10startsWithERKS_j+0x44>
    3326:	6d 91       	ld	r22, X+
    3328:	7c 91       	ld	r23, X
    332a:	11 97       	sbiw	r26, 0x01	; 1
    332c:	61 15       	cp	r22, r1
    332e:	71 05       	cpc	r23, r1
    3330:	59 f0       	breq	.+22     	; 0x3348 <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    3332:	82 0f       	add	r24, r18
    3334:	93 1f       	adc	r25, r19
    3336:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <strncmp>
    333a:	9c 01       	movw	r18, r24
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	21 15       	cp	r18, r1
    3340:	31 05       	cpc	r19, r1
    3342:	19 f0       	breq	.+6      	; 0x334a <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	08 95       	ret
    3348:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    334a:	08 95       	ret

0000334c <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    334c:	fc 01       	movw	r30, r24
    334e:	44 81       	ldd	r20, Z+4	; 0x04
    3350:	55 81       	ldd	r21, Z+5	; 0x05
    3352:	fb 01       	movw	r30, r22
    3354:	24 81       	ldd	r18, Z+4	; 0x04
    3356:	35 81       	ldd	r19, Z+5	; 0x05
    3358:	42 17       	cp	r20, r18
    335a:	53 07       	cpc	r21, r19
    335c:	28 f0       	brcs	.+10     	; 0x3368 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    335e:	40 e0       	ldi	r20, 0x00	; 0
    3360:	50 e0       	ldi	r21, 0x00	; 0
    3362:	0e 94 80 19 	call	0x3300	; 0x3300 <_ZNK6String10startsWithERKS_j>
    3366:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3368:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    336a:	08 95       	ret

0000336c <_ZNK6StringixEj>:
	}
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
    336c:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    336e:	84 81       	ldd	r24, Z+4	; 0x04
    3370:	95 81       	ldd	r25, Z+5	; 0x05
    3372:	68 17       	cp	r22, r24
    3374:	79 07       	cpc	r23, r25
    3376:	48 f4       	brcc	.+18     	; 0x338a <_ZNK6StringixEj+0x1e>
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	00 97       	sbiw	r24, 0x00	; 0
    337e:	39 f0       	breq	.+14     	; 0x338e <_ZNK6StringixEj+0x22>
	return buffer[index];
    3380:	68 0f       	add	r22, r24
    3382:	79 1f       	adc	r23, r25
    3384:	fb 01       	movw	r30, r22
    3386:	80 81       	ld	r24, Z
    3388:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	08 95       	ret
    338e:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    3390:	08 95       	ret

00003392 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    3392:	0e 94 b6 19 	call	0x336c	; 0x336c <_ZNK6StringixEj>
}
    3396:	08 95       	ret

00003398 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	cf 93       	push	r28
    339e:	df 93       	push	r29
    33a0:	fc 01       	movw	r30, r24
    33a2:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    33a4:	41 15       	cp	r20, r1
    33a6:	51 05       	cpc	r21, r1
    33a8:	f1 f0       	breq	.+60     	; 0x33e6 <_ZNK6String8getBytesEPhjj+0x4e>
    33aa:	61 15       	cp	r22, r1
    33ac:	71 05       	cpc	r23, r1
    33ae:	d9 f0       	breq	.+54     	; 0x33e6 <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    33b0:	c4 81       	ldd	r28, Z+4	; 0x04
    33b2:	d5 81       	ldd	r29, Z+5	; 0x05
    33b4:	2c 17       	cp	r18, r28
    33b6:	3d 07       	cpc	r19, r29
    33b8:	18 f0       	brcs	.+6      	; 0x33c0 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    33ba:	fb 01       	movw	r30, r22
    33bc:	10 82       	st	Z, r1
		return;
    33be:	13 c0       	rjmp	.+38     	; 0x33e6 <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    33c0:	41 50       	subi	r20, 0x01	; 1
    33c2:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    33c4:	c2 1b       	sub	r28, r18
    33c6:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    33c8:	4c 17       	cp	r20, r28
    33ca:	5d 07       	cpc	r21, r29
    33cc:	08 f4       	brcc	.+2      	; 0x33d0 <_ZNK6String8getBytesEPhjj+0x38>
    33ce:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	62 0f       	add	r22, r18
    33d6:	73 1f       	adc	r23, r19
    33d8:	c8 01       	movw	r24, r16
    33da:	ae 01       	movw	r20, r28
    33dc:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <strncpy>
	buf[n] = 0;
    33e0:	c0 0f       	add	r28, r16
    33e2:	d1 1f       	adc	r29, r17
    33e4:	18 82       	st	Y, r1
}
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	08 95       	ret

000033f0 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	fc 01       	movw	r30, r24
    33f6:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    33f8:	24 81       	ldd	r18, Z+4	; 0x04
    33fa:	35 81       	ldd	r19, Z+5	; 0x05
    33fc:	42 17       	cp	r20, r18
    33fe:	53 07       	cpc	r21, r19
    3400:	78 f4       	brcc	.+30     	; 0x3420 <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3402:	c0 81       	ld	r28, Z
    3404:	d1 81       	ldd	r29, Z+1	; 0x01
    3406:	fb 01       	movw	r30, r22
    3408:	60 81       	ld	r22, Z
    340a:	71 81       	ldd	r23, Z+1	; 0x01
    340c:	8c 0f       	add	r24, r28
    340e:	9d 1f       	adc	r25, r29
    3410:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <strstr>
	if (found == NULL) return -1;
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	21 f0       	breq	.+8      	; 0x3420 <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    3418:	9c 01       	movw	r18, r24
    341a:	2c 1b       	sub	r18, r28
    341c:	3d 0b       	sbc	r19, r29
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    3420:	2f ef       	ldi	r18, 0xFF	; 255
    3422:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    3424:	c9 01       	movw	r24, r18
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	08 95       	ret

0000342c <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    342c:	40 e0       	ldi	r20, 0x00	; 0
    342e:	50 e0       	ldi	r21, 0x00	; 0
    3430:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZNK6String7indexOfERKS_j>
}
    3434:	08 95       	ret

00003436 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3436:	af 92       	push	r10
    3438:	bf 92       	push	r11
    343a:	cf 92       	push	r12
    343c:	df 92       	push	r13
    343e:	ef 92       	push	r14
    3440:	ff 92       	push	r15
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
    3446:	cf 93       	push	r28
    3448:	df 93       	push	r29
    344a:	f8 2e       	mov	r15, r24
    344c:	e9 2e       	mov	r14, r25
    344e:	6b 01       	movw	r12, r22
    3450:	8a 01       	movw	r16, r20
    3452:	e9 01       	movw	r28, r18
	if (left > right) {
    3454:	24 17       	cp	r18, r20
    3456:	35 07       	cpc	r19, r21
    3458:	48 f4       	brcc	.+18     	; 0x346c <_ZNK6String9substringEjj+0x36>
    345a:	34 2f       	mov	r19, r20
    345c:	21 2f       	mov	r18, r17
    345e:	8e 01       	movw	r16, r28
    3460:	c9 01       	movw	r24, r18
    3462:	a9 2e       	mov	r10, r25
    3464:	e5 01       	movw	r28, r10
    3466:	5e 01       	movw	r10, r28
    3468:	b2 2e       	mov	r11, r18
    346a:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    346c:	8f 2d       	mov	r24, r15
    346e:	9e 2d       	mov	r25, r14
    3470:	6b ec       	ldi	r22, 0xCB	; 203
    3472:	71 e0       	ldi	r23, 0x01	; 1
    3474:	0e 94 01 18 	call	0x3002	; 0x3002 <_ZN6StringC1EPKc>
	if (left > len) return out;
    3478:	d6 01       	movw	r26, r12
    347a:	14 96       	adiw	r26, 0x04	; 4
    347c:	8d 91       	ld	r24, X+
    347e:	9c 91       	ld	r25, X
    3480:	15 97       	sbiw	r26, 0x05	; 5
    3482:	80 17       	cp	r24, r16
    3484:	91 07       	cpc	r25, r17
    3486:	d8 f0       	brcs	.+54     	; 0x34be <_ZNK6String9substringEjj+0x88>
    3488:	8c 17       	cp	r24, r28
    348a:	9d 07       	cpc	r25, r29
    348c:	08 f4       	brcc	.+2      	; 0x3490 <_ZNK6String9substringEjj+0x5a>
    348e:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    3490:	d6 01       	movw	r26, r12
    3492:	ed 91       	ld	r30, X+
    3494:	fc 91       	ld	r31, X
    3496:	11 97       	sbiw	r26, 0x01	; 1
    3498:	ec 0f       	add	r30, r28
    349a:	fd 1f       	adc	r31, r29
    349c:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    349e:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    34a0:	6d 91       	ld	r22, X+
    34a2:	7c 91       	ld	r23, X
    34a4:	60 0f       	add	r22, r16
    34a6:	71 1f       	adc	r23, r17
    34a8:	8f 2d       	mov	r24, r15
    34aa:	9e 2d       	mov	r25, r14
    34ac:	0e 94 42 18 	call	0x3084	; 0x3084 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    34b0:	d6 01       	movw	r26, r12
    34b2:	ed 91       	ld	r30, X+
    34b4:	fc 91       	ld	r31, X
    34b6:	11 97       	sbiw	r26, 0x01	; 1
    34b8:	ec 0f       	add	r30, r28
    34ba:	fd 1f       	adc	r31, r29
    34bc:	b0 82       	st	Z, r11
	return out;
}
    34be:	8f 2d       	mov	r24, r15
    34c0:	9e 2d       	mov	r25, r14
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	df 90       	pop	r13
    34d0:	cf 90       	pop	r12
    34d2:	bf 90       	pop	r11
    34d4:	af 90       	pop	r10
    34d6:	08 95       	ret

000034d8 <main>:
#include <Arduino.h>

int main(void)
{
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
	init();
    34dc:	0e 94 28 1b 	call	0x3650	; 0x3650 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    34e0:	0e 94 81 04 	call	0x902	; 0x902 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    34e4:	cc ef       	ldi	r28, 0xFC	; 252
    34e6:	d4 e1       	ldi	r29, 0x14	; 20
#endif
	
	setup();
    
	for (;;) {
		loop();
    34e8:	0e 94 ac 08 	call	0x1158	; 0x1158 <loop>
		if (serialEventRun) serialEventRun();
    34ec:	20 97       	sbiw	r28, 0x00	; 0
    34ee:	e1 f3       	breq	.-8      	; 0x34e8 <main+0x10>
    34f0:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <_Z14serialEventRunv>
    34f4:	f9 cf       	rjmp	.-14     	; 0x34e8 <main+0x10>

000034f6 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    34f6:	1f 92       	push	r1
    34f8:	0f 92       	push	r0
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	0f 92       	push	r0
    34fe:	11 24       	eor	r1, r1
    3500:	2f 93       	push	r18
    3502:	3f 93       	push	r19
    3504:	8f 93       	push	r24
    3506:	9f 93       	push	r25
    3508:	af 93       	push	r26
    350a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    350c:	80 91 9f 04 	lds	r24, 0x049F
    3510:	90 91 a0 04 	lds	r25, 0x04A0
    3514:	a0 91 a1 04 	lds	r26, 0x04A1
    3518:	b0 91 a2 04 	lds	r27, 0x04A2
	unsigned char f = timer0_fract;
    351c:	30 91 a3 04 	lds	r19, 0x04A3

	m += MILLIS_INC;
    3520:	01 96       	adiw	r24, 0x01	; 1
    3522:	a1 1d       	adc	r26, r1
    3524:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    3526:	23 2f       	mov	r18, r19
    3528:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    352a:	2d 37       	cpi	r18, 0x7D	; 125
    352c:	20 f0       	brcs	.+8      	; 0x3536 <__vector_16+0x40>
		f -= FRACT_MAX;
    352e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    3530:	01 96       	adiw	r24, 0x01	; 1
    3532:	a1 1d       	adc	r26, r1
    3534:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3536:	20 93 a3 04 	sts	0x04A3, r18
	timer0_millis = m;
    353a:	80 93 9f 04 	sts	0x049F, r24
    353e:	90 93 a0 04 	sts	0x04A0, r25
    3542:	a0 93 a1 04 	sts	0x04A1, r26
    3546:	b0 93 a2 04 	sts	0x04A2, r27
	timer0_overflow_count++;
    354a:	80 91 9b 04 	lds	r24, 0x049B
    354e:	90 91 9c 04 	lds	r25, 0x049C
    3552:	a0 91 9d 04 	lds	r26, 0x049D
    3556:	b0 91 9e 04 	lds	r27, 0x049E
    355a:	01 96       	adiw	r24, 0x01	; 1
    355c:	a1 1d       	adc	r26, r1
    355e:	b1 1d       	adc	r27, r1
    3560:	80 93 9b 04 	sts	0x049B, r24
    3564:	90 93 9c 04 	sts	0x049C, r25
    3568:	a0 93 9d 04 	sts	0x049D, r26
    356c:	b0 93 9e 04 	sts	0x049E, r27
}
    3570:	bf 91       	pop	r27
    3572:	af 91       	pop	r26
    3574:	9f 91       	pop	r25
    3576:	8f 91       	pop	r24
    3578:	3f 91       	pop	r19
    357a:	2f 91       	pop	r18
    357c:	0f 90       	pop	r0
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	0f 90       	pop	r0
    3582:	1f 90       	pop	r1
    3584:	18 95       	reti

00003586 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    3586:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    3588:	f8 94       	cli
	m = timer0_millis;
    358a:	20 91 9f 04 	lds	r18, 0x049F
    358e:	30 91 a0 04 	lds	r19, 0x04A0
    3592:	40 91 a1 04 	lds	r20, 0x04A1
    3596:	50 91 a2 04 	lds	r21, 0x04A2
	SREG = oldSREG;
    359a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    359c:	b9 01       	movw	r22, r18
    359e:	ca 01       	movw	r24, r20
    35a0:	08 95       	ret

000035a2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    35a2:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    35a4:	f8 94       	cli
	m = timer0_overflow_count;
    35a6:	20 91 9b 04 	lds	r18, 0x049B
    35aa:	30 91 9c 04 	lds	r19, 0x049C
    35ae:	40 91 9d 04 	lds	r20, 0x049D
    35b2:	50 91 9e 04 	lds	r21, 0x049E
#if defined(TCNT0)
	t = TCNT0;
    35b6:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    35b8:	a8 9b       	sbis	0x15, 0	; 21
    35ba:	06 c0       	rjmp	.+12     	; 0x35c8 <micros+0x26>
    35bc:	8f 3f       	cpi	r24, 0xFF	; 255
    35be:	21 f0       	breq	.+8      	; 0x35c8 <micros+0x26>
		m++;
    35c0:	2f 5f       	subi	r18, 0xFF	; 255
    35c2:	3f 4f       	sbci	r19, 0xFF	; 255
    35c4:	4f 4f       	sbci	r20, 0xFF	; 255
    35c6:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    35c8:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    35ca:	54 2f       	mov	r21, r20
    35cc:	43 2f       	mov	r20, r19
    35ce:	32 2f       	mov	r19, r18
    35d0:	22 27       	eor	r18, r18
    35d2:	28 0f       	add	r18, r24
    35d4:	31 1d       	adc	r19, r1
    35d6:	41 1d       	adc	r20, r1
    35d8:	51 1d       	adc	r21, r1
    35da:	82 e0       	ldi	r24, 0x02	; 2
    35dc:	22 0f       	add	r18, r18
    35de:	33 1f       	adc	r19, r19
    35e0:	44 1f       	adc	r20, r20
    35e2:	55 1f       	adc	r21, r21
    35e4:	8a 95       	dec	r24
    35e6:	d1 f7       	brne	.-12     	; 0x35dc <micros+0x3a>
}
    35e8:	b9 01       	movw	r22, r18
    35ea:	ca 01       	movw	r24, r20
    35ec:	08 95       	ret

000035ee <delay>:

void delay(unsigned long ms)
{
    35ee:	ef 92       	push	r14
    35f0:	ff 92       	push	r15
    35f2:	0f 93       	push	r16
    35f4:	1f 93       	push	r17
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    35fa:	7b 01       	movw	r14, r22
    35fc:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    35fe:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <micros>
    3602:	eb 01       	movw	r28, r22

	while (ms > 0) {
    3604:	0f c0       	rjmp	.+30     	; 0x3624 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    3606:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <micros>
    360a:	6c 1b       	sub	r22, r28
    360c:	7d 0b       	sbc	r23, r29
    360e:	83 e0       	ldi	r24, 0x03	; 3
    3610:	68 3e       	cpi	r22, 0xE8	; 232
    3612:	78 07       	cpc	r23, r24
    3614:	38 f0       	brcs	.+14     	; 0x3624 <delay+0x36>
			ms--;
    3616:	08 94       	sec
    3618:	e1 08       	sbc	r14, r1
    361a:	f1 08       	sbc	r15, r1
    361c:	01 09       	sbc	r16, r1
    361e:	11 09       	sbc	r17, r1
			start += 1000;
    3620:	c8 51       	subi	r28, 0x18	; 24
    3622:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    3624:	e1 14       	cp	r14, r1
    3626:	f1 04       	cpc	r15, r1
    3628:	01 05       	cpc	r16, r1
    362a:	11 05       	cpc	r17, r1
    362c:	61 f7       	brne	.-40     	; 0x3606 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    362e:	df 91       	pop	r29
    3630:	cf 91       	pop	r28
    3632:	1f 91       	pop	r17
    3634:	0f 91       	pop	r16
    3636:	ff 90       	pop	r15
    3638:	ef 90       	pop	r14
    363a:	08 95       	ret

0000363c <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	39 f0       	breq	.+14     	; 0x364e <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    3640:	88 0f       	add	r24, r24
    3642:	99 1f       	adc	r25, r25
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    3648:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <delayMicroseconds+0xe>
    364e:	08 95       	ret

00003650 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3650:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3652:	84 b5       	in	r24, 0x24	; 36
    3654:	82 60       	ori	r24, 0x02	; 2
    3656:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3658:	84 b5       	in	r24, 0x24	; 36
    365a:	81 60       	ori	r24, 0x01	; 1
    365c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    365e:	85 b5       	in	r24, 0x25	; 37
    3660:	82 60       	ori	r24, 0x02	; 2
    3662:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3664:	85 b5       	in	r24, 0x25	; 37
    3666:	81 60       	ori	r24, 0x01	; 1
    3668:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    366a:	ee e6       	ldi	r30, 0x6E	; 110
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	81 60       	ori	r24, 0x01	; 1
    3672:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3674:	e1 e8       	ldi	r30, 0x81	; 129
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    367a:	80 81       	ld	r24, Z
    367c:	82 60       	ori	r24, 0x02	; 2
    367e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3680:	80 81       	ld	r24, Z
    3682:	81 60       	ori	r24, 0x01	; 1
    3684:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3686:	e0 e8       	ldi	r30, 0x80	; 128
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	80 81       	ld	r24, Z
    368c:	81 60       	ori	r24, 0x01	; 1
    368e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3690:	e1 eb       	ldi	r30, 0xB1	; 177
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	84 60       	ori	r24, 0x04	; 4
    3698:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    369a:	e0 eb       	ldi	r30, 0xB0	; 176
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	81 60       	ori	r24, 0x01	; 1
    36a2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    36a4:	ea e7       	ldi	r30, 0x7A	; 122
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	84 60       	ori	r24, 0x04	; 4
    36ac:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    36ae:	80 81       	ld	r24, Z
    36b0:	82 60       	ori	r24, 0x02	; 2
    36b2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    36b4:	80 81       	ld	r24, Z
    36b6:	81 60       	ori	r24, 0x01	; 1
    36b8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    36ba:	80 81       	ld	r24, Z
    36bc:	80 68       	ori	r24, 0x80	; 128
    36be:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    36c0:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    36c4:	08 95       	ret

000036c6 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    36c6:	8e 30       	cpi	r24, 0x0E	; 14
    36c8:	08 f0       	brcs	.+2      	; 0x36cc <analogRead+0x6>
    36ca:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    36cc:	87 70       	andi	r24, 0x07	; 7
    36ce:	90 91 d5 01 	lds	r25, 0x01D5
    36d2:	92 95       	swap	r25
    36d4:	99 0f       	add	r25, r25
    36d6:	99 0f       	add	r25, r25
    36d8:	90 7c       	andi	r25, 0xC0	; 192
    36da:	98 2b       	or	r25, r24
    36dc:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    36e0:	80 91 7a 00 	lds	r24, 0x007A
    36e4:	80 64       	ori	r24, 0x40	; 64
    36e6:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    36ea:	80 91 7a 00 	lds	r24, 0x007A
    36ee:	86 fd       	sbrc	r24, 6
    36f0:	fc cf       	rjmp	.-8      	; 0x36ea <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    36f2:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    36f6:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    36fa:	93 2f       	mov	r25, r19
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	28 2b       	or	r18, r24
    3702:	39 2b       	or	r19, r25
}
    3704:	c9 01       	movw	r24, r18
    3706:	08 95       	ret

00003708 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3708:	83 30       	cpi	r24, 0x03	; 3
    370a:	71 f0       	breq	.+28     	; 0x3728 <turnOffPWM+0x20>
    370c:	84 30       	cpi	r24, 0x04	; 4
    370e:	28 f4       	brcc	.+10     	; 0x371a <turnOffPWM+0x12>
    3710:	81 30       	cpi	r24, 0x01	; 1
    3712:	a1 f0       	breq	.+40     	; 0x373c <turnOffPWM+0x34>
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	21 f5       	brne	.+72     	; 0x3760 <turnOffPWM+0x58>
    3718:	14 c0       	rjmp	.+40     	; 0x3742 <turnOffPWM+0x3a>
    371a:	86 30       	cpi	r24, 0x06	; 6
    371c:	b1 f0       	breq	.+44     	; 0x374a <turnOffPWM+0x42>
    371e:	87 30       	cpi	r24, 0x07	; 7
    3720:	d1 f0       	breq	.+52     	; 0x3756 <turnOffPWM+0x4e>
    3722:	84 30       	cpi	r24, 0x04	; 4
    3724:	e9 f4       	brne	.+58     	; 0x3760 <turnOffPWM+0x58>
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3728:	80 91 80 00 	lds	r24, 0x0080
    372c:	8f 77       	andi	r24, 0x7F	; 127
    372e:	03 c0       	rjmp	.+6      	; 0x3736 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3730:	80 91 80 00 	lds	r24, 0x0080
    3734:	8f 7d       	andi	r24, 0xDF	; 223
    3736:	80 93 80 00 	sts	0x0080, r24
    373a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    373c:	84 b5       	in	r24, 0x24	; 36
    373e:	8f 77       	andi	r24, 0x7F	; 127
    3740:	02 c0       	rjmp	.+4      	; 0x3746 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3742:	84 b5       	in	r24, 0x24	; 36
    3744:	8f 7d       	andi	r24, 0xDF	; 223
    3746:	84 bd       	out	0x24, r24	; 36
    3748:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    374a:	80 91 b0 00 	lds	r24, 0x00B0
    374e:	8f 77       	andi	r24, 0x7F	; 127
    3750:	80 93 b0 00 	sts	0x00B0, r24
    3754:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3756:	80 91 b0 00 	lds	r24, 0x00B0
    375a:	8f 7d       	andi	r24, 0xDF	; 223
    375c:	80 93 b0 00 	sts	0x00B0, r24
    3760:	08 95       	ret

00003762 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	fc 01       	movw	r30, r24
    3766:	eb 58       	subi	r30, 0x8B	; 139
    3768:	fd 4f       	sbci	r31, 0xFD	; 253
    376a:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    376c:	fc 01       	movw	r30, r24
    376e:	ef 59       	subi	r30, 0x9F	; 159
    3770:	fd 4f       	sbci	r31, 0xFD	; 253
    3772:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    3774:	ee 23       	and	r30, r30
    3776:	c1 f0       	breq	.+48     	; 0x37a8 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	ee 0f       	add	r30, r30
    377c:	ff 1f       	adc	r31, r31
    377e:	ed 5b       	subi	r30, 0xBD	; 189
    3780:	fd 4f       	sbci	r31, 0xFD	; 253
    3782:	85 91       	lpm	r24, Z+
    3784:	94 91       	lpm	r25, Z+
    3786:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    3788:	66 23       	and	r22, r22
    378a:	41 f4       	brne	.+16     	; 0x379c <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    378c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    378e:	f8 94       	cli
		*reg &= ~bit;
    3790:	8c 91       	ld	r24, X
    3792:	20 95       	com	r18
    3794:	82 23       	and	r24, r18
    3796:	8c 93       	st	X, r24
		SREG = oldSREG;
    3798:	9f bf       	out	0x3f, r25	; 63
    379a:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    379c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    379e:	f8 94       	cli
		*reg |= bit;
    37a0:	8c 91       	ld	r24, X
    37a2:	82 2b       	or	r24, r18
    37a4:	8c 93       	st	X, r24
		SREG = oldSREG;
    37a6:	9f bf       	out	0x3f, r25	; 63
    37a8:	08 95       	ret

000037aa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    37aa:	0f 93       	push	r16
    37ac:	1f 93       	push	r17
    37ae:	df 93       	push	r29
    37b0:	cf 93       	push	r28
    37b2:	0f 92       	push	r0
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    37b8:	28 2f       	mov	r18, r24
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	f9 01       	movw	r30, r18
    37be:	e7 57       	subi	r30, 0x77	; 119
    37c0:	fd 4f       	sbci	r31, 0xFD	; 253
    37c2:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    37c4:	f9 01       	movw	r30, r18
    37c6:	eb 58       	subi	r30, 0x8B	; 139
    37c8:	fd 4f       	sbci	r31, 0xFD	; 253
    37ca:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    37cc:	2f 59       	subi	r18, 0x9F	; 159
    37ce:	3d 4f       	sbci	r19, 0xFD	; 253
    37d0:	f9 01       	movw	r30, r18
    37d2:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    37d4:	00 23       	and	r16, r16
    37d6:	d9 f0       	breq	.+54     	; 0x380e <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    37d8:	88 23       	and	r24, r24
    37da:	21 f0       	breq	.+8      	; 0x37e4 <digitalWrite+0x3a>
    37dc:	69 83       	std	Y+1, r22	; 0x01
    37de:	0e 94 84 1b 	call	0x3708	; 0x3708 <turnOffPWM>
    37e2:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    37e4:	e0 2f       	mov	r30, r16
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	ee 0f       	add	r30, r30
    37ea:	ff 1f       	adc	r31, r31
    37ec:	e3 5b       	subi	r30, 0xB3	; 179
    37ee:	fd 4f       	sbci	r31, 0xFD	; 253
    37f0:	85 91       	lpm	r24, Z+
    37f2:	94 91       	lpm	r25, Z+
    37f4:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    37f6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    37f8:	f8 94       	cli

	if (val == LOW) {
    37fa:	66 23       	and	r22, r22
    37fc:	21 f4       	brne	.+8      	; 0x3806 <digitalWrite+0x5c>
		*out &= ~bit;
    37fe:	8c 91       	ld	r24, X
    3800:	10 95       	com	r17
    3802:	81 23       	and	r24, r17
    3804:	02 c0       	rjmp	.+4      	; 0x380a <digitalWrite+0x60>
	} else {
		*out |= bit;
    3806:	8c 91       	ld	r24, X
    3808:	81 2b       	or	r24, r17
    380a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    380c:	9f bf       	out	0x3f, r25	; 63
}
    380e:	0f 90       	pop	r0
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	08 95       	ret

0000381a <digitalRead>:

int digitalRead(uint8_t pin)
{
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    381e:	28 2f       	mov	r18, r24
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	f9 01       	movw	r30, r18
    3824:	e7 57       	subi	r30, 0x77	; 119
    3826:	fd 4f       	sbci	r31, 0xFD	; 253
    3828:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    382a:	f9 01       	movw	r30, r18
    382c:	eb 58       	subi	r30, 0x8B	; 139
    382e:	fd 4f       	sbci	r31, 0xFD	; 253
    3830:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    3832:	2f 59       	subi	r18, 0x9F	; 159
    3834:	3d 4f       	sbci	r19, 0xFD	; 253
    3836:	f9 01       	movw	r30, r18
    3838:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    383a:	11 23       	and	r17, r17
    383c:	91 f0       	breq	.+36     	; 0x3862 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    383e:	88 23       	and	r24, r24
    3840:	11 f0       	breq	.+4      	; 0x3846 <digitalRead+0x2c>
    3842:	0e 94 84 1b 	call	0x3708	; 0x3708 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3846:	e1 2f       	mov	r30, r17
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	ee 0f       	add	r30, r30
    384c:	ff 1f       	adc	r31, r31
    384e:	e9 5a       	subi	r30, 0xA9	; 169
    3850:	fd 4f       	sbci	r31, 0xFD	; 253
    3852:	85 91       	lpm	r24, Z+
    3854:	94 91       	lpm	r25, Z+
    3856:	dc 01       	movw	r26, r24
    3858:	8c 91       	ld	r24, X
    385a:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    385c:	21 e0       	ldi	r18, 0x01	; 1
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	11 f4       	brne	.+4      	; 0x3866 <digitalRead+0x4c>
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    3866:	c9 01       	movw	r24, r18
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	08 95       	ret

0000386e <__udivmodqi4>:
    386e:	99 1b       	sub	r25, r25
    3870:	79 e0       	ldi	r23, 0x09	; 9
    3872:	04 c0       	rjmp	.+8      	; 0x387c <__udivmodqi4_ep>

00003874 <__udivmodqi4_loop>:
    3874:	99 1f       	adc	r25, r25
    3876:	96 17       	cp	r25, r22
    3878:	08 f0       	brcs	.+2      	; 0x387c <__udivmodqi4_ep>
    387a:	96 1b       	sub	r25, r22

0000387c <__udivmodqi4_ep>:
    387c:	88 1f       	adc	r24, r24
    387e:	7a 95       	dec	r23
    3880:	c9 f7       	brne	.-14     	; 0x3874 <__udivmodqi4_loop>
    3882:	80 95       	com	r24
    3884:	08 95       	ret

00003886 <__divmodhi4>:
    3886:	97 fb       	bst	r25, 7
    3888:	09 2e       	mov	r0, r25
    388a:	07 26       	eor	r0, r23
    388c:	0a d0       	rcall	.+20     	; 0x38a2 <__divmodhi4_neg1>
    388e:	77 fd       	sbrc	r23, 7
    3890:	04 d0       	rcall	.+8      	; 0x389a <__divmodhi4_neg2>
    3892:	2e d0       	rcall	.+92     	; 0x38f0 <__udivmodhi4>
    3894:	06 d0       	rcall	.+12     	; 0x38a2 <__divmodhi4_neg1>
    3896:	00 20       	and	r0, r0
    3898:	1a f4       	brpl	.+6      	; 0x38a0 <__divmodhi4_exit>

0000389a <__divmodhi4_neg2>:
    389a:	70 95       	com	r23
    389c:	61 95       	neg	r22
    389e:	7f 4f       	sbci	r23, 0xFF	; 255

000038a0 <__divmodhi4_exit>:
    38a0:	08 95       	ret

000038a2 <__divmodhi4_neg1>:
    38a2:	f6 f7       	brtc	.-4      	; 0x38a0 <__divmodhi4_exit>
    38a4:	90 95       	com	r25
    38a6:	81 95       	neg	r24
    38a8:	9f 4f       	sbci	r25, 0xFF	; 255
    38aa:	08 95       	ret

000038ac <__udivmodsi4>:
    38ac:	a1 e2       	ldi	r26, 0x21	; 33
    38ae:	1a 2e       	mov	r1, r26
    38b0:	aa 1b       	sub	r26, r26
    38b2:	bb 1b       	sub	r27, r27
    38b4:	fd 01       	movw	r30, r26
    38b6:	0d c0       	rjmp	.+26     	; 0x38d2 <__udivmodsi4_ep>

000038b8 <__udivmodsi4_loop>:
    38b8:	aa 1f       	adc	r26, r26
    38ba:	bb 1f       	adc	r27, r27
    38bc:	ee 1f       	adc	r30, r30
    38be:	ff 1f       	adc	r31, r31
    38c0:	a2 17       	cp	r26, r18
    38c2:	b3 07       	cpc	r27, r19
    38c4:	e4 07       	cpc	r30, r20
    38c6:	f5 07       	cpc	r31, r21
    38c8:	20 f0       	brcs	.+8      	; 0x38d2 <__udivmodsi4_ep>
    38ca:	a2 1b       	sub	r26, r18
    38cc:	b3 0b       	sbc	r27, r19
    38ce:	e4 0b       	sbc	r30, r20
    38d0:	f5 0b       	sbc	r31, r21

000038d2 <__udivmodsi4_ep>:
    38d2:	66 1f       	adc	r22, r22
    38d4:	77 1f       	adc	r23, r23
    38d6:	88 1f       	adc	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	1a 94       	dec	r1
    38dc:	69 f7       	brne	.-38     	; 0x38b8 <__udivmodsi4_loop>
    38de:	60 95       	com	r22
    38e0:	70 95       	com	r23
    38e2:	80 95       	com	r24
    38e4:	90 95       	com	r25
    38e6:	9b 01       	movw	r18, r22
    38e8:	ac 01       	movw	r20, r24
    38ea:	bd 01       	movw	r22, r26
    38ec:	cf 01       	movw	r24, r30
    38ee:	08 95       	ret

000038f0 <__udivmodhi4>:
    38f0:	aa 1b       	sub	r26, r26
    38f2:	bb 1b       	sub	r27, r27
    38f4:	51 e1       	ldi	r21, 0x11	; 17
    38f6:	07 c0       	rjmp	.+14     	; 0x3906 <__udivmodhi4_ep>

000038f8 <__udivmodhi4_loop>:
    38f8:	aa 1f       	adc	r26, r26
    38fa:	bb 1f       	adc	r27, r27
    38fc:	a6 17       	cp	r26, r22
    38fe:	b7 07       	cpc	r27, r23
    3900:	10 f0       	brcs	.+4      	; 0x3906 <__udivmodhi4_ep>
    3902:	a6 1b       	sub	r26, r22
    3904:	b7 0b       	sbc	r27, r23

00003906 <__udivmodhi4_ep>:
    3906:	88 1f       	adc	r24, r24
    3908:	99 1f       	adc	r25, r25
    390a:	5a 95       	dec	r21
    390c:	a9 f7       	brne	.-22     	; 0x38f8 <__udivmodhi4_loop>
    390e:	80 95       	com	r24
    3910:	90 95       	com	r25
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	08 95       	ret

00003918 <__tablejump2__>:
    3918:	ee 0f       	add	r30, r30
    391a:	ff 1f       	adc	r31, r31

0000391c <__tablejump__>:
    391c:	05 90       	lpm	r0, Z+
    391e:	f4 91       	lpm	r31, Z+
    3920:	e0 2d       	mov	r30, r0
    3922:	09 94       	ijmp

00003924 <malloc>:
    3924:	cf 93       	push	r28
    3926:	df 93       	push	r29
    3928:	82 30       	cpi	r24, 0x02	; 2
    392a:	91 05       	cpc	r25, r1
    392c:	10 f4       	brcc	.+4      	; 0x3932 <malloc+0xe>
    392e:	82 e0       	ldi	r24, 0x02	; 2
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	e0 91 a6 04 	lds	r30, 0x04A6
    3936:	f0 91 a7 04 	lds	r31, 0x04A7
    393a:	40 e0       	ldi	r20, 0x00	; 0
    393c:	50 e0       	ldi	r21, 0x00	; 0
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	26 c0       	rjmp	.+76     	; 0x3990 <malloc+0x6c>
    3944:	60 81       	ld	r22, Z
    3946:	71 81       	ldd	r23, Z+1	; 0x01
    3948:	68 17       	cp	r22, r24
    394a:	79 07       	cpc	r23, r25
    394c:	e0 f0       	brcs	.+56     	; 0x3986 <malloc+0x62>
    394e:	68 17       	cp	r22, r24
    3950:	79 07       	cpc	r23, r25
    3952:	81 f4       	brne	.+32     	; 0x3974 <malloc+0x50>
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	21 15       	cp	r18, r1
    395a:	31 05       	cpc	r19, r1
    395c:	31 f0       	breq	.+12     	; 0x396a <malloc+0x46>
    395e:	d9 01       	movw	r26, r18
    3960:	13 96       	adiw	r26, 0x03	; 3
    3962:	9c 93       	st	X, r25
    3964:	8e 93       	st	-X, r24
    3966:	12 97       	sbiw	r26, 0x02	; 2
    3968:	2b c0       	rjmp	.+86     	; 0x39c0 <malloc+0x9c>
    396a:	90 93 a7 04 	sts	0x04A7, r25
    396e:	80 93 a6 04 	sts	0x04A6, r24
    3972:	26 c0       	rjmp	.+76     	; 0x39c0 <malloc+0x9c>
    3974:	41 15       	cp	r20, r1
    3976:	51 05       	cpc	r21, r1
    3978:	19 f0       	breq	.+6      	; 0x3980 <malloc+0x5c>
    397a:	64 17       	cp	r22, r20
    397c:	75 07       	cpc	r23, r21
    397e:	18 f4       	brcc	.+6      	; 0x3986 <malloc+0x62>
    3980:	ab 01       	movw	r20, r22
    3982:	e9 01       	movw	r28, r18
    3984:	df 01       	movw	r26, r30
    3986:	9f 01       	movw	r18, r30
    3988:	72 81       	ldd	r23, Z+2	; 0x02
    398a:	63 81       	ldd	r22, Z+3	; 0x03
    398c:	e7 2f       	mov	r30, r23
    398e:	f6 2f       	mov	r31, r22
    3990:	30 97       	sbiw	r30, 0x00	; 0
    3992:	c1 f6       	brne	.-80     	; 0x3944 <malloc+0x20>
    3994:	41 15       	cp	r20, r1
    3996:	51 05       	cpc	r21, r1
    3998:	01 f1       	breq	.+64     	; 0x39da <malloc+0xb6>
    399a:	48 1b       	sub	r20, r24
    399c:	59 0b       	sbc	r21, r25
    399e:	44 30       	cpi	r20, 0x04	; 4
    39a0:	51 05       	cpc	r21, r1
    39a2:	80 f4       	brcc	.+32     	; 0x39c4 <malloc+0xa0>
    39a4:	12 96       	adiw	r26, 0x02	; 2
    39a6:	8d 91       	ld	r24, X+
    39a8:	9c 91       	ld	r25, X
    39aa:	13 97       	sbiw	r26, 0x03	; 3
    39ac:	20 97       	sbiw	r28, 0x00	; 0
    39ae:	19 f0       	breq	.+6      	; 0x39b6 <malloc+0x92>
    39b0:	9b 83       	std	Y+3, r25	; 0x03
    39b2:	8a 83       	std	Y+2, r24	; 0x02
    39b4:	04 c0       	rjmp	.+8      	; 0x39be <malloc+0x9a>
    39b6:	90 93 a7 04 	sts	0x04A7, r25
    39ba:	80 93 a6 04 	sts	0x04A6, r24
    39be:	fd 01       	movw	r30, r26
    39c0:	32 96       	adiw	r30, 0x02	; 2
    39c2:	46 c0       	rjmp	.+140    	; 0x3a50 <malloc+0x12c>
    39c4:	fd 01       	movw	r30, r26
    39c6:	e4 0f       	add	r30, r20
    39c8:	f5 1f       	adc	r31, r21
    39ca:	81 93       	st	Z+, r24
    39cc:	91 93       	st	Z+, r25
    39ce:	42 50       	subi	r20, 0x02	; 2
    39d0:	50 40       	sbci	r21, 0x00	; 0
    39d2:	11 96       	adiw	r26, 0x01	; 1
    39d4:	5c 93       	st	X, r21
    39d6:	4e 93       	st	-X, r20
    39d8:	3b c0       	rjmp	.+118    	; 0x3a50 <malloc+0x12c>
    39da:	20 91 a4 04 	lds	r18, 0x04A4
    39de:	30 91 a5 04 	lds	r19, 0x04A5
    39e2:	21 15       	cp	r18, r1
    39e4:	31 05       	cpc	r19, r1
    39e6:	41 f4       	brne	.+16     	; 0x39f8 <malloc+0xd4>
    39e8:	20 91 ce 01 	lds	r18, 0x01CE
    39ec:	30 91 cf 01 	lds	r19, 0x01CF
    39f0:	30 93 a5 04 	sts	0x04A5, r19
    39f4:	20 93 a4 04 	sts	0x04A4, r18
    39f8:	20 91 d0 01 	lds	r18, 0x01D0
    39fc:	30 91 d1 01 	lds	r19, 0x01D1
    3a00:	21 15       	cp	r18, r1
    3a02:	31 05       	cpc	r19, r1
    3a04:	41 f4       	brne	.+16     	; 0x3a16 <malloc+0xf2>
    3a06:	2d b7       	in	r18, 0x3d	; 61
    3a08:	3e b7       	in	r19, 0x3e	; 62
    3a0a:	40 91 cc 01 	lds	r20, 0x01CC
    3a0e:	50 91 cd 01 	lds	r21, 0x01CD
    3a12:	24 1b       	sub	r18, r20
    3a14:	35 0b       	sbc	r19, r21
    3a16:	e0 91 a4 04 	lds	r30, 0x04A4
    3a1a:	f0 91 a5 04 	lds	r31, 0x04A5
    3a1e:	e2 17       	cp	r30, r18
    3a20:	f3 07       	cpc	r31, r19
    3a22:	a0 f4       	brcc	.+40     	; 0x3a4c <malloc+0x128>
    3a24:	2e 1b       	sub	r18, r30
    3a26:	3f 0b       	sbc	r19, r31
    3a28:	28 17       	cp	r18, r24
    3a2a:	39 07       	cpc	r19, r25
    3a2c:	78 f0       	brcs	.+30     	; 0x3a4c <malloc+0x128>
    3a2e:	ac 01       	movw	r20, r24
    3a30:	4e 5f       	subi	r20, 0xFE	; 254
    3a32:	5f 4f       	sbci	r21, 0xFF	; 255
    3a34:	24 17       	cp	r18, r20
    3a36:	35 07       	cpc	r19, r21
    3a38:	48 f0       	brcs	.+18     	; 0x3a4c <malloc+0x128>
    3a3a:	4e 0f       	add	r20, r30
    3a3c:	5f 1f       	adc	r21, r31
    3a3e:	50 93 a5 04 	sts	0x04A5, r21
    3a42:	40 93 a4 04 	sts	0x04A4, r20
    3a46:	81 93       	st	Z+, r24
    3a48:	91 93       	st	Z+, r25
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <malloc+0x12c>
    3a4c:	e0 e0       	ldi	r30, 0x00	; 0
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	cf 01       	movw	r24, r30
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	08 95       	ret

00003a58 <free>:
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <free+0xa>
    3a60:	91 c0       	rjmp	.+290    	; 0x3b84 <free+0x12c>
    3a62:	fc 01       	movw	r30, r24
    3a64:	32 97       	sbiw	r30, 0x02	; 2
    3a66:	13 82       	std	Z+3, r1	; 0x03
    3a68:	12 82       	std	Z+2, r1	; 0x02
    3a6a:	60 91 a6 04 	lds	r22, 0x04A6
    3a6e:	70 91 a7 04 	lds	r23, 0x04A7
    3a72:	61 15       	cp	r22, r1
    3a74:	71 05       	cpc	r23, r1
    3a76:	81 f4       	brne	.+32     	; 0x3a98 <free+0x40>
    3a78:	20 81       	ld	r18, Z
    3a7a:	31 81       	ldd	r19, Z+1	; 0x01
    3a7c:	28 0f       	add	r18, r24
    3a7e:	39 1f       	adc	r19, r25
    3a80:	80 91 a4 04 	lds	r24, 0x04A4
    3a84:	90 91 a5 04 	lds	r25, 0x04A5
    3a88:	82 17       	cp	r24, r18
    3a8a:	93 07       	cpc	r25, r19
    3a8c:	99 f5       	brne	.+102    	; 0x3af4 <free+0x9c>
    3a8e:	f0 93 a5 04 	sts	0x04A5, r31
    3a92:	e0 93 a4 04 	sts	0x04A4, r30
    3a96:	76 c0       	rjmp	.+236    	; 0x3b84 <free+0x12c>
    3a98:	db 01       	movw	r26, r22
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <free+0x4c>
    3aa0:	cd 01       	movw	r24, r26
    3aa2:	d9 01       	movw	r26, r18
    3aa4:	ae 17       	cp	r26, r30
    3aa6:	bf 07       	cpc	r27, r31
    3aa8:	48 f4       	brcc	.+18     	; 0x3abc <free+0x64>
    3aaa:	12 96       	adiw	r26, 0x02	; 2
    3aac:	2d 91       	ld	r18, X+
    3aae:	3c 91       	ld	r19, X
    3ab0:	13 97       	sbiw	r26, 0x03	; 3
    3ab2:	21 15       	cp	r18, r1
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	a1 f7       	brne	.-24     	; 0x3aa0 <free+0x48>
    3ab8:	cd 01       	movw	r24, r26
    3aba:	21 c0       	rjmp	.+66     	; 0x3afe <free+0xa6>
    3abc:	b3 83       	std	Z+3, r27	; 0x03
    3abe:	a2 83       	std	Z+2, r26	; 0x02
    3ac0:	ef 01       	movw	r28, r30
    3ac2:	49 91       	ld	r20, Y+
    3ac4:	59 91       	ld	r21, Y+
    3ac6:	9e 01       	movw	r18, r28
    3ac8:	24 0f       	add	r18, r20
    3aca:	35 1f       	adc	r19, r21
    3acc:	a2 17       	cp	r26, r18
    3ace:	b3 07       	cpc	r27, r19
    3ad0:	79 f4       	brne	.+30     	; 0x3af0 <free+0x98>
    3ad2:	2d 91       	ld	r18, X+
    3ad4:	3c 91       	ld	r19, X
    3ad6:	11 97       	sbiw	r26, 0x01	; 1
    3ad8:	24 0f       	add	r18, r20
    3ada:	35 1f       	adc	r19, r21
    3adc:	2e 5f       	subi	r18, 0xFE	; 254
    3ade:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae0:	31 83       	std	Z+1, r19	; 0x01
    3ae2:	20 83       	st	Z, r18
    3ae4:	12 96       	adiw	r26, 0x02	; 2
    3ae6:	2d 91       	ld	r18, X+
    3ae8:	3c 91       	ld	r19, X
    3aea:	13 97       	sbiw	r26, 0x03	; 3
    3aec:	33 83       	std	Z+3, r19	; 0x03
    3aee:	22 83       	std	Z+2, r18	; 0x02
    3af0:	00 97       	sbiw	r24, 0x00	; 0
    3af2:	29 f4       	brne	.+10     	; 0x3afe <free+0xa6>
    3af4:	f0 93 a7 04 	sts	0x04A7, r31
    3af8:	e0 93 a6 04 	sts	0x04A6, r30
    3afc:	43 c0       	rjmp	.+134    	; 0x3b84 <free+0x12c>
    3afe:	dc 01       	movw	r26, r24
    3b00:	13 96       	adiw	r26, 0x03	; 3
    3b02:	fc 93       	st	X, r31
    3b04:	ee 93       	st	-X, r30
    3b06:	12 97       	sbiw	r26, 0x02	; 2
    3b08:	4d 91       	ld	r20, X+
    3b0a:	5d 91       	ld	r21, X+
    3b0c:	a4 0f       	add	r26, r20
    3b0e:	b5 1f       	adc	r27, r21
    3b10:	ea 17       	cp	r30, r26
    3b12:	fb 07       	cpc	r31, r27
    3b14:	69 f4       	brne	.+26     	; 0x3b30 <free+0xd8>
    3b16:	20 81       	ld	r18, Z
    3b18:	31 81       	ldd	r19, Z+1	; 0x01
    3b1a:	24 0f       	add	r18, r20
    3b1c:	35 1f       	adc	r19, r21
    3b1e:	2e 5f       	subi	r18, 0xFE	; 254
    3b20:	3f 4f       	sbci	r19, 0xFF	; 255
    3b22:	ec 01       	movw	r28, r24
    3b24:	39 83       	std	Y+1, r19	; 0x01
    3b26:	28 83       	st	Y, r18
    3b28:	22 81       	ldd	r18, Z+2	; 0x02
    3b2a:	33 81       	ldd	r19, Z+3	; 0x03
    3b2c:	3b 83       	std	Y+3, r19	; 0x03
    3b2e:	2a 83       	std	Y+2, r18	; 0x02
    3b30:	e0 e0       	ldi	r30, 0x00	; 0
    3b32:	f0 e0       	ldi	r31, 0x00	; 0
    3b34:	02 c0       	rjmp	.+4      	; 0x3b3a <free+0xe2>
    3b36:	fb 01       	movw	r30, r22
    3b38:	bc 01       	movw	r22, r24
    3b3a:	db 01       	movw	r26, r22
    3b3c:	12 96       	adiw	r26, 0x02	; 2
    3b3e:	8d 91       	ld	r24, X+
    3b40:	9c 91       	ld	r25, X
    3b42:	13 97       	sbiw	r26, 0x03	; 3
    3b44:	00 97       	sbiw	r24, 0x00	; 0
    3b46:	b9 f7       	brne	.-18     	; 0x3b36 <free+0xde>
    3b48:	9b 01       	movw	r18, r22
    3b4a:	2e 5f       	subi	r18, 0xFE	; 254
    3b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b4e:	8d 91       	ld	r24, X+
    3b50:	9c 91       	ld	r25, X
    3b52:	11 97       	sbiw	r26, 0x01	; 1
    3b54:	82 0f       	add	r24, r18
    3b56:	93 1f       	adc	r25, r19
    3b58:	40 91 a4 04 	lds	r20, 0x04A4
    3b5c:	50 91 a5 04 	lds	r21, 0x04A5
    3b60:	48 17       	cp	r20, r24
    3b62:	59 07       	cpc	r21, r25
    3b64:	79 f4       	brne	.+30     	; 0x3b84 <free+0x12c>
    3b66:	30 97       	sbiw	r30, 0x00	; 0
    3b68:	29 f4       	brne	.+10     	; 0x3b74 <free+0x11c>
    3b6a:	10 92 a7 04 	sts	0x04A7, r1
    3b6e:	10 92 a6 04 	sts	0x04A6, r1
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <free+0x120>
    3b74:	13 82       	std	Z+3, r1	; 0x03
    3b76:	12 82       	std	Z+2, r1	; 0x02
    3b78:	22 50       	subi	r18, 0x02	; 2
    3b7a:	30 40       	sbci	r19, 0x00	; 0
    3b7c:	30 93 a5 04 	sts	0x04A5, r19
    3b80:	20 93 a4 04 	sts	0x04A4, r18
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	08 95       	ret

00003b8a <realloc>:
    3b8a:	a0 e0       	ldi	r26, 0x00	; 0
    3b8c:	b0 e0       	ldi	r27, 0x00	; 0
    3b8e:	eb ec       	ldi	r30, 0xCB	; 203
    3b90:	fd e1       	ldi	r31, 0x1D	; 29
    3b92:	0c 94 53 1f 	jmp	0x3ea6	; 0x3ea6 <__prologue_saves__+0xc>
    3b96:	8c 01       	movw	r16, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	01 15       	cp	r16, r1
    3b9c:	11 05       	cpc	r17, r1
    3b9e:	29 f4       	brne	.+10     	; 0x3baa <realloc+0x20>
    3ba0:	0e 94 92 1c 	call	0x3924	; 0x3924 <malloc>
    3ba4:	08 2f       	mov	r16, r24
    3ba6:	19 2f       	mov	r17, r25
    3ba8:	b5 c0       	rjmp	.+362    	; 0x3d14 <realloc+0x18a>
    3baa:	d8 01       	movw	r26, r16
    3bac:	12 97       	sbiw	r26, 0x02	; 2
    3bae:	98 01       	movw	r18, r16
    3bb0:	26 0f       	add	r18, r22
    3bb2:	37 1f       	adc	r19, r23
    3bb4:	2a 17       	cp	r18, r26
    3bb6:	3b 07       	cpc	r19, r27
    3bb8:	08 f4       	brcc	.+2      	; 0x3bbc <realloc+0x32>
    3bba:	aa c0       	rjmp	.+340    	; 0x3d10 <realloc+0x186>
    3bbc:	ed 90       	ld	r14, X+
    3bbe:	fc 90       	ld	r15, X
    3bc0:	11 97       	sbiw	r26, 0x01	; 1
    3bc2:	e6 16       	cp	r14, r22
    3bc4:	f7 06       	cpc	r15, r23
    3bc6:	d0 f0       	brcs	.+52     	; 0x3bfc <realloc+0x72>
    3bc8:	45 e0       	ldi	r20, 0x05	; 5
    3bca:	e4 16       	cp	r14, r20
    3bcc:	f1 04       	cpc	r15, r1
    3bce:	08 f4       	brcc	.+2      	; 0x3bd2 <realloc+0x48>
    3bd0:	a1 c0       	rjmp	.+322    	; 0x3d14 <realloc+0x18a>
    3bd2:	a7 01       	movw	r20, r14
    3bd4:	44 50       	subi	r20, 0x04	; 4
    3bd6:	50 40       	sbci	r21, 0x00	; 0
    3bd8:	46 17       	cp	r20, r22
    3bda:	57 07       	cpc	r21, r23
    3bdc:	08 f4       	brcc	.+2      	; 0x3be0 <realloc+0x56>
    3bde:	9a c0       	rjmp	.+308    	; 0x3d14 <realloc+0x18a>
    3be0:	a7 01       	movw	r20, r14
    3be2:	42 50       	subi	r20, 0x02	; 2
    3be4:	50 40       	sbci	r21, 0x00	; 0
    3be6:	46 1b       	sub	r20, r22
    3be8:	57 0b       	sbc	r21, r23
    3bea:	f9 01       	movw	r30, r18
    3bec:	41 93       	st	Z+, r20
    3bee:	51 93       	st	Z+, r21
    3bf0:	6d 93       	st	X+, r22
    3bf2:	7c 93       	st	X, r23
    3bf4:	cf 01       	movw	r24, r30
    3bf6:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <free>
    3bfa:	8c c0       	rjmp	.+280    	; 0x3d14 <realloc+0x18a>
    3bfc:	5b 01       	movw	r10, r22
    3bfe:	ae 18       	sub	r10, r14
    3c00:	bf 08       	sbc	r11, r15
    3c02:	48 01       	movw	r8, r16
    3c04:	8e 0c       	add	r8, r14
    3c06:	9f 1c       	adc	r9, r15
    3c08:	e0 91 a6 04 	lds	r30, 0x04A6
    3c0c:	f0 91 a7 04 	lds	r31, 0x04A7
    3c10:	cc 24       	eor	r12, r12
    3c12:	dd 24       	eor	r13, r13
    3c14:	c0 e0       	ldi	r28, 0x00	; 0
    3c16:	d0 e0       	ldi	r29, 0x00	; 0
    3c18:	41 c0       	rjmp	.+130    	; 0x3c9c <realloc+0x112>
    3c1a:	e8 15       	cp	r30, r8
    3c1c:	f9 05       	cpc	r31, r9
    3c1e:	99 f5       	brne	.+102    	; 0x3c86 <realloc+0xfc>
    3c20:	60 81       	ld	r22, Z
    3c22:	71 81       	ldd	r23, Z+1	; 0x01
    3c24:	ab 01       	movw	r20, r22
    3c26:	4e 5f       	subi	r20, 0xFE	; 254
    3c28:	5f 4f       	sbci	r21, 0xFF	; 255
    3c2a:	4a 15       	cp	r20, r10
    3c2c:	5b 05       	cpc	r21, r11
    3c2e:	58 f1       	brcs	.+86     	; 0x3c86 <realloc+0xfc>
    3c30:	ab 01       	movw	r20, r22
    3c32:	4a 19       	sub	r20, r10
    3c34:	5b 09       	sbc	r21, r11
    3c36:	cc 24       	eor	r12, r12
    3c38:	dd 24       	eor	r13, r13
    3c3a:	68 94       	set
    3c3c:	c1 f8       	bld	r12, 1
    3c3e:	c4 0e       	add	r12, r20
    3c40:	d5 1e       	adc	r13, r21
    3c42:	82 80       	ldd	r8, Z+2	; 0x02
    3c44:	a3 80       	ldd	r10, Z+3	; 0x03
    3c46:	e5 e0       	ldi	r30, 0x05	; 5
    3c48:	ce 16       	cp	r12, r30
    3c4a:	d1 04       	cpc	r13, r1
    3c4c:	48 f0       	brcs	.+18     	; 0x3c60 <realloc+0xd6>
    3c4e:	f9 01       	movw	r30, r18
    3c50:	82 82       	std	Z+2, r8	; 0x02
    3c52:	a3 82       	std	Z+3, r10	; 0x03
    3c54:	51 83       	std	Z+1, r21	; 0x01
    3c56:	40 83       	st	Z, r20
    3c58:	11 96       	adiw	r26, 0x01	; 1
    3c5a:	9c 93       	st	X, r25
    3c5c:	8e 93       	st	-X, r24
    3c5e:	09 c0       	rjmp	.+18     	; 0x3c72 <realloc+0xe8>
    3c60:	c7 01       	movw	r24, r14
    3c62:	02 96       	adiw	r24, 0x02	; 2
    3c64:	86 0f       	add	r24, r22
    3c66:	97 1f       	adc	r25, r23
    3c68:	11 96       	adiw	r26, 0x01	; 1
    3c6a:	9c 93       	st	X, r25
    3c6c:	8e 93       	st	-X, r24
    3c6e:	e8 2d       	mov	r30, r8
    3c70:	fa 2d       	mov	r31, r10
    3c72:	20 97       	sbiw	r28, 0x00	; 0
    3c74:	19 f0       	breq	.+6      	; 0x3c7c <realloc+0xf2>
    3c76:	fb 83       	std	Y+3, r31	; 0x03
    3c78:	ea 83       	std	Y+2, r30	; 0x02
    3c7a:	4c c0       	rjmp	.+152    	; 0x3d14 <realloc+0x18a>
    3c7c:	f0 93 a7 04 	sts	0x04A7, r31
    3c80:	e0 93 a6 04 	sts	0x04A6, r30
    3c84:	47 c0       	rjmp	.+142    	; 0x3d14 <realloc+0x18a>
    3c86:	40 81       	ld	r20, Z
    3c88:	51 81       	ldd	r21, Z+1	; 0x01
    3c8a:	c4 16       	cp	r12, r20
    3c8c:	d5 06       	cpc	r13, r21
    3c8e:	08 f4       	brcc	.+2      	; 0x3c92 <realloc+0x108>
    3c90:	6a 01       	movw	r12, r20
    3c92:	ef 01       	movw	r28, r30
    3c94:	52 81       	ldd	r21, Z+2	; 0x02
    3c96:	43 81       	ldd	r20, Z+3	; 0x03
    3c98:	e5 2f       	mov	r30, r21
    3c9a:	f4 2f       	mov	r31, r20
    3c9c:	30 97       	sbiw	r30, 0x00	; 0
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <realloc+0x118>
    3ca0:	bc cf       	rjmp	.-136    	; 0x3c1a <realloc+0x90>
    3ca2:	40 91 a4 04 	lds	r20, 0x04A4
    3ca6:	50 91 a5 04 	lds	r21, 0x04A5
    3caa:	48 15       	cp	r20, r8
    3cac:	59 05       	cpc	r21, r9
    3cae:	e9 f4       	brne	.+58     	; 0x3cea <realloc+0x160>
    3cb0:	c8 16       	cp	r12, r24
    3cb2:	d9 06       	cpc	r13, r25
    3cb4:	d0 f4       	brcc	.+52     	; 0x3cea <realloc+0x160>
    3cb6:	40 91 d0 01 	lds	r20, 0x01D0
    3cba:	50 91 d1 01 	lds	r21, 0x01D1
    3cbe:	41 15       	cp	r20, r1
    3cc0:	51 05       	cpc	r21, r1
    3cc2:	41 f4       	brne	.+16     	; 0x3cd4 <realloc+0x14a>
    3cc4:	4d b7       	in	r20, 0x3d	; 61
    3cc6:	5e b7       	in	r21, 0x3e	; 62
    3cc8:	60 91 cc 01 	lds	r22, 0x01CC
    3ccc:	70 91 cd 01 	lds	r23, 0x01CD
    3cd0:	46 1b       	sub	r20, r22
    3cd2:	57 0b       	sbc	r21, r23
    3cd4:	24 17       	cp	r18, r20
    3cd6:	35 07       	cpc	r19, r21
    3cd8:	d8 f4       	brcc	.+54     	; 0x3d10 <realloc+0x186>
    3cda:	30 93 a5 04 	sts	0x04A5, r19
    3cde:	20 93 a4 04 	sts	0x04A4, r18
    3ce2:	11 96       	adiw	r26, 0x01	; 1
    3ce4:	9c 93       	st	X, r25
    3ce6:	8e 93       	st	-X, r24
    3ce8:	15 c0       	rjmp	.+42     	; 0x3d14 <realloc+0x18a>
    3cea:	0e 94 92 1c 	call	0x3924	; 0x3924 <malloc>
    3cee:	c8 2e       	mov	r12, r24
    3cf0:	e6 01       	movw	r28, r12
    3cf2:	6e 01       	movw	r12, r28
    3cf4:	d9 2e       	mov	r13, r25
    3cf6:	e6 01       	movw	r28, r12
    3cf8:	20 97       	sbiw	r28, 0x00	; 0
    3cfa:	51 f0       	breq	.+20     	; 0x3d10 <realloc+0x186>
    3cfc:	8c 2d       	mov	r24, r12
    3cfe:	b8 01       	movw	r22, r16
    3d00:	a7 01       	movw	r20, r14
    3d02:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <memcpy>
    3d06:	c8 01       	movw	r24, r16
    3d08:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <free>
    3d0c:	86 01       	movw	r16, r12
    3d0e:	02 c0       	rjmp	.+4      	; 0x3d14 <realloc+0x18a>
    3d10:	00 e0       	ldi	r16, 0x00	; 0
    3d12:	10 e0       	ldi	r17, 0x00	; 0
    3d14:	c8 01       	movw	r24, r16
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
    3d1a:	ec e0       	ldi	r30, 0x0C	; 12
    3d1c:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__epilogue_restores__+0xc>

00003d20 <atoi>:
    3d20:	fc 01       	movw	r30, r24
    3d22:	88 27       	eor	r24, r24
    3d24:	99 27       	eor	r25, r25
    3d26:	e8 94       	clt
    3d28:	21 91       	ld	r18, Z+
    3d2a:	20 32       	cpi	r18, 0x20	; 32
    3d2c:	e9 f3       	breq	.-6      	; 0x3d28 <atoi+0x8>
    3d2e:	29 30       	cpi	r18, 0x09	; 9
    3d30:	10 f0       	brcs	.+4      	; 0x3d36 <atoi+0x16>
    3d32:	2e 30       	cpi	r18, 0x0E	; 14
    3d34:	c8 f3       	brcs	.-14     	; 0x3d28 <atoi+0x8>
    3d36:	2b 32       	cpi	r18, 0x2B	; 43
    3d38:	41 f0       	breq	.+16     	; 0x3d4a <atoi+0x2a>
    3d3a:	2d 32       	cpi	r18, 0x2D	; 45
    3d3c:	39 f4       	brne	.+14     	; 0x3d4c <atoi+0x2c>
    3d3e:	68 94       	set
    3d40:	04 c0       	rjmp	.+8      	; 0x3d4a <atoi+0x2a>
    3d42:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <__mulhi_const_10>
    3d46:	82 0f       	add	r24, r18
    3d48:	91 1d       	adc	r25, r1
    3d4a:	21 91       	ld	r18, Z+
    3d4c:	20 53       	subi	r18, 0x30	; 48
    3d4e:	2a 30       	cpi	r18, 0x0A	; 10
    3d50:	c0 f3       	brcs	.-16     	; 0x3d42 <atoi+0x22>
    3d52:	1e f4       	brtc	.+6      	; 0x3d5a <atoi+0x3a>
    3d54:	90 95       	com	r25
    3d56:	81 95       	neg	r24
    3d58:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5a:	08 95       	ret

00003d5c <memcpy>:
    3d5c:	fb 01       	movw	r30, r22
    3d5e:	dc 01       	movw	r26, r24
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <memcpy+0xa>
    3d62:	01 90       	ld	r0, Z+
    3d64:	0d 92       	st	X+, r0
    3d66:	41 50       	subi	r20, 0x01	; 1
    3d68:	50 40       	sbci	r21, 0x00	; 0
    3d6a:	d8 f7       	brcc	.-10     	; 0x3d62 <memcpy+0x6>
    3d6c:	08 95       	ret

00003d6e <strcmp>:
    3d6e:	fb 01       	movw	r30, r22
    3d70:	dc 01       	movw	r26, r24
    3d72:	8d 91       	ld	r24, X+
    3d74:	01 90       	ld	r0, Z+
    3d76:	80 19       	sub	r24, r0
    3d78:	01 10       	cpse	r0, r1
    3d7a:	d9 f3       	breq	.-10     	; 0x3d72 <strcmp+0x4>
    3d7c:	99 0b       	sbc	r25, r25
    3d7e:	08 95       	ret

00003d80 <strcpy>:
    3d80:	fb 01       	movw	r30, r22
    3d82:	dc 01       	movw	r26, r24
    3d84:	01 90       	ld	r0, Z+
    3d86:	0d 92       	st	X+, r0
    3d88:	00 20       	and	r0, r0
    3d8a:	e1 f7       	brne	.-8      	; 0x3d84 <strcpy+0x4>
    3d8c:	08 95       	ret

00003d8e <strncmp>:
    3d8e:	fb 01       	movw	r30, r22
    3d90:	dc 01       	movw	r26, r24
    3d92:	41 50       	subi	r20, 0x01	; 1
    3d94:	50 40       	sbci	r21, 0x00	; 0
    3d96:	30 f0       	brcs	.+12     	; 0x3da4 <strncmp+0x16>
    3d98:	8d 91       	ld	r24, X+
    3d9a:	01 90       	ld	r0, Z+
    3d9c:	80 19       	sub	r24, r0
    3d9e:	19 f4       	brne	.+6      	; 0x3da6 <strncmp+0x18>
    3da0:	00 20       	and	r0, r0
    3da2:	b9 f7       	brne	.-18     	; 0x3d92 <strncmp+0x4>
    3da4:	88 1b       	sub	r24, r24
    3da6:	99 0b       	sbc	r25, r25
    3da8:	08 95       	ret

00003daa <strncpy>:
    3daa:	fb 01       	movw	r30, r22
    3dac:	dc 01       	movw	r26, r24
    3dae:	41 50       	subi	r20, 0x01	; 1
    3db0:	50 40       	sbci	r21, 0x00	; 0
    3db2:	48 f0       	brcs	.+18     	; 0x3dc6 <strncpy+0x1c>
    3db4:	01 90       	ld	r0, Z+
    3db6:	0d 92       	st	X+, r0
    3db8:	00 20       	and	r0, r0
    3dba:	c9 f7       	brne	.-14     	; 0x3dae <strncpy+0x4>
    3dbc:	01 c0       	rjmp	.+2      	; 0x3dc0 <strncpy+0x16>
    3dbe:	1d 92       	st	X+, r1
    3dc0:	41 50       	subi	r20, 0x01	; 1
    3dc2:	50 40       	sbci	r21, 0x00	; 0
    3dc4:	e0 f7       	brcc	.-8      	; 0x3dbe <strncpy+0x14>
    3dc6:	08 95       	ret

00003dc8 <strstr>:
    3dc8:	fb 01       	movw	r30, r22
    3dca:	51 91       	ld	r21, Z+
    3dcc:	55 23       	and	r21, r21
    3dce:	a9 f0       	breq	.+42     	; 0x3dfa <strstr+0x32>
    3dd0:	bf 01       	movw	r22, r30
    3dd2:	dc 01       	movw	r26, r24
    3dd4:	4d 91       	ld	r20, X+
    3dd6:	45 17       	cp	r20, r21
    3dd8:	41 11       	cpse	r20, r1
    3dda:	e1 f7       	brne	.-8      	; 0x3dd4 <strstr+0xc>
    3ddc:	59 f4       	brne	.+22     	; 0x3df4 <strstr+0x2c>
    3dde:	cd 01       	movw	r24, r26
    3de0:	01 90       	ld	r0, Z+
    3de2:	00 20       	and	r0, r0
    3de4:	49 f0       	breq	.+18     	; 0x3df8 <strstr+0x30>
    3de6:	4d 91       	ld	r20, X+
    3de8:	40 15       	cp	r20, r0
    3dea:	41 11       	cpse	r20, r1
    3dec:	c9 f3       	breq	.-14     	; 0x3de0 <strstr+0x18>
    3dee:	fb 01       	movw	r30, r22
    3df0:	41 11       	cpse	r20, r1
    3df2:	ef cf       	rjmp	.-34     	; 0x3dd2 <strstr+0xa>
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	01 97       	sbiw	r24, 0x01	; 1
    3dfa:	08 95       	ret

00003dfc <itoa>:
    3dfc:	fb 01       	movw	r30, r22
    3dfe:	9f 01       	movw	r18, r30
    3e00:	e8 94       	clt
    3e02:	42 30       	cpi	r20, 0x02	; 2
    3e04:	c4 f0       	brlt	.+48     	; 0x3e36 <itoa+0x3a>
    3e06:	45 32       	cpi	r20, 0x25	; 37
    3e08:	b4 f4       	brge	.+44     	; 0x3e36 <itoa+0x3a>
    3e0a:	4a 30       	cpi	r20, 0x0A	; 10
    3e0c:	29 f4       	brne	.+10     	; 0x3e18 <itoa+0x1c>
    3e0e:	97 fb       	bst	r25, 7
    3e10:	1e f4       	brtc	.+6      	; 0x3e18 <itoa+0x1c>
    3e12:	90 95       	com	r25
    3e14:	81 95       	neg	r24
    3e16:	9f 4f       	sbci	r25, 0xFF	; 255
    3e18:	64 2f       	mov	r22, r20
    3e1a:	77 27       	eor	r23, r23
    3e1c:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__udivmodhi4>
    3e20:	80 5d       	subi	r24, 0xD0	; 208
    3e22:	8a 33       	cpi	r24, 0x3A	; 58
    3e24:	0c f0       	brlt	.+2      	; 0x3e28 <itoa+0x2c>
    3e26:	89 5d       	subi	r24, 0xD9	; 217
    3e28:	81 93       	st	Z+, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	a1 f7       	brne	.-24     	; 0x3e18 <itoa+0x1c>
    3e30:	16 f4       	brtc	.+4      	; 0x3e36 <itoa+0x3a>
    3e32:	5d e2       	ldi	r21, 0x2D	; 45
    3e34:	51 93       	st	Z+, r21
    3e36:	10 82       	st	Z, r1
    3e38:	c9 01       	movw	r24, r18
    3e3a:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <strrev>

00003e3e <__mulhi_const_10>:
    3e3e:	7a e0       	ldi	r23, 0x0A	; 10
    3e40:	97 9f       	mul	r25, r23
    3e42:	90 2d       	mov	r25, r0
    3e44:	87 9f       	mul	r24, r23
    3e46:	80 2d       	mov	r24, r0
    3e48:	91 0d       	add	r25, r1
    3e4a:	11 24       	eor	r1, r1
    3e4c:	08 95       	ret

00003e4e <utoa>:
    3e4e:	fb 01       	movw	r30, r22
    3e50:	9f 01       	movw	r18, r30
    3e52:	42 30       	cpi	r20, 0x02	; 2
    3e54:	74 f0       	brlt	.+28     	; 0x3e72 <utoa+0x24>
    3e56:	45 32       	cpi	r20, 0x25	; 37
    3e58:	64 f4       	brge	.+24     	; 0x3e72 <utoa+0x24>
    3e5a:	64 2f       	mov	r22, r20
    3e5c:	77 27       	eor	r23, r23
    3e5e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <__udivmodhi4>
    3e62:	80 5d       	subi	r24, 0xD0	; 208
    3e64:	8a 33       	cpi	r24, 0x3A	; 58
    3e66:	0c f0       	brlt	.+2      	; 0x3e6a <utoa+0x1c>
    3e68:	89 5d       	subi	r24, 0xD9	; 217
    3e6a:	81 93       	st	Z+, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	00 97       	sbiw	r24, 0x00	; 0
    3e70:	a1 f7       	brne	.-24     	; 0x3e5a <utoa+0xc>
    3e72:	10 82       	st	Z, r1
    3e74:	c9 01       	movw	r24, r18
    3e76:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <strrev>

00003e7a <strrev>:
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	67 2f       	mov	r22, r23
    3e80:	71 91       	ld	r23, Z+
    3e82:	77 23       	and	r23, r23
    3e84:	e1 f7       	brne	.-8      	; 0x3e7e <strrev+0x4>
    3e86:	32 97       	sbiw	r30, 0x02	; 2
    3e88:	04 c0       	rjmp	.+8      	; 0x3e92 <strrev+0x18>
    3e8a:	7c 91       	ld	r23, X
    3e8c:	6d 93       	st	X+, r22
    3e8e:	70 83       	st	Z, r23
    3e90:	62 91       	ld	r22, -Z
    3e92:	ae 17       	cp	r26, r30
    3e94:	bf 07       	cpc	r27, r31
    3e96:	c8 f3       	brcs	.-14     	; 0x3e8a <strrev+0x10>
    3e98:	08 95       	ret

00003e9a <__prologue_saves__>:
    3e9a:	2f 92       	push	r2
    3e9c:	3f 92       	push	r3
    3e9e:	4f 92       	push	r4
    3ea0:	5f 92       	push	r5
    3ea2:	6f 92       	push	r6
    3ea4:	7f 92       	push	r7
    3ea6:	8f 92       	push	r8
    3ea8:	9f 92       	push	r9
    3eaa:	af 92       	push	r10
    3eac:	bf 92       	push	r11
    3eae:	cf 92       	push	r12
    3eb0:	df 92       	push	r13
    3eb2:	ef 92       	push	r14
    3eb4:	ff 92       	push	r15
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	cf 93       	push	r28
    3ebc:	df 93       	push	r29
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	ca 1b       	sub	r28, r26
    3ec4:	db 0b       	sbc	r29, r27
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	09 94       	ijmp

00003ed2 <__epilogue_restores__>:
    3ed2:	2a 88       	ldd	r2, Y+18	; 0x12
    3ed4:	39 88       	ldd	r3, Y+17	; 0x11
    3ed6:	48 88       	ldd	r4, Y+16	; 0x10
    3ed8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3eda:	6e 84       	ldd	r6, Y+14	; 0x0e
    3edc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ede:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ee0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ee2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ee4:	b9 84       	ldd	r11, Y+9	; 0x09
    3ee6:	c8 84       	ldd	r12, Y+8	; 0x08
    3ee8:	df 80       	ldd	r13, Y+7	; 0x07
    3eea:	ee 80       	ldd	r14, Y+6	; 0x06
    3eec:	fd 80       	ldd	r15, Y+5	; 0x05
    3eee:	0c 81       	ldd	r16, Y+4	; 0x04
    3ef0:	1b 81       	ldd	r17, Y+3	; 0x03
    3ef2:	aa 81       	ldd	r26, Y+2	; 0x02
    3ef4:	b9 81       	ldd	r27, Y+1	; 0x01
    3ef6:	ce 0f       	add	r28, r30
    3ef8:	d1 1d       	adc	r29, r1
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	ed 01       	movw	r28, r26
    3f06:	08 95       	ret

00003f08 <__do_global_dtors>:
    3f08:	12 e0       	ldi	r17, 0x02	; 2
    3f0a:	c4 ea       	ldi	r28, 0xA4	; 164
    3f0c:	d2 e0       	ldi	r29, 0x02	; 2
    3f0e:	04 c0       	rjmp	.+8      	; 0x3f18 <__do_global_dtors+0x10>
    3f10:	fe 01       	movw	r30, r28
    3f12:	0e 94 8e 1c 	call	0x391c	; 0x391c <__tablejump__>
    3f16:	22 96       	adiw	r28, 0x02	; 2
    3f18:	c6 3a       	cpi	r28, 0xA6	; 166
    3f1a:	d1 07       	cpc	r29, r17
    3f1c:	c9 f7       	brne	.-14     	; 0x3f10 <__do_global_dtors+0x8>
    3f1e:	f8 94       	cli

00003f20 <__stop_program>:
    3f20:	ff cf       	rjmp	.-2      	; 0x3f20 <__stop_program>
